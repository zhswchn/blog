<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React Native</title>
    <link href="/blog/2022/06/14/React-Native/"/>
    <url>/blog/2022/06/14/React-Native/</url>
    
    <content type="html"><![CDATA[<p>本文记录折腾 React Native 所遇到的一些东西。</p><span id="more"></span><h2 id="使用夜神模拟器调试"><a href="#使用夜神模拟器调试" class="headerlink" title="使用夜神模拟器调试"></a>使用夜神模拟器调试</h2><blockquote><p>前置条件:</p><ol><li>React Native 开发环境配置，详见<a href="https://www.react-native.cn/docs/environment-setup">官网</a></li><li>安装夜神模拟器</li><li>模拟器中打开 usb 调试</li></ol></blockquote><h3 id="检查-adb-版本号"><a href="#检查-adb-版本号" class="headerlink" title="检查 adb 版本号"></a>检查 adb 版本号</h3><ul><li>进入 <code>Android Studio</code> 安装目录下的 <code>android-sdk/platform-tools</code> 目录下打开终端输入命令查看 <code>adb</code> 版本。</li></ul><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pwsh">./adb.exe version<br></code></pre></td></tr></table></figure><ul><li>进入夜神模拟器安装目录下 <code>Nox\bin</code> 打开终端输入检查</li></ul><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pwsh">./nox_adb.exe version<br></code></pre></td></tr></table></figure><ul><li>对比命令行中的 <code>Android Debug Bridge version</code> 版本号, 不一致就把 <code>Android Studio</code> 的 <code>adb.exe</code> 文件复制到模拟器安装目录中替换掉 <code>nox_adb.exe</code> 记得重命名</li></ul><h3 id="连接模拟器设备"><a href="#连接模拟器设备" class="headerlink" title="连接模拟器设备"></a>连接模拟器设备</h3><ul><li>打开模拟器, <code>RN</code> 项目中命令行输入 <code>adb devices</code> 如果没有看到 <code>127.0.0.1:62001</code> 这类字眼就表示没有连接上设备</li><li>手动连接: 进入 <code>android-sdk/platform-tools</code> 目录下打开终端输入 <code>./adb.exe connect 127.0.0.1:62001</code></li><li>至此完毕, 可以在 <code>RN</code> 项目中 <code>yarn android</code> 跑起来了.</li></ul>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React Native</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Hooks</title>
    <link href="/blog/2021/12/12/React-Hooks/"/>
    <url>/blog/2021/12/12/React-Hooks/</url>
    
    <content type="html"><![CDATA[<p>转 React 技术栈了，最近复习一下 Hooks 相关知识在此记录下来，主要时一些常用的 Hook 。</p><span id="more"></span><p>Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class(类组件) 的情况下使用 state 以及其他的 React 特性。</p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p><code>useStat</code>用于在函数组件中添加 state 的 Hook。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * state: 变量</span><br><span class="hljs-comment"> * setState: 用于修改变量的函数</span><br><span class="hljs-comment"> * initialValue: 初始值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>(initialValue)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs react">import &#123; useState &#125; from &#x27;react&#x27;;<br><br>// 声明一个叫 “count” 的 state 变量<br><br>const App = () =&gt; &#123;<br>  const [count, setCount] = useState(0);<br>  return (<br>    &lt;div&gt;<br>      &lt;div&gt;&#123;count&#125;&lt;/div&gt;<br>      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; 点我+1 &lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;;<br><br>export default App;<br></code></pre></td></tr></table></figure><p>可以设置一些复杂数据类型，数组对象等，但是 setCount 在设置变量的时候是整个替换，而不是合并数据，要注意手动合并，并且在更新数据时会重新渲染组件。</p><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p><code>useEffect</code>用于在函数组件中执行一些<strong>副作用</strong>操作。</p><p><strong>副作用</strong>：</p><p>React 把<strong>在更新 DOM 后运行的一些额外带代码</strong>称之为<strong>副作用</strong>，比如发送网络请求、手动更改 DOM、设置/销毁定时器等等。其中一些在操作之后可以忽略掉，比如发送网络请求，另一些需要手动清除，比如定时器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * callback: 回调</span><br><span class="hljs-comment"> * deps: 依赖数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">useEffect</span>(callback, deps)<br></code></pre></td></tr></table></figure><blockquote><p><strong><code>useEffect</code> 做了什么？</strong> 通过使用这个 Hook，你可以告诉 React 组件需要在渲染后执行某些操作。React 会保存你传递的函数（我们将它称之为 “effect”），并且在执行 DOM 更新之后调用它。</p></blockquote><p>每次 DOM 渲染完都会执行一次 <code>useEffect</code>的回调，包括更新 DOM 后。</p><p>但是每次重新渲染都会生成<strong>新的 Effect</strong>，替换之前的，也就是说每次传递给 <code>useEffect</code> 的函数都是一个新的函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-comment">// 每次点击按钮都会运行</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;useEffect&#x27;</span>)<br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt; 点我+1 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p>可以设置依赖项，根据依赖项控制 <code>useEffect</code>执行，这样可以减少不必要的计算，从而优化性能。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;useEffect&#x27;</span>)<br>    <span class="hljs-comment">// 只有count变化时才会运行</span><br>  &#125;, [count])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;count&#125;---&#123;state&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt; 点我运行 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setState(state + 1)&#125;&gt; 点我不运行 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p>如果依赖项为 <code>[]</code>空数组，那么只会在第一次渲染时执行一次，后续 DOM 更新渲染后不会执行。</p><p><code>useEffect</code> 每个 effect 都可以返回一个清除函数，这个函数会在组件卸载的时候清除副作用，比如清除定时器。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;定时器&#x27;</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;卸载&#x27;</span>)<br>      <span class="hljs-built_in">clearInterval</span>(timer) <span class="hljs-comment">// 清除副作用</span><br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p>简单点形容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(callback, [])          类似: <span class="hljs-title function_">componentDidMount</span>()<br><br><span class="hljs-title function_">useEffect</span>(callback, [count])     类似: <span class="hljs-title function_">componentDidUpdate</span>()<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;                类似: <span class="hljs-title function_">componentWillUnmount</span>()<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 卸载函数</span><br>  &#125;<br>&#125;, [count])<br></code></pre></td></tr></table></figure><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><blockquote><p><code>useState</code> 的替代方案。它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 <code>dispatch</code> 方法。</p><p>在某些场景下，<code>useReducer</code> 会比 <code>useState</code> 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initialArg, init)<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// reducer</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;increment&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;decrement&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [counter, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, <span class="hljs-number">10</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>函数组件 - &#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;increment&#x27; &#125;)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;decrement&#x27; &#125;)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> value = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MyContext</span>)<br></code></pre></td></tr></table></figure><p>可以实现从上到下跨多层组件传递数据，兄弟组件数据共享，或者配合 <code>useReducer</code> 组合 <code>redux</code></p><p><strong>基本使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// context.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>()<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 父组件</span><br><span class="hljs-keyword">import</span> myContext <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  ;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">myContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">test</span> <span class="hljs-attr">data</span>&#x27;&#125;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">myContext.Provider</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 子组件 Child</span><br><span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> myContext <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 获取 context 里面的数据</span><br>  <span class="hljs-keyword">const</span> val = <span class="hljs-title function_">useContext</span>(myContext) <span class="hljs-comment">// test data</span><br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>子组件 - &#123;val&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Child</span><br></code></pre></td></tr></table></figure><p><strong>实现数据共享</strong></p><p>共享中心</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-comment">// 导出1 : context</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> myContext = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>()<br><br><span class="hljs-comment">// 导出2 : 函数组件</span><br><span class="hljs-comment">// 重定义 Provider</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyProvider</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-comment">// !!! 这里设置数据以及更新方法 !!!</span><br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// 组合要传递的共享数据</span><br>  <span class="hljs-keyword">const</span> value = &#123;<br>    count,<br>    <span class="hljs-attr">increment</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>),<br>    <span class="hljs-attr">decrement</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">setCount</span>(count - <span class="hljs-number">1</span>),<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">myContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">myContext.Provider</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>把要共享数据的组件包裹起来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Counter1</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./demo2/Counter1&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Counter2</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./demo2/Counter2&#x27;</span><br><br><span class="hljs-comment">// 父组件引入 Provider</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MyProvider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 把要共享数据的组件包裹起来 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyProvider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">MyProvider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p>组件使用通信</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 其中一个子组件，另一个同理</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入 context</span><br><span class="hljs-keyword">import</span> &#123; myContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Counter1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; counter, increment, decrement &#125; = <span class="hljs-title function_">useContext</span>(myContext)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>函数组件1 - &#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> increment()&#125;&gt;函数组件 +1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> decrement()&#125;&gt;函数组件 -1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Counter1</span><br></code></pre></td></tr></table></figure><p>有点像我写 <code>Vue</code>拆分组件时，数据和方法定义在父组件中，传递给子组件使用，子组件通过父组件获取和更新数据，主要起到一个数据中心的作用。</p><blockquote><p>同样的道理，把共享中心的 <code>useState</code>换成 <code>useReducer</code>即可组成一个简单的 <code>Redux</code></p></blockquote><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建ref对象</span><br><span class="hljs-keyword">const</span> refContainer = <span class="hljs-title function_">useRef</span>(initialValue)<br></code></pre></td></tr></table></figure><blockquote><p><code>useRef</code> 返回一个可变的 ref 对象，其 <code>.current</code> 属性被初始化为传入的参数（<code>initialValue</code>）。返回的 ref 对象在组件的整个生命周期内保持不变。</p></blockquote><p>Ref <code>Vue</code>中也有，一般用于获取子组件实例，React 中也可以用来访问 DOM。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> btnRef = <span class="hljs-title function_">useRef</span>()<br>  <span class="hljs-comment">// 通过 btnRef.current 访问</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;btnRef&#125;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p>还可以用来保存任何可变变量</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 给个初始值</span><br>  <span class="hljs-keyword">const</span> myRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">233</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myRef.<span class="hljs-property">current</span>) <span class="hljs-comment">// 233</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> memoizedCallback = <span class="hljs-title function_">useCallback</span>(callback, [deps])<br></code></pre></td></tr></table></figure><p>一般用来在函数组件中缓存计算函数，避免重复的无用计算</p><p><code>useCallback</code>会把 <code>callback</code>返回，并将结果 <code>memoizedCallback</code> 缓存，只有当依赖 <code>[deps]</code>更新时才会返回新的函数。</p><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> memoizedValue = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">computeExpensiveValue</span>(a, b), [a, b])<br></code></pre></td></tr></table></figure><p>这个用来返回计算结果，也是在依赖改变时重新计算，有助于减少每次渲染时的计算开销，它会在渲染期间执行。</p><blockquote><p>它的第一个参数也是回调函数，因为是缓存结果，所以必须要 return 一个返回值</p></blockquote><h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><p>一般都会以 <code>use</code>开头，放在 Hooks 文件夹里（这个随意）。</p><p>封装一个获取鼠标位置的 Hook</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useMouse</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [mouse, setMouse] = <span class="hljs-title function_">useState</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleMouse</span> = e =&gt; &#123;<br>    <span class="hljs-title function_">setMouse</span>(&#123;<br>      <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span>,<br>      <span class="hljs-attr">y</span>: e.<span class="hljs-property">clientY</span>,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, handleMouse)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 卸载时移除副作用，也就是监听</span><br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, handleMouse)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> mouse<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useMouse<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> useMouse <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useMouse&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 2. 获取 坐标值</span><br>  <span class="hljs-keyword">const</span> mouse = <span class="hljs-title function_">useMouse</span>()<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">      &#123;mouse.x&#125; - &#123;mouse.y&#125;&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h2 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h2><p>正常情况下 ref 是不能挂在到函数组件上的，因为函数组件没有实例。</p><p><code>useImperativeHandle</code> 可以让你在使用 <code>ref</code> 时自定义暴露给父组件的实例值。</p><p><code>useImperativeHandle</code> 应当与 <code>forwardRef</code>一起使用</p><p><code>forwardRef</code>可以用来获取子组件的 ref</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// App</span><br><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child/1&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClicK</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ref.<span class="hljs-property">current</span>) <span class="hljs-comment">// 获取 Child ref</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClicK&#125;</span>&gt;</span>获取节点<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span>;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// child</span><br><span class="hljs-keyword">import</span> &#123; forwardRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params">props, ref</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClicK&#125;</span>&gt;</span></span><br><span class="language-xml">      btn</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">forwardRef</span>(<span class="hljs-title class_">Child</span>)<br></code></pre></td></tr></table></figure><p>如果要父组件执行子组件中的方法需要 <code>useImperativeHandle</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useImperativeHandle</span>(ref, createHandle, [deps])<br></code></pre></td></tr></table></figure><p>createHandle：一个函数，返回一个对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// App</span><br><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child/1&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClicK</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">handleClicK</span>() <span class="hljs-comment">// 233</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClicK&#125;</span>&gt;</span>执行方法<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span>;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// child</span><br><span class="hljs-keyword">import</span> &#123; forwardRef, useImperativeHandle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params">props, ref</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClicK</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">233</span>)<br>  &#125;<br>  <span class="hljs-title function_">useImperativeHandle</span>(ref, <span class="hljs-function">() =&gt;</span> (&#123;<br>    handleClicK,<br>  &#125;))<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClicK&#125;</span>&gt;</span> click me <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">forwardRef</span>(<span class="hljs-title class_">Index</span>)<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前就这些 Hook 较为常用，其他常用的大多为第三方提供的，比如阿里的 <code>aHooks</code>。</p><p>React 默认会有多余的 <code>render</code> 组件更新哪怕一些方法没有变化却依旧会渲染，这部分的渲染是浪费的，所以部分 Hook 有提供依赖来控制渲染。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React Hooks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element-ui踩坑</title>
    <link href="/blog/2021/05/24/element-ui%E8%B8%A9%E5%9D%91/"/>
    <url>/blog/2021/05/24/element-ui%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p><code>element-ui</code> <code>dialog</code>以及<code>form</code></p><p> <code>dialog</code>是很常用的组件，以前写的太麻烦了，子父组件通信传递<code>isShow</code>布尔值来控制显隐，现在优化一下</p><span id="more"></span><p>将显隐变量<code>visible</code>定义在<code>dialog</code>中，由子组件自己操控，父组件通过<code>ref</code>去操控子组件的方法，实现自更新<code>visible</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;dialog&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;visible&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:before-close</span>=<span class="hljs-string">&quot;close&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>立即创建<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">visible</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">form</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;submit&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">close</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">open</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">visible</span> = <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&quot;form&quot;</span>].<span class="hljs-title function_">resetFields</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">visible</span> = <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="hljs-comment">// 父组件使用</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">index-dialog</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dialog&quot;</span> @<span class="hljs-attr">submit</span>=<span class="hljs-string">&quot;updata&quot;</span> /&gt;</span></span><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">dialog</span>.<span class="hljs-title function_">open</span>();<br><br><span class="hljs-comment">// updata用于更新后续操作,比如获取表格数据</span><br></code></pre></td></tr></table></figure><p>顺带说一点<code>form</code>表单重置方法<code>resetFields()</code>无效的坑:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&quot;form&quot;</span>].<span class="hljs-title function_">resetFields</span>();<br></code></pre></td></tr></table></figure><ol><li><code>&lt;el-form ref=&quot;formRef&quot;&gt;</code> 上没有<code>ref</code>,或者与<code>$refs[]</code>中的不一致</li><li><strong>这个最容易忽视</strong>,<code>&lt;el-form-item prop=&quot;password&quot;&gt;</code> 这个上面要加<code>prop</code>属性,值要与其中的<code>v-model</code>绑定的相对应,只有加了<code>prop</code>属性的才能重置</li></ol><p>如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- 都是username --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另外<code>resetFields()</code>是将表单所有字段重置为初始值,不是赋为空值</p>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
      <category>小技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下载文件</title>
    <link href="/blog/2021/05/24/%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <url>/blog/2021/05/24/%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>最近有下载文件的需求,以前写小程序都是微信封装好的api,这次自己封装</p><span id="more"></span><p>一般通过HTML5规范中<code>a</code>标签的DownLoad属性下载</p><p>使用Axios请求,在请求时要加<code>responseType: &quot;blob&quot;</code>,转换为<code>blob</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// axios请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/test/test.pdf&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">responseType</span>: <span class="hljs-string">&quot;blob&quot;</span>,<br>  &#125;);<br><br><span class="hljs-comment">// 封装downLoad</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">downLoad</span>(<span class="hljs-params">file,fileName</span>) &#123;<br>  <span class="hljs-comment">// 如果后端返回的是文件流，可以使用Blob对象包装一下 blob = new Blob([file],&#123;type: &#x27;pdf&#x27;&#125;) type文件类型</span><br>  <span class="hljs-keyword">const</span> url = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(file);<br>  <span class="hljs-keyword">const</span> aLink = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  aLink.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>  aLink.<span class="hljs-property">href</span> = url;<br>  aLink.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;download&quot;</span>, fileName); <span class="hljs-comment">// 这里可以给下载的文件命名</span><br>  aLink.<span class="hljs-title function_">click</span>();<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(url);<br>&#125;<br><br>...<br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">import</span> downLoad <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/downLoad&quot;</span>;<br><span class="hljs-comment">// 后端返回的下载地址</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$api</span>.<span class="hljs-title function_">getData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> <span class="hljs-title function_">downLoad</span>(res.<span class="hljs-property">data</span>,<span class="hljs-string">&#x27;test&#x27;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React</title>
    <link href="/blog/2021/03/21/React/"/>
    <url>/blog/2021/03/21/React/</url>
    
    <content type="html"><![CDATA[<p>React.js 一个用于构建用户界面的JavaScript库</p><span id="more"></span><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>React 是一个将数据渲染为HTML视图的JavaScript库</p><ol><li>原生JS操作DOM繁琐，效率低</li><li>原生JS直接操作DOM，浏览器会进行大量的重绘重排</li><li>原生JS没有组件化编码方案，代码复用率低</li></ol><p>React特点:</p><ol><li>组件化模式，声明式编码，提高开发效率及组件复用率</li><li>RN中可以用React开发移动端App</li><li>使用虚拟DOM+Diffing算法，减少DOM的交互</li></ol><p>虚拟DOM:</p><p>原生JS修改DOM时是直接替换所有的节点，不管有没有发生变化</p><p>通过Diffing算法将数据转为虚拟DOM，在渲染为真实DOM<br>当新增DOM节点数据时，虚拟DOM会对比，相同的已有的节点不会变，只渲染新增的节点</p><blockquote><p>循环需要key值，就是diff用来区分项的，没有key就无法复用DOM节点</p></blockquote><h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><p>去React官网下载React文件，新建html文件，引入React和ReactDOM的js文件以及babel文件(解析JSX)，可以获得全局的React和ReactDOM对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 创建虚拟DOM</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello react<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">  <span class="hljs-comment">// 渲染虚拟DOM</span></span><br><span class="language-javascript">  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="两种创建虚拟DOM的方式"><a href="#两种创建虚拟DOM的方式" class="headerlink" title="两种创建虚拟DOM的方式"></a>两种创建虚拟DOM的方式</h2><p>第一种是用<code>jsx</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> h1 = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>第二种是用js写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// jsx是这种方法的语法糖</span><br><span class="hljs-keyword">const</span> h1 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;title&#x27;</span>&#125;,<span class="hljs-string">&#x27;title&#x27;</span>)<br></code></pre></td></tr></table></figure><ol><li>虚拟DOM本质是Object类型的对象</li><li>虚拟DOM属性较少，真实DOM属性较多，虚拟DOM只在React内部使用</li><li>虚拟DOM最终会被React转为真实DOM</li></ol><h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><p>全称：JavaScript XML</p><p>用来简化创建虚拟DOM，不是字符串不是html/xml标签，最终产生一个js对象</p><ol><li>定义虚拟DOM不用””</li><li>jsx中js表达式要用{}括起来，只能放表达式，js语句会报错</li><li>CSS样式要用className，不能用class</li><li>style样式要用 <code>&#123;&#123; &#125;&#125;</code> 括起来，如:<code>&#123;&#123;color:"red",fontSize:"16px"&#125;&#125;</code></li><li>只有一个跟标签，标签必须闭合</li><li>标签首字母小写，将转为html中同名标签，没有相对应的会报错</li><li>大写会去渲染相对应的组件，没有会报错</li><li>遇到<code>&lt;</code>以html标签解析，遇到<code>&#123;</code>以js语法解析</li><li>浏览器不能直接解析</li></ol><p>表达式: 一个表达式会产生一个值，可以放在任何一个需要值的地方<br>语句: 控制语句，循环语句</p><h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 首字母必须大写</span></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// babel开启了严格模式，所以是undefined</span></span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>函数组件（适用于简单组件）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span> <span class="hljs-comment">// 函数必须有返回值</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript">  <span class="hljs-comment">// 执行ReactDOM.render后</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 1. react解析组件标签，找到&lt;Demo /&gt;,找不到就报错</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 2. 发现组件是函数定义的，调用该函数，返回虚拟DOM转为真实DOM呈现在页面</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h2><p><strong>复习类：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  &#125;<br>  <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我叫<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,我今年<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>岁`</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, grade</span>) &#123;<br>    <span class="hljs-comment">// super调用Person中的构造函数，super必须在子类this之前调用</span><br>    <span class="hljs-variable language_">super</span>(name, age)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade<br>  &#125;<br>  <span class="hljs-comment">// 重写父类继承的方法</span><br>  <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我叫<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,我今年<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>岁,我读<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.grade&#125;</span>`</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>类中的构造器不是必须写的，要对实例进行一些初始化才写</li><li>A类继承B类，A类中有构造器，那么A类的构造器中必须要用super()调用B类的构造器</li><li>类中定义的方法都是放在了类的原型对象上供实例去使用</li></ol><p><strong>类式组件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript">  <span class="hljs-comment">// 执行ReactDOM.render后</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 1. react解析组件标签，找到&lt;Demo /&gt;,找不到就报错</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 2. 发现组件是类定义的，随后new出来该类的实例，通过实例调用原型上的render()</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 3. 将render()返回虚拟DOM转为真实DOM呈现在页面</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>render()</code>更新1+n次，1是第一次渲染，n是更新的次数，每次更新都会调用一次</p><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>只有类式组件才有<code>state</code>，用于驱动页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">super</span>(props)</span><br><span class="language-javascript">    <span class="hljs-comment">// this.handleClick = this.handleClick.bind(this)</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 不改变this指向就是 undefined</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> state = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">isHot</span>: !state &#125;)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> &#123; isHot &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">        今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;</span></span><br><span class="language-xml"><span class="language-javascript">      <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">    )</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>handleClick</code> 在 <code>Demo</code>的原型对象上，供实例使用，由于<code>handleClick</code>作为<code>onClick</code>的回调，所以不是通过实例调用，是直接调用，此时this应是window，而类中的方法默认开启局部的严格模式，所以<code>handleClick</code>中的this是undefined</p><p>可以用<code>this.handleClick = this.handleClick.bind(this)</code> 重新指定this</p><p>或者<code>&#123;this.handleClick.bind(this)&#125;</code></p><p>不可直接修改<code>state</code>,要用<code>setState</code>进行更新,<code>setState</code>是一种合并,不是替换,它会执行一次<code>render()</code>更新页面</p><h3 id="state简写"><a href="#state简写" class="headerlink" title="state简写"></a>state简写</h3><p>类中的属性一般都是创建实例时传递的属性,如果想要有固定的属性可以不在<code>constructor</code>中定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>    <span class="hljs-comment">// this.gender = &#x27;man&#x27;</span><br>  &#125;<br><br>  gender = <span class="hljs-string">&#x27;man&#x27;</span> <span class="hljs-comment">// 这样写也可以实现固定的属性</span><br>&#125;<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">20</span>)<br><span class="hljs-keyword">const</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-number">22</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// Test &#123;name: &quot;zs&quot;, age: 20, gender: &quot;man&quot;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// Test &#123;name: &quot;ls&quot;, age: 22, gender: &quot;man&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>这就意味着 <code>constructor</code>里的<code>state</code>可以拿出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-comment">// constructor不是必须的</span><br>  state = &#123;<br>    <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span>,<br>  &#125;<br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> state = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">isHot</span>: !state &#125;)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; isHot &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>handleClick = () =&gt; &#123;&#125;</code> 箭头函数没有自己的this它会向上找this,所以不用改变this指向</p></blockquote><h3 id="state总结"><a href="#state总结" class="headerlink" title="state总结"></a>state总结</h3><ul><li><code>state</code>是组件中重要的对象,必须是个对象</li><li>通过更新组件的<code>state</code>来更新对应的页面显示(render()重新渲染)</li><li>组件中的render()中的this为组件的实例对象</li><li>组件中自定义的方法中的this为undefined，可通过<code>bind()</code>绑定this或者用箭头函数</li><li>state中的数据不能直接修改或更新，要用<code>setState()</code></li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>组件标签中写的属性都会保存到该组件的<code>props</code>中，<code>props</code>是只读的，组件内不允许修改，这个也是单向数据流</p><blockquote><p>标签体内容是一个标签属性,可以通过this.props.children获取</p></blockquote><p>类组件中的<code>constructor</code>几乎不用写，如果不初始化state或者不进行方法绑定，则不需要在类里面写构造器</p><p>然而<code>state</code>可以不写在里面，方法绑定也可用箭头函数代替，所以不用写</p><p><code>constructor</code>中应在<code>this</code>使用之前调用<code>super(props)</code>，否则使用<code>this.props</code>会导致undefined，注意只有<code>this.props</code>会导致，<code>props</code>完全没问题</p><p><strong>总结：</strong>构造器是否接收props，是否传递给super取决于是否希望在构造器中通过this调用props</p><h3 id="限制props"><a href="#限制props" class="headerlink" title="限制props"></a><span id="props">限制props</span></h3><p>对props中的属性值进行类型限制和必要性限制，类似Vue中子组件的<code>props</code>对象</p><p>第一种方式（React v15.5 开始已弃用,propTypes挂到React上太大了）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Demo</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">number</span><br>&#125;<br></code></pre></td></tr></table></figure><p>第二种方式（新）：使用prop-types库进限制（需要引入prop-types库）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Demo</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span><br>&#125;<br></code></pre></td></tr></table></figure><p>设置默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Demo</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;man&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果要限制函数则是<code>func</code>，因为<code>function</code>是关键字</p></blockquote><h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><p>要给类添加静态属性可以在外面添加，也可以在里面添加（<code>static</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-keyword">static</span> age = <span class="hljs-number">12</span><br>&#125;<br><span class="hljs-comment">// Demo.age = 12</span><br></code></pre></td></tr></table></figure><p>所以可以这样：</p><blockquote><p>只有类式组件可以这样，只有类才有 <code>static</code>， 函数式组件不能这样简写，要用原始的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;this.props.gender&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;this.props.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>  &#125;<br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  &#125;<br>  <span class="hljs-keyword">static</span> defaultProps = &#123;<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;man&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  &#125;<br>&#125;<br><span class="hljs-comment">// Demo.propTypes = &#123;</span><br><span class="hljs-comment">//   name: PropTypes.string.isRequired,</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// Demo.defaultProps = &#123;</span><br><span class="hljs-comment">//   gender: &#x27;man&#x27;,</span><br><span class="hljs-comment">//   age: 18,</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><h3 id="复习展开运算符"><a href="#复习展开运算符" class="headerlink" title="复习展开运算符"></a>复习展开运算符</h3><p>以对象的方式传值可用展开运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><span class="hljs-keyword">const</span> people = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;man&#x27;</span>,<br>&#125;<br>......<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> &#123;<span class="hljs-attr">...people</span>&#125; /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zs&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;20&#125;</span> <span class="hljs-attr">gender</span>=<span class="hljs-string">&quot;man&quot;</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br><br></code></pre></td></tr></table></figure><p>复习：展开运算符<code>...</code>,除了常用的还可以拷贝对象(只能深拷贝第一层)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123; <span class="hljs-attr">name</span>: <span class="hljs-number">123</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">123</span> &#125;<br><span class="hljs-keyword">let</span> b = &#123; ...a &#125; <span class="hljs-comment">// 拷贝对象</span><br><span class="hljs-keyword">let</span> c = &#123; ...a, <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>&#125; <span class="hljs-comment">// 拷贝后合并</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...a)<span class="hljs-comment">// 报错，不能展开对象</span><br><br></code></pre></td></tr></table></figure><blockquote><p><code>...</code> 展开运算符不能展开对象，但是react和babel可以让react中标签里使用<code>...</code>展开对象，只有标签里可以<br><code>const people = &#123;name:&#39;vs&#39;,age:10&#125;</code><br><code>&lt;Demo &#123;...people&#125; /&gt;</code><br>标签里的<code>&#123;&#125;</code>是react的用于解析js的语法格式，不是对象的<code>&#123;&#125;</code></p></blockquote><h3 id="函数式组件–props"><a href="#函数式组件–props" class="headerlink" title="函数式组件–props"></a>函数式组件–props</h3><p>函数式组件只能用props，props通过参数传入，因为没有state所以也称无状态组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; name, age, gender &#125; = props<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;gender&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">const</span> people = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;man&#x27;</span>,<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> &#123;<span class="hljs-attr">...people</span>&#125; /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p>函数式组件限制<code>props</code>要用原始的写法，不能用上面的<code>static</code>关键字简写，这个关键字属于类，点击此处查看原始写法：<a href="#props">限制props</a></p><h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p>类式组件内的this中有三个常用的对象，<code>state</code>,<code>props</code>,<code>refs</code></p><p><code>ref</code>属性用于组件的标签识别，<code>refs</code>是复数形式里面可以存放多个<code>ref</code></p><h3 id="字符串形式"><a href="#字符串形式" class="headerlink" title="字符串形式"></a>字符串形式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input ref=<span class="hljs-string">&quot;input1&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>组件内通过<code>this.refs.input1</code> 获取真实DOM节点<br>React官网说，效率不高未来可能移除，不建议多用</p><h3 id="回调函数形式"><a href="#回调函数形式" class="headerlink" title="回调函数形式"></a>回调函数形式</h3><p>形参<code>c</code>(<code>currentNode</code>)是DOM节点，回调函数会立即执行，相当于自动把input的DOM节点挂载到了组件的this上<br>在组件的中可通过<code>this.input</code>获取该DOM节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input ref=&#123;<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span> = c)&#125; /&gt;<br></code></pre></td></tr></table></figure><p>如果<code>ref</code>回调函数以内联（也就是写在标签里面）方式定义的，更新过程中会被执行两次，第一次传入<code>null</code>，第二次传入参数DOM元素，因为每次渲染会创建一个新的函数实例，所以React要清空旧的<code>ref</code>设置新的，这样写可以避免上述问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 就是自定义函数的写法</span><br>saveInput = <span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span> = c<br>&#125;<br>......<br>&lt;input ref=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">saveInput</span>&#125; type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>大多数情况下哪种写法都无所谓，一般内联的写法较多</p><h3 id="createRef形式"><a href="#createRef形式" class="headerlink" title="createRef形式"></a>createRef形式</h3><p>目前是React官方推荐的<code>ref</code>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  myRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>  showData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myRef&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p><code>React.createRef()</code> 调用后可以返回一个容器，该容器可以存储<strong>一个</strong>被<code>ref</code>所标识的节点，只能存一个，后面的存储的会覆盖前面的，需要多个就创建多个<code>React.createRef()</code>取不同的变量名</p><p>通过<code>this.[refName].current</code>获取DOM节点</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>字符串类型的<code>ref</code>能不用就不用，未来可能会废弃的</p><p>回调类型的内联写法和类的绑定函数写法，不用纠结选取一种就好</p><p><code>createRef()</code>稍微麻烦点，但是React官方最推荐的一种</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>通过<code>onXxx</code>属性指定事件处理函数(注意大小写)<ul><li>React使用的是自定义(合成)事件(为了更好的兼容性), 而不是使用的原生DOM事件</li><li>React中的事件是通过事件委托方式(事件冒泡，更高效)处理的(委托给组件最外层的元素)</li></ul></li><li>通过<code>event.target</code>得到发生事件的DOM元素对象，不要过度使用<code>ref</code>，发生事件的元素和要操作的元素是一个时，用<code>event.target</code>也可以</li></ul><h3 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h3><p>受控组件数据在用之前先存放到state中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>  submit = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>()<br>    <span class="hljs-keyword">const</span> &#123; username, password &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`用户名<span class="hljs-subst">$&#123;username&#125;</span> 密码 <span class="hljs-subst">$&#123;password&#125;</span>`</span>)<br>  &#125;<br>  <span class="hljs-comment">// 保存数据</span><br>  saveUsername = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">username</span>:e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>    &#125;)<br>  &#125;<br>  <span class="hljs-comment">// 保存数据</span><br>  savePassword = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">password</span>:e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>    &#125;)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.submit&#125;</span>&gt;</span></span><br><span class="language-xml">        username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveUsername&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        password: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.savePassword&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>非受控组件数据现用现取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  submit = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">// 阻止默认事件</span><br>    <span class="hljs-keyword">const</span> &#123; username, password &#125; = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 此处现取数据</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`用户名<span class="hljs-subst">$&#123;username.value&#125;</span> 密码 <span class="hljs-subst">$&#123;password.value&#125;</span>`</span>)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.submit&#125;</span>&gt;</span></span><br><span class="language-xml">        username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> (this.username = c)&#125; type=&quot;text&quot; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        password: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> (this.password = c)&#125; type=&quot;password&quot; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高阶函数，纯函数，函数柯里化"><a href="#高阶函数，纯函数，函数柯里化" class="headerlink" title="高阶函数，纯函数，函数柯里化"></a>高阶函数，纯函数，函数柯里化</h2><p><strong>高阶函数</strong>：符合以下2个规范中任意一个的函数</p><ul><li>接收的参数是一个函数</li><li>调用的返回值是一个函数</li></ul><p>比如：Promise setTimeout arr.map()/forEach()/filter()/reduce()</p><p>可以实现更加动态可扩展的功能</p><p><strong>纯函数</strong></p><p>同样的输入(实参)同样的输出(返回)</p><p>比如：reducer函数</p><ol><li>不能改写参数数据</li></ol><p><strong>函数柯里化</strong>：通过函数调用继续返回函数的方式，实现多次接收参数，最后统一处理的函数编码形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b,c</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b + c<br>&#125;<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a</span>) &#123; <br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">b</span>) =&gt;</span> &#123;  <span class="hljs-comment">// 函数调用 继续返回函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;  <span class="hljs-comment">// 多次接收参数</span><br>      <span class="hljs-keyword">return</span> a + b + c <span class="hljs-comment">// 最后统一处理</span><br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-title function_">sum</span>(a)(b)(c)<br></code></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  &#125;<br>  submit = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>()<br>    <span class="hljs-keyword">const</span> &#123; username, password &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> <br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`用户名<span class="hljs-subst">$&#123;username&#125;</span> 密码 <span class="hljs-subst">$&#123;password&#125;</span>`</span>)<br>  &#125;<br>  <span class="hljs-comment">// 柯里化函数</span><br>  saveFormData = <span class="hljs-function"><span class="hljs-params">dataType</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123; <span class="hljs-comment">// 函数调用 继续返回函数</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-comment">// 多次接收参数</span><br>        [dataType]: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>, <span class="hljs-comment">// 最后统一处理</span><br>      &#125;)<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.submit&#125;</span>&gt;</span></span><br><span class="language-xml">        username:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">username</span>&#x27;)&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        password:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">password</span>&#x27;)&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>事件<code>onXxx</code>绑定的函数之所以不加<code>()</code>，是因为函数需要<code>onXxx</code>去执行回调，加了<code>()</code>会立即执行，如果要加<code>()</code>，可以让绑定的函数返回一个函数给<code>onXxx</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 柯里化</span><br>saveFormData = <span class="hljs-function"><span class="hljs-params">dataType</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123; <span class="hljs-comment">// 函数调用 继续返回函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-comment">// 多次接收参数</span><br>      [dataType]: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>, <span class="hljs-comment">// 最后统一处理</span><br>    &#125;)<br>  &#125;<br>&#125;<br>......<br>&lt;input onChange=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveFormData</span>(<span class="hljs-string">&#x27;username&#x27;</span>)&#125; type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>此处的<code>this.saveFormData(&#39;username&#39;)</code>会立即执行，将返回的函数给<code>onChange</code>作为回调</p><p>此时<code>onChange</code>执行的是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">event =&gt; &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <br>    [dataType]: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总之，必须把一个函数给<code>onXxx</code>作为回调</strong></p><p>这种写法也可以<code>onChange=&#123;e =&gt; this.saveFormData(&#39;username&#39;, e)&#125;</code></p><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><ol><li>组件从创建到死亡它会经历一些特定的阶段。</li><li>React组件中包含一系列勾子函数(生命周期回调函数), 会在特定的时刻调用。</li><li>我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作。</li></ol><p>生命周期的三个阶段（旧）</p><ul><li>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染<ul><li><code>constructor()</code></li><li><code>componentWillMount()</code></li><li>*<code>render()</code></li><li>*<code>componentDidMount()</code> 做初始化，如网络请求、开启定时器</li></ul></li><li>更新阶段: 由组件内部<code>this.setSate()</code>或父组件重新<code>render</code>触发<ul><li><code>componentWillReceiveProps</code> 父组件第二次<code>render</code>从这触发</li><li><code>shouldComponentUpdate()</code> <code>this.setSate()</code>从这触发 返回一个布尔值，默认为true，为false时不执行下面的生命周期</li><li><code>componentWillUpdate()</code> <code>forceUpdate()</code>从这触发</li><li>*<code>render()</code></li><li><code>componentDidUpdate()</code></li></ul></li><li>卸载组件: 由<code>ReactDOM.unmountComponentAtNode()</code>触发<ul><li>*<code>componentWillUnmount()</code> 做收尾工作，如关闭定时器</li></ul></li></ul><p><strong><code>*</code>常用</strong></p><p>生命周期的三个阶段（新）</p><ul><li>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染<ul><li><code>constructor()</code></li><li><code>getDerivedStateFromProps</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ul></li><li>更新阶段: 由组件内部<code>this.setSate()</code>或父组件重新<code>render</code>触发<ul><li><code>getDerivedStateFromProps</code></li><li><code>shouldComponentUpdate()</code></li><li><code>render()</code></li><li><code>getSnapshotBeforeUpdate</code></li><li><code>componentDidUpdate()</code></li></ul></li><li>卸载组件: 由<code>ReactDOM.unmountComponentAtNode()</code>触发<ul><li><code>componentWillUnmount()</code></li></ul></li></ul><p>即将废弃的勾子</p><ol><li><code>componentWillMount</code></li><li><code>componentWillReceiveProps</code></li><li><code>componentWillUpdate</code></li></ol><p>现在使用会出现警告，下一个大版本需要加上<code>UNSAFE_</code>前缀才能使用，以后可能会被彻底废弃，不建议使用。</p><p><code>static getDerivedStateFromProps(props,state)</code>返回一个对象来更新state，如果返回<code>null</code>则不更新任何内容，这个声明周期比较少用，除非state的值在任何时候都取决于props，这时<strong>可以</strong>使用（不是必须使用，会导致代码冗余，组件难以维护）</p><p><code>getSnapshotBeforeUpdate()</code> 更新之前获取快照，能在发生改变之前从DOM中捕获一些信息，此声明周期的任何返回值都将会作为参数传递给<code>componentDidUpdate(preProps,preState,snapshotValue)</code>，应返回snapshot(快照)值或null，不常用(比上一个有点用)</p><p>一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.list</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    <span class="hljs-attribute">overflow</span>: auto;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">  state = &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">newArr</span>: [],</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> &#123; newArr &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> news = <span class="hljs-string">&#x27;新闻&#x27;</span> + (newArr.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">newArr</span>: [news, ...newArr],</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">scrollHeight</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">preProps, preState, height</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">scrollTop</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">scrollHeight</span> - height</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> (this.list = c)&#125;&gt;</span></span><br><span class="language-xml"><span class="language-javascript">        &#123;this.state.newArr.map((n, i) =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-javascript">          return (</span></span><br><span class="language-xml"><span class="language-javascript">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">              &#123;n&#125;</span></span><br><span class="language-xml"><span class="language-javascript">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">          )</span></span><br><span class="language-xml"><span class="language-javascript">        &#125;)&#125;</span></span><br><span class="language-xml"><span class="language-javascript">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-javascript">    )</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>无论新旧常用的三个生命周期没有发生变化</p><ol><li><code>render</code>：初始化渲染或更新渲染调用</li><li><code>componentDidMount</code>：开启监听, 发送ajax请求</li><li><code>componentWillUnmount</code>：做一些收尾工作, 如: 清理定时器</li></ol><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -g create-react-app<br></code></pre></td></tr></table></figure><p>index.js 中的<code>&lt;React.StrictMode&gt;&lt;/React.StrictMode&gt;</code></p><p>用于检查<code>&lt;App /&gt;</code>里面的内容是否合理，检查代码规范</p><p><code>reportWebVitals.js</code> 页面性能分析文件(需要web-vitals库的支持)</p><p><code>setupTests.js</code> 组件单元测试的文件(需要jest-dom库的支持)</p><h3 id="样式模块化"><a href="#样式模块化" class="headerlink" title="样式模块化"></a>样式模块化</h3><p>普通css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* index.css */</span><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般引入css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-comment">// 使用</span><br>className=<span class="hljs-string">&quot;box&quot;</span><br></code></pre></td></tr></table></figure><p>模块化引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.module.css&#x27;</span><br><br><span class="hljs-comment">// 使用</span><br>className=&#123; home.<span class="hljs-property">title</span> &#125;<br></code></pre></td></tr></table></figure><p>less sass 嵌套写法可以不用模块化，模块化主要是防止css被覆盖</p><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p>功能界面的组件化编码流程（通用）</p><ol><li>拆分组件: 拆分界面,抽取组件</li><li>实现静态组件: 使用组件实现静态页面效果</li><li>实现动态组件<ol><li>动态显示初始化数据</li><li>数据类型</li><li>数据名称</li><li>保存在哪个组件</li><li>交互(从绑定事件监听开始)</li></ol></li></ol><h2 id="React-Ajax"><a href="#React-Ajax" class="headerlink" title="React Ajax"></a>React Ajax</h2><p>react 代理跨域</p><p>方法一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json 前端3000 后端5000</span><br><span class="hljs-string">&quot;proxy&quot;</span>:<span class="hljs-string">&quot;http://localhost:5000&quot;</span><br></code></pre></td></tr></table></figure><p>优点：配置简单，前端请求资源时可以不加任何前缀<br>缺点：不能配置多个代理<br>原理：请求3000不存在的资源时，自动转发请求给5000</p><p>方法二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/setupProxy.js</span><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-title function_">proxy</span>(<span class="hljs-string">&#x27;/api&#x27;</span>,&#123; <span class="hljs-comment">// /api开头的请求 做代理 转发给target</span><br>      <span class="hljs-attr">target</span>:<span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>, <span class="hljs-comment">// 代理转发的目标</span><br>      <span class="hljs-attr">changeOrigin</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">// 控制服务器收到的请求头中Host字段的值</span><br>      <span class="hljs-attr">pathRewrite</span>:&#123;<span class="hljs-string">&#x27;^/api&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125; <span class="hljs-comment">// 重写请求路径（必须）</span><br>    &#125;)<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：可以配置多个代理，灵活控制请求是否走代理<br>缺点：配置繁琐，前端请求资源时必须加前缀</p><h2 id="消息订阅发布"><a href="#消息订阅发布" class="headerlink" title="消息订阅发布"></a>消息订阅发布</h2><p>工具库：<code>PubSubJS</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn add pubsub-js<br></code></pre></td></tr></table></figure><ol><li><code>import PubSub from &#39;pubsub-js&#39;</code> 引入</li><li><code>PubSub.subscribe(&quot;频道&quot;, (频道,消息)=&gt;&#123; &#125;);</code> 订阅</li><li><code>PubSub.publish(&quot;频道&quot;,&quot;消息&quot;)</code> 发布消息</li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>SPA 单页Web应用，整个应用只有一个完整的页面，点击页面中的链接不会刷新页面，只做局部更新，数据通过Ajax请求异步展现</p><h3 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h3><p>react的一个插件库，专门用来实现一个SPA应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn add react-router-dom<br></code></pre></td></tr></table></figure><p>内置组件</p><ol><li><code>&lt;BrowserRouter&gt;</code> h5路由 history Api</li><li><code>&lt;HashRouter&gt;</code> hash路由 </li><li><code>&lt;Route&gt;</code> 对应路径渲染的组件</li><li><code>&lt;Redirect&gt;</code> 重定向，一般写在<code>&lt;Route&gt;</code>最后，所有路由都没匹配到就重定向</li><li><code>&lt;Link&gt;</code> 相当于a标签</li><li><code>&lt;NavLink&gt;</code> 导航标签 可以设置active样式类</li><li><code>&lt;Switch&gt;</code> 单一匹配路由，提高效率</li></ol><p>其它</p><ol><li><code>history</code>对象</li><li><code>match</code>对象</li><li><code>withRouter</code>函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 跳转</span><br>&lt;<span class="hljs-title class_">Link</span> to=<span class="hljs-string">&quot;/home&quot;</span>&gt;<span class="hljs-title class_">Home</span>&lt;/<span class="hljs-title class_">Link</span>&gt;<br><br><span class="hljs-comment">// 路由链接切换组件 activeClassName:切换的样式类</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><br><span class="hljs-comment">// 注册路由 展示路由组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><br><span class="hljs-comment">// 单一匹配，只与第一个相符的匹配</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Index&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Test&#125;&#125;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>一般组件：<code>&lt;Demo /&gt;</code><br>路由组件：<code>&lt;Route path=&quot;/demo&quot; component=&#123;Demo&#125;&gt;</code></p><p>一般组件props接收组件标签上写的内容<br>路由组件props接收<code>history location match</code>三个路由相关的对象</p><p><code>&lt;Route&gt;</code> 默认模糊匹配 使用<code>exact</code>属性开启精准匹配</p><p>模糊匹配：<strong>输入路径</strong>必须包含<strong>匹配路径</strong>，且顺序要一致<br>精准匹配：必须完全一致才可以匹配（没问题不要随便开，可能会导致无法匹配二级路由）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Link</span> to=<span class="hljs-string">&quot;/home/a/b&quot;</span>&gt;<span class="hljs-title class_">Home</span>&lt;/<span class="hljs-title class_">Link</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>多级路径(<code>path=&quot;/demo/test&quot;</code>)页面刷新可能丢失样式，有三种方法解决</p><ol><li>index.html 中引入样式用 <code>/</code> 而不是 <code>&#39;./&#39;</code> (推荐)</li><li>index.html 中引入样式用 <code>%PUBLIC_URL%</code> 而不是 <code>&#39;./&#39;</code></li><li>使用<code>&lt;HashRouter&gt;</code></li></ol><p><code>&lt;Link&gt;</code>默认是push模式，浏览器会留下痕迹，可以回退，可以加上<code>replace</code>属性,这样没有回退</p><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 携带</span><br>&lt;<span class="hljs-title class_">Link</span> to=<span class="hljs-string">&quot;/demo/home/zs/18&quot;</span>&gt;home&lt;/<span class="hljs-title class_">Link</span>&gt;<br><span class="hljs-comment">// 声明接收</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/demo/home/:name/:age&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="hljs-comment">// 接收</span><br><span class="hljs-keyword">const</span> &#123; name,age &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">match</span>.<span class="hljs-property">params</span><br></code></pre></td></tr></table></figure><p>search参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 携带 地址栏上看得见</span><br>&lt;<span class="hljs-title class_">Link</span> to=<span class="hljs-string">&quot;/demo/home?name=zs&amp;age=18&quot;</span>&gt;home&lt;/<span class="hljs-title class_">Link</span>&gt;<br><span class="hljs-comment">// 无需声明接收，正常注册</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/demo/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="hljs-comment">// 接收 获取的是urlencoded字符串，需要用querystring解析</span><br><span class="hljs-keyword">const</span> &#123; search &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">location</span><br><br><span class="hljs-comment">// or</span><br><br><span class="hljs-comment">// 携带 地址栏上看不见</span><br>&lt;<span class="hljs-title class_">Link</span> to=&#123;&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/demo/home&#x27;</span>,<span class="hljs-attr">state</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;&#125;&#125;&gt;home&lt;/<span class="hljs-title class_">Link</span>&gt;<br><span class="hljs-comment">// 无需声明接收，正常注册</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/demo/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="hljs-comment">// 接收 获取的是urlencoded字符串，需要用querystring解析</span><br><span class="hljs-keyword">const</span> &#123; state &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">location</span><br><span class="hljs-comment">// 刷新也可保留参数</span><br></code></pre></td></tr></table></figure><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><p><code>this.props.history.push()</code><br><code>this.props.history.replace()</code><br><code>this.props.history.goBack()</code> 回退<br><code>this.props.history.goForward()</code> 前进<br><code>this.props.history.go(n)</code> n：正负数，代表前进或后退的步数</p><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p><code>withRouter</code> 是一个高阶组件</p><p>高阶组件：接收一个组件，返回一个新组件</p><p><code>withRouter()</code>接收一个一般组件，可以给这个一般组件加上路由组件的三个属性：<code>history location match</code></p><h3 id="BrowserRouter-amp-HashRouter"><a href="#BrowserRouter-amp-HashRouter" class="headerlink" title="BrowserRouter &amp; HashRouter"></a>BrowserRouter &amp; HashRouter</h3><ol><li>底层原理不一样：<ol><li>BrowserRouter使用的是H5的 history API,不兼容IE9及以下版本</li><li>HashRouter使用的是URL的哈希值</li></ol></li><li>url表现形式不一样<ol><li>BrowserRouter的路径中没有#，例如：localhost:3000/demo/test</li><li>HashRouter的路径包含#,例如：localhost:3000/#/demo/test</li></ol></li><li>刷新后对路由state参数的影响<ol><li>BrowserRouter没有任何影响，因为state保存在 history 对象中。</li><li>HashRouter制新后会导致路由state参数的丢失</li></ol></li><li>备注：HashRouter可以用于解决一些路径错误相关的问题</li></ol><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>redux是什么</p><ol><li>redux是一个专门用于做状态管理的JS库(不是react插件库)。</li><li>它可以用在react, angular, vue等项目中, 但基本与react配合使用。</li><li>作用: 集中式管理react应用中多个组件共享的状态。</li></ol><p>什么情况下需要使用redux</p><ol><li>某个组件的状态，需要让其他组件可以随时拿到（共享）。</li><li>一个组件需要改变另一个组件的状态（通信）。</li><li>总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</li></ol><h3 id="三个核心"><a href="#三个核心" class="headerlink" title="三个核心"></a>三个核心</h3><ul><li>action</li><li>reducer</li><li>store</li></ul><p><strong>action</strong></p><p>动作对象,包含2个属性：</p><ul><li>type：标识属性，字符串，唯一值，必选</li><li>data：数据属性，任意值，可选</li></ul><p><code>&#123; type:&#39;add_type&#39;, data:&#123;name: &#39;str&#39;, value:&#39;zs&#39;&#125; &#125;</code></p><p><strong>reducer</strong></p><ul><li>初始化状态，加工状态</li><li>加工时，依据旧的state和action产生新的state 纯函数</li></ul><p><strong>store</strong></p><ul><li>将state、action、reducer联系在一起的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers&#x27;</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer)<br></code></pre></td></tr></table></figure><ul><li>getState()：获取state</li><li>dispatch(action)：分发action，触发reducer自更新，产出新的state</li><li>subscribe(listener)：注册监听，产生新的state时，自动调用</li></ul><h3 id="redux异步"><a href="#redux异步" class="headerlink" title="redux异步"></a>redux异步</h3><p>redux默认不能进行异步处理，可以安装异步中间件来执行异步任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn add redux-thunk<br></code></pre></td></tr></table></figure><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><ol><li>一个react插件库</li><li>专门用来简化react应用中使用redux</li></ol><p>react-Redux将所有组件分成两大类</p><p>UI组件</p><ol><li>只负责 UI 的呈现，不带有任何业务逻辑</li><li>通过props接收数据(一般数据和函数)</li><li>不使用任何 Redux 的 API</li><li>一般保存在components文件夹下</li></ol><p>容器组件</p><ol><li>负责管理数据和业务逻辑，不负责UI的呈现</li><li>使用 Redux 的 API</li><li>一般保存在containers文件夹下</li></ol><p>API:</p><ol><li>Provider：让所有组件都可以得到state数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Provider</span> store=&#123;store&#125;&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Provider</span>&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>connect：用于包装 UI 组件生成容器组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="hljs-variable constant_">UI</span>组件)<br></code></pre></td></tr></table></figure><ol start="3"><li>mapStateToProps：将外部的数据（即state对象）转换为UI组件的标签属性</li><li>mapDispatchToProps：将分发action的函数转换为UI组件的标签属性</li></ol><p>也就是说都可以在UI组件的props中获取</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuex</title>
    <link href="/blog/2021/03/21/Vuex/"/>
    <url>/blog/2021/03/21/Vuex/</url>
    
    <content type="html"><![CDATA[<p><code>Vuex</code> 是Vue.js 所提供的状态管理工具，集中管理应用中的所有的组件的状态，任何组件都可单独与其通信。在大型的复杂项目中，一般的组件通信手段不太够用，而且会导致数据流向变得复杂，项目难以开发维护。</p><span id="more"></span><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>组件之间共享数据:</p><p>父向子: v-bind 属性绑定</p><p>子向父: v-on    事件绑定</p><p>兄弟之间共享数据: EventBus</p><ul><li>$on 接收数据的那个组件</li><li>$emit 发送数据的那个组件</li></ul><p>以上三种适合小范围的数据共享, 如果需要大范围或频繁地数据共享就需要<code>Vuex</code></p><p><code>Vuex</code>是实现组件全局状态(数据)管理的一种机制, 可以方便的实现组件之间的数据的共享</p><p>好处: </p><ol><li>能够在<code>Vuex</code>中集中管理共享的数据, 易于开发和后期维护</li><li>能够高效地实现组件之间的数据共享, 提高开发效率</li><li>存储在<code>Vuex</code>中的数据都是响应式的,能够实时保持数据与页面之间的同步</li></ol><p>组件之间共享的数据才有必要存储到<code>Vuex</code>中, 组件私有数据依旧存储到自身<code>data</code>中</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><code>Vuex</code>的核心是<code>store</code> <code>store</code> 是一个容器，包含着应用中的大部分<code>state</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">modules</span>: &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>State提供唯一的公共数据源, 所有的数据都要统一放到Store的State中进行存储</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 创建store数据源</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>组件访问State数据的第一种方式:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.全局数据名称<br></code></pre></td></tr></table></figure><p><strong>组件访问State数据的第二种方式:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从vuex中按需导入mapState函数</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>...<br><br><span class="hljs-comment">// 通过导入的mapState函数,将当前组件需要的全局数据,映射为当前组件的computed计算属性</span><br><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;全局数据名称&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>只能使用mutation更变store中的数据, 这样可以集中监控所有的数据的变化</p><p>不可以直接操作store更变数据</p><p><strong>不要在mutation中写异步代码</strong></p><p><strong>触发的第一种方法</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">count</span>++<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// 触发</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">hadnle</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;add&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可以传递参数:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义</span><br><span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">addN</span>(<span class="hljs-params">state, step</span>) &#123;<br>        state.<span class="hljs-property">count</span> += step<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 触发</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">handle</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addN&#x27;</span>, <span class="hljs-number">3</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>触发的第二种方法</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 按需导入mapMutations函数</span><br><span class="hljs-keyword">import</span> &#123; mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 通过mapMutations函数,映射为当前组件的methods函数</span><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutation</span>([<span class="hljs-string">&#x27;add&#x27;</span>,<span class="hljs-string">&#x27;addN&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action用于处理异步任务, 不能直接修改state中的数据</p><p>如果通过异步操作变更数据, 必须通过Action, 而不能使用Mutation, 但是在Action中还是要通过触发Mutation的方式间接更变数据</p><p><strong>触发的第一种方法</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    ...<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">count</span>++<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-title function_">addAsync</span>(<span class="hljs-params">context</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// 只有mutations能修改state中的数据,所以要触发Mutation</span><br>                context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;add&#x27;</span>)<br>            &#125;, <span class="hljs-number">1000</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// 触发</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">handle</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;addAsync&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可以传递参数:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    ...<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">addN</span>(<span class="hljs-params">state, step</span>) &#123;<br>            state.<span class="hljs-property">count</span> += step<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-title function_">addNAsync</span>(<span class="hljs-params">context, step</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addN&#x27;</span>, step)<br>            &#125;, <span class="hljs-number">1000</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// 触发</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">handle</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;addNAsync&#x27;</span>, <span class="hljs-number">2</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>触发的第二种方法</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;addAsync&#x27;</span>, <span class="hljs-string">&#x27;addNAsync&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种方法可以在事件中直接使用<code>Vuex</code>中的函数,不用再定义函数,因为将全局的函数映射成了自己的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button @click=<span class="hljs-string">&quot;sub&quot;</span>&gt;-<span class="hljs-number">1</span>&lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;subN(num)&quot;</span>&gt;</span>-N<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>...<br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-string">&#x27;subN&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>Getter用于对Store中的数据进行加工处理形成的新的数据</p><ul><li>Getter可以对Store中已有的数据加工处理形成的新的数据,类似Vue的计算属性</li><li>Store中的数据发生变化,Getter的数据也会跟着变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-attr">showNum</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;当前最新数据[&#x27;</span>+ state.<span class="hljs-property">count</span> + <span class="hljs-string">&#x27;]&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>使用的第一种方式:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 使用 &lt;h3&gt;&#123;&#123;$store.getters.名称&#125;&#125;&lt;/h3&gt;</span><br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.名称<br></code></pre></td></tr></table></figure><p><strong>使用的第二种方式:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用 &lt;h3&gt;&#123;&#123;名称&#125;&#125;&lt;/h3&gt;</span><br><br><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;名称&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>当应用变得非常复杂时，store 对象就有可能变得相当臃肿</p><p>可将store分割成模块(module)，每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">a</span>: moduleA,<br>    <span class="hljs-attr">b</span>: moduleB<br>  &#125;<br>&#125;)<br><br>$store.<span class="hljs-property">state</span>.<span class="hljs-property">a</span> <span class="hljs-comment">// -&gt; moduleA 的状态 提交方式不变</span><br>$store.<span class="hljs-property">state</span>.<span class="hljs-property">b</span> <span class="hljs-comment">// -&gt; moduleB 的状态 提交方式不变</span><br></code></pre></td></tr></table></figure><p>模块内部的mutation和getter接收的第一个参数是<strong>模块局部状态的对象</strong></p><p>action 参数为<code>(&#123;state,commit,rootState&#125;)</code> 根节点状态为<code>rootState</code></p><p>getter 参数为 <code>(state, getters, rootState)</code> 根节点状态为<code>rootState</code></p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>可以通过添加<code>namespaced: true</code>的方式使其成为带命名空间的模块，模块注册后，所有的getter、action、mutation都会自动根据模块注册的路径调整命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">account</span>: &#123;<br>      <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br><br>      <span class="hljs-comment">// 模块内容（module assets）</span><br>      <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;), <span class="hljs-comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span><br>      <span class="hljs-attr">getters</span>: &#123;<br>        isAdmin () &#123; ... &#125; <span class="hljs-comment">// -&gt; getters[&#x27;account/isAdmin&#x27;]</span><br>      &#125;,<br>      <span class="hljs-attr">actions</span>: &#123;<br>        login () &#123; ... &#125; <span class="hljs-comment">// -&gt; dispatch(&#x27;account/login&#x27;)</span><br>      &#125;,<br>      <span class="hljs-attr">mutations</span>: &#123;<br>        login () &#123; ... &#125; <span class="hljs-comment">// -&gt; commit(&#x27;account/login&#x27;)</span><br>      &#125;,<br><br>      <span class="hljs-comment">// 嵌套模块</span><br>      <span class="hljs-attr">modules</span>: &#123;<br>        <span class="hljs-comment">// 继承父模块的命名空间</span><br>        <span class="hljs-attr">myPage</span>: &#123;<br>          <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>          <span class="hljs-attr">getters</span>: &#123;<br>            profile () &#123; ... &#125; <span class="hljs-comment">// -&gt; getters[&#x27;account/profile&#x27;]</span><br>          &#125;<br>        &#125;,<br><br>        <span class="hljs-comment">// 进一步嵌套命名空间</span><br>        <span class="hljs-attr">posts</span>: &#123;<br>          <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br><br>          <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>          <span class="hljs-attr">getters</span>: &#123;<br>            popular () &#123; ... &#125; <span class="hljs-comment">// -&gt; getters[&#x27;account/posts/popular&#x27;]</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vuex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js原生拖拽</title>
    <link href="/blog/2021/03/21/js%E5%8E%9F%E7%94%9F%E6%8B%96%E6%8B%BD/"/>
    <url>/blog/2021/03/21/js%E5%8E%9F%E7%94%9F%E6%8B%96%E6%8B%BD/</url>
    
    <content type="html"><![CDATA[<p>最近面试遇到了两次问拖拽功能的,一直以为是jQuery实现的,现在发现原生也可以,在此记录一下</p><span id="more"></span><h1 id="Drag-amp-Drop"><a href="#Drag-amp-Drop" class="headerlink" title="Drag &amp; Drop"></a>Drag &amp; Drop</h1><p><code>Drag</code>和<code>drop</code>是<code>HTML5</code>新增的，任何元素都可以拖放。ie8及以下不支持该功能</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    可以拖拽<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过给html标签添加<code>draggable</code>属性规定元素是否可以拖动</p><blockquote><p>链接和图像默认可拖动</p></blockquote><p>属性值：</p><ul><li>true 可以拖动</li><li>false 不可以拖动</li><li>auto 使用浏览器默认特性</li></ul><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: darksalmon;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.draggable</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;http://source.unsplash.com/random/150x150&#x27;</span>);</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.droppable</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> salmon solid;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: white;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.dragging</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> yellow solid;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.drag-over</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f4f4f4</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-style</span>: dashed;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.invisible</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;droppable&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;draggable&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;droppable&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;droppable&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;droppable&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;droppable&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 获取节点</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> draggable = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.draggable&#x27;</span>)</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> droppables = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.droppable&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 监听事件</span></span><br><span class="language-javascript">      draggable.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragstart&#x27;</span>, dragStart)</span><br><span class="language-javascript">      draggable.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragend&#x27;</span>, dragEnd)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragStart</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> += <span class="hljs-string">&#x27; dragging&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;invisible&#x27;</span></span><br><span class="language-javascript">        &#125;, <span class="hljs-number">0</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragEnd</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27; draggable&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragOver</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 监听droppable事件</span></span><br><span class="language-javascript">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> droppable <span class="hljs-keyword">of</span> droppables) &#123;</span><br><span class="language-javascript">        droppable.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragover&#x27;</span>, dragOver)</span><br><span class="language-javascript">        droppable.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragleave&#x27;</span>, dragLeave)</span><br><span class="language-javascript">        droppable.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragenter&#x27;</span>, dragEnter)</span><br><span class="language-javascript">        droppable.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;drop&#x27;</span>, dragDrop)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragOver</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragEnter</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> += <span class="hljs-string">&#x27; drag-over&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragLeave</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;droppable&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragDrop</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;droppable&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 追加节点  </span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">append</span>(draggable)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>其中<code>e.preventDefault()</code>是用来取消默认行为的，<code>drop</code>事件的默认行为是以链接的形式打开</p><p>拖拽事件：</p><ul><li>在拖动目标上触发事件:<ul><li>ondragstart - 用户开始拖动元素时触发</li><li>ondrag - 元素正在拖动时触发</li><li>ondragend- 用户完成元素拖动后触发</li></ul></li><li>释放目标时触发的事件:<ul><li>ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件</li><li>ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件</li><li>ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件</li><li>ondrop - 在一个拖动过程中，释放鼠标键时触发此事件</li></ul></li></ul><blockquote><p>拖动元素时，每350ms触发一次ondrag事件</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typescript</title>
    <link href="/blog/2021/03/07/Typescript/"/>
    <url>/blog/2021/03/07/Typescript/</url>
    
    <content type="html"><![CDATA[<p>Typescript 的学习笔记</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>全局安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i -g typescript<br></code></pre></td></tr></table></figure><p>typescript 文件后缀为 <code>.ts</code> 通过命令 <code>tsc 文件名.ts</code>将 ts 文件编译为 js 文件 <code>文件名.js</code></p><h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><p>变量名称只能出现: 数字, 字母, 下划线, $符号,不能以数字开头,且区分大小写, 推荐驼峰命名法</p><h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><p><strong>布尔值</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">bol</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>数值</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>数字类型包含正数,负数,整数,小数</p><p><strong>字符串</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;tp&#x27;</span><br></code></pre></td></tr></table></figure><p>字符串类型可以为空 <code>&#39;&#39;</code>, 可用 <code>&#39;&#39;</code>,<code>&quot;&quot;</code> 推荐单引号</p><p><strong>空值</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-number">123</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>用来表示没有任何返回值的函数</p><p>声明一个 <code>void</code>类型的变量没有用，只能赋值 <code>undefined</code>和 <code>null</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">un</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p><strong>null 和 undefined</strong></p><p>都只有一个值,就是类型本身</p><p><code>undefined</code>表示声明但未赋值的变量值(找不到值)<br><code>null</code>表面声明并赋值的变量(值为 null)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>和 <code>void</code>的区别是,<code>undefined</code>和 <code>null</code>是所有类型的子类型, 也就是说 <code>undefined</code>类型的变量可以赋值给 <code>number</code>类型的变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = <span class="hljs-literal">undefined</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = u<br></code></pre></td></tr></table></figure><p>而 <code>void</code>类型的变量不能赋值给 <code>number,string,boolean</code>类型的变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-built_in">void</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = u<br><span class="hljs-comment">// 会报错</span><br></code></pre></td></tr></table></figure><h2 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h2><p>普通类型在赋值过程中不允许改变类型</p><p>如果是 <code>any</code>类型,则允许被赋值为任意类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;seven&#x27;</span><br>num = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>在任意值上访问任何属性都是允许的,也允许调用任何方法<br>声明一个变量为任意值后,对它的任何操作返回的内容类型都是任意值<br>如果变量在声明的时候,未指定类型,那么它将被识别为任意值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> something<br>something = <span class="hljs-string">&#x27;111&#x27;</span><br>something = <span class="hljs-number">222</span><br></code></pre></td></tr></table></figure><h2 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h2><p>如果没有明确指定类型,那么 typescript 会按照类型推论规则推断出一个类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> num = <span class="hljs-string">&#x27;233&#x27;</span><br>num = <span class="hljs-number">123</span><br><span class="hljs-comment">// 会报错</span><br></code></pre></td></tr></table></figure><p>实际上等价于:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;233&#x27;</span><br>num = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>如果定义的时候没有赋值,不管以后有没有赋值,都会被推断为 <code>any</code>类型从而完全不被类型检查</p><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span><br>num = <span class="hljs-string">&#x27;qwe&#x27;</span><br>num = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>允许 <code>num</code>的类型是 <code>string</code>或 <code>number</code>,但不能是其他类型</p><p>当不确定变量到底是哪个类型的时候,我们只能访问联合类型的所有类型里共有的属性和方法</p><p>联合类型的变量在被赋值的时候,会根据类型推论推断出一个类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span><br>num = <span class="hljs-string">&#x27;seven&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-property">length</span>)<br>num = <span class="hljs-number">7</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-property">length</span>) <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>第二行推断为 <code>string</code>有 length 属性<br>第四行推断为 <code>number</code>没有 length 属性,所以报错</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>ts 中用接口来定义对象的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">IPerson</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>变量和接口必须一一对应,多个属性少个属性都不行,会报错</p><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>当不希望完全匹配时:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  age?: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">IPerson</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">IPerson</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>age</code> 可有可无,但是仍然不允许添加未定义的属性</p><h3 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h3><p>当希望接口允许任意属性时:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  age?: <span class="hljs-built_in">number</span><br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">IPerson</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>[propName: string]</code>定义了任意属性取 <code>string</code>类型的值,但是<br><strong>一旦定义了任意属性,那么确定属性和可选属性的类型都必须是它的类型的子集</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  age?: <span class="hljs-built_in">number</span><br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">Person</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>&#125;<br><span class="hljs-comment">// 报错,因为任意属性的值允许 string 而可选属性的值却是 number,不是string的子属性</span><br></code></pre></td></tr></table></figure><p>一个接口中只能定义一个任意属性, 如果接口中有多个类型的属性,则可以在任意属性中使用联合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  age?: <span class="hljs-built_in">number</span><br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">IPerson</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>有时候希望对象中的一些字段只能在创建的时候被赋值, 那么可以用 <code>readonly</code>定义只读属性:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  age?: <span class="hljs-built_in">number</span><br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">IPerson</span> = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">123</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>&#125;<br><br>tom.<span class="hljs-property">id</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// 报错, 因为id是只读属性</span><br></code></pre></td></tr></table></figure><p><strong>只读的约束存在于第一次给对象赋值的时候,而不是第一次给只读属性赋值的时候</strong></p><h2 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h2><p>使用 <code>类型[]</code>的方式表示数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>数组的项中不允许出现其他类型,数组的一些方法的参数也会受到限制:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;4&#x27;</span>) <span class="hljs-comment">// 报错 只允许`number`类型,却传了个`string`类型</span><br></code></pre></td></tr></table></figure><p>也可以使用数组的泛型表示数组:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">NumberArray</span> &#123;<br>  [<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-title class_">NumberArray</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p><code>NumberArray</code>表示: 索引的类型是数字时,那么值的类型必须是数字, 这种方式太繁琐, 常用来表示 <code>类数组</code></p><h3 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h3><p>类数组不是数组类型,比如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">args</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-variable language_">arguments</span><br>&#125;<br></code></pre></td></tr></table></figure><p>类数组不能用普通的数组方式来描述,应用接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">args</span>: &#123;<br>    [<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">number</span><br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span><br>    <span class="hljs-attr">callee</span>: <span class="hljs-title class_">Function</span><br>  &#125; = <span class="hljs-variable language_">arguments</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子中, 约束了索引的类型是 <code>number</code>值的类型是 <code>number</code>也约束了 <code>length</code>和 <code>callee</code>两个属性</p><h2 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br></code></pre></td></tr></table></figure><p>输入的参数或多或少是不被允许的</p><p>sum(1,2,3)<br>sum(1,2)</p><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> mySum = <span class="hljs-keyword">function</span> (<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码只对等号右侧的匿名函数进行了类型定义,而等号左边的 <code>mySum</code>是通过赋值操作进行类型推论得来的类型<br>手动给 <code>msSum</code>添加类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">mySum</span>: <span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) =&gt;</span><span class="hljs-keyword">function</span> (<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y<br>&#125;<br></code></pre></td></tr></table></figure><p>typescript 中的 <code>=&gt;</code>和 ES6 中的 <code>=&gt;</code>不一样<br>ts 中的 <code>=&gt;</code>用来表示函数的定义,左边是输入类型,要用括号括起来,右边是输出类型<br>ES6 中的是箭头函数</p><h3 id="接口定义函数的形状"><a href="#接口定义函数的形状" class="headerlink" title="接口定义函数的形状"></a>接口定义函数的形状</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Func</span> &#123;<br>  (<span class="hljs-attr">source</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">subString</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myFunc</span>: <span class="hljs-title class_">Func</span><br>myFunc = <span class="hljs-keyword">function</span> (<span class="hljs-params">source: <span class="hljs-built_in">string</span>, subString: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> source.<span class="hljs-title function_">search</span>(subString) !== -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>采用函数表达式 | 接口定义函数的方式时,对等号左侧进行类型限制,可以保证以后对函数名赋值时参数个数,类型,返回值类型不变</p><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>与接口中的可选属性类似, 用 <code>?</code>表示可选参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName?: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (lastName) &#123;<br>    <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27;&#x27;</span> + lastName<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> firstName<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> tomcat = <span class="hljs-title function_">name</span>(<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>)<br><span class="hljs-keyword">let</span> tom = <span class="hljs-title function_">name</span>(<span class="hljs-string">&#x27;ton&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>可选参数必须在必需参数后面,可选参数后面不能出现必需参数</strong></p><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>ts 会将添加量默认值的参数识别为可选参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildName</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;Cat&#x27;</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27;&#x27;</span> + lastName<br>&#125;<br><span class="hljs-keyword">let</span> tomcat = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>) <span class="hljs-comment">// tomcat</span><br><span class="hljs-keyword">let</span> tom = <span class="hljs-title function_">buildName</span>(<span class="hljs-string">&#x27;ton&#x27;</span>) <span class="hljs-comment">// tonCat</span><br></code></pre></td></tr></table></figure><p>有了默认参数就不受[可选参数必须在必须参数后面]的限制了</p><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>es6 中,可以用 <code>...rest</code>的方式获取函数中的剩余参数(rest 参数)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">array, ...items</span>) &#123;<br>  items.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>    array.<span class="hljs-title function_">push</span>(item)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">any</span>[] = []<br><span class="hljs-title function_">push</span>(a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// [1,2,3]</span><br></code></pre></td></tr></table></figure><p><code>items</code>是个数组,所以可以用数组的类型来定义</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">array: <span class="hljs-built_in">any</span>[], ...items: <span class="hljs-built_in">any</span>[]</span>) &#123;<br>  items.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>    array.<span class="hljs-title function_">push</span>(item)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">let</span> a = []<br><span class="hljs-title function_">push</span>(a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>rest 参数只能是最后一个参数</p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>重载允许一个函数接受不同数量或类型的参数时,做出不同的处理</p><p>翻转数字或字符串:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Number</span>(x.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用重载定义多个 <code>reverse</code>函数类型</p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>**可以用来手动指定一个值的类型</p><p>语法:</p><p><code>值 as 类型</code> 或者 <code>&lt;类型&gt;值</code><br>在 tsx 语法(React 里 jsx 语法的 ts 版)中必须用 <code>值 as 类型</code>,所以建议统一使用这种</p><p>用途:</p><h3 id="将一个联合类型断言为其中一个类型"><a href="#将一个联合类型断言为其中一个类型" class="headerlink" title="将一个联合类型断言为其中一个类型"></a>将一个联合类型断言为其中一个类型</h3><p>在不确定联合类型的变量到底是哪个类型的时候,我们只能访问联合类型所有类型中共有的属性和方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fish</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">swim</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params">animal: Cat | Fish</span>) &#123;<br>  <span class="hljs-keyword">return</span> animal.<span class="hljs-property">name</span> <span class="hljs-comment">// 只能访问共有属性name</span><br>&#125;<br></code></pre></td></tr></table></figure><p>有时候需要在不确定类型的时候就访问其中一个类型特有的属性或方法,此时可以使用类型断言</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fish</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">swim</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isFish</span>(<span class="hljs-params">animal: Cat | Fish</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (animal <span class="hljs-keyword">as</span> <span class="hljs-title class_">Fish</span>).<span class="hljs-property">swim</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>断言会欺骗 ts 编译器,无法避免运行错误, 不要滥用断言</p><h3 id="将一个父类断言为更具体的子类"><a href="#将一个父类断言为更具体的子类" class="headerlink" title="将一个父类断言为更具体的子类"></a>将一个父类断言为更具体的子类</h3><p>当类之间有继承关系时,类型断言:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Error</span> &#123;<br>  <span class="hljs-attr">code</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Error</span> &#123;<br>  <span class="hljs-attr">statusCode</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">200</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isApiError</span>(<span class="hljs-params">error: <span class="hljs-built_in">Error</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (error <span class="hljs-keyword">as</span> <span class="hljs-title class_">ApiError</span>).<span class="hljs-property">code</span> === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因为父类 <code>Error</code>中没有 code 属性,直接获取 <code>error.code</code>会报错,所以需要断言</p><h3 id="将任何一个类型断言为-any"><a href="#将任何一个类型断言为-any" class="headerlink" title="将任何一个类型断言为 any"></a>将任何一个类型断言为 any</h3><p>当引用一个不存在的属性或方法时会报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">foo</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br>foo.<span class="hljs-property">length</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>但是有时候我们非常确定代码不会报错:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-variable language_">window</span>.<span class="hljs-property">foo</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>我们需要将 window 上添加一个属性 foo, 但是 ts 编译时会报错,此时可用 <code>as any</code>window 断言为 <code>any</code>类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">;(<span class="hljs-variable language_">window</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).<span class="hljs-property">foo</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>在 <code>any</code>类型上的变量,访问任何属性都是允许的</p><p><strong>将变量断言为 <code>any</code>可以说是解决 ts 类型问题的最后一个手段</strong><br>它极有可能掩盖了真正的类型错误,如果不是非常确定,不要使用 <code>as any</code></p><h3 id="将-any断言为一个具体的类型"><a href="#将-any断言为一个具体的类型" class="headerlink" title="将 any断言为一个具体的类型"></a>将 <code>any</code>断言为一个具体的类型</h3><p>日常开发难免会遇到需要处理的 <code>any</code>类型变量,我们可以改进它,某个代码中的返回值是 <code>any</code><br>那么我们将调用它之后的返回值断言成一个精确的类型,方便后续操作</p><h3 id="类型断言的限制"><a href="#类型断言的限制" class="headerlink" title="类型断言的限制"></a>类型断言的限制</h3><p>从上面的例子中，我们可以总结出：</p><ul><li>联合类型可以被断言为其中一个类型</li><li>父类可以被断言为子类</li><li>任何类型都可以被断言为 <code>any</code></li><li><code>any</code> 可以被断言为任何类型</li><li>要使得 A 能够被断言为 B，只需要 A 兼容 B 或 B 兼容 A 即可</li></ul><h3 id="双重断言"><a href="#双重断言" class="headerlink" title="双重断言"></a>双重断言</h3><ul><li>任何类型都可以被断言为 <code>any</code></li><li><code>any</code>可以被断言为任何类型</li></ul><p>可以用双重断言 <code>as any as Foo</code>来将任何一个类型断言为任何另一个类型<br>但是十有八九会报错,除非迫不得已,否则不要用双重断言</p><h3 id="类型断言-类型转换"><a href="#类型断言-类型转换" class="headerlink" title="类型断言 类型转换"></a>类型断言 类型转换</h3><p>类型断言只会影响 ts 编译时的类型,断言语句会在编译结果中删除</p><p>所以类型断言不是类型转换,不会真正影响到变量的类型,如果要类型转换,就直接调用类型转换的方法</p><h3 id="类型断言-类型声明"><a href="#类型断言-类型声明" class="headerlink" title="类型断言 类型声明"></a>类型断言 类型声明</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCacheData</span>(<span class="hljs-params">key: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">any</span> &#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">window</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).<span class="hljs-property">cache</span>[key]<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">const</span> tom = <span class="hljs-title function_">getCacheData</span>(<span class="hljs-string">&#x27;tom&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Cat</span><br>tom.<span class="hljs-title function_">run</span>()<br></code></pre></td></tr></table></figure><p>使用 <code>as Cat</code>将 <code>any</code>类型断言为 <code>Cat</code>类型, 还可以通过声明的方式,将 <code>tom</code>声明为 <code>Cat</code>,<br>然后将 <code>any</code>类型的 <code>getCacheDate(&#39;tom&#39;)</code> 赋值给 <code>Cat</code>类型的 <code>tom</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCacheData</span>(<span class="hljs-params">key: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">any</span> &#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">window</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).<span class="hljs-property">cache</span>[key]<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">Cat</span> = <span class="hljs-title function_">getCacheData</span>(<span class="hljs-string">&#x27;tom&#x27;</span>)<br>tom.<span class="hljs-title function_">run</span>()<br></code></pre></td></tr></table></figure><h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><p>当使用第三方库的时候,我们需要引用它的声明文件才能获得对应的代码补全,接口提示等功能</p><h3 id="声明语句"><a href="#声明语句" class="headerlink" title="声明语句"></a>声明语句</h3><p>当我们使用第三方库 jQuery 时,ts 并不知道 <code>$</code>或 <code>jQuery</code>是什么,这时就需要用 <code>declare var</code>来定义类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> <span class="hljs-attr">jQuery</span>: <span class="hljs-function">(<span class="hljs-params">selector: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">any</span><br><span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#foo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上例中,只是定义了全局变量 <code>jQuery</code>的类型,仅仅用于编译时的检查,在编译结果中会删除,编译后:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#foo&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="声明文件-1"><a href="#声明文件-1" class="headerlink" title="声明文件"></a>声明文件</h3><p>全局变量声明文件:</p><p>通常会把声明语句放到单独的一个文件(jQuery.d.ts)里</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// src/jQuery.d.ts</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> <span class="hljs-attr">jQuery</span>: <span class="hljs-function">(<span class="hljs-params">selector: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">any</span><br><br><span class="hljs-comment">// src/index.ts</span><br><br><span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#foo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>声明文件必须以 <code>.d.ts</code>为后缀, ts 会解析项目中所有的 <code>*.ts</code>文件, 也包括 <code>.d.ts</code>后缀的文件,<br>将 <code>jQuery.d.ts</code>放进项目中, 其他所有 <code>*.ts</code>文件都可以获取 <code>jQuery</code>的类型定义</p><p>假如仍然无法解析,那么可以检查下 <code>tsconfig.json</code> 中的 <code>files</code>、<code>include</code> 和 <code>exclude</code> 配置,确保其包含了 <code>jQuery.d.ts</code> 文件。</p><h3 id="第三方声明文件"><a href="#第三方声明文件" class="headerlink" title="第三方声明文件"></a>第三方声明文件</h3><p>使用 <code>@types</code>统一管理第三方库的声明文件,以 jQuery 为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i @types/jquery --save-dev<br></code></pre></td></tr></table></figure><p>可在<a href="https://microsoft.github.io/TypeSearch/">这里</a>搜索需要的声明文件</p><h3 id="书写声明文件"><a href="#书写声明文件" class="headerlink" title="书写声明文件"></a>书写声明文件</h3><p>当第三方库中没有提供声明文件时, 需要自己书写声明文件,不同场景下,声明文件的内容和使用方式会有所区别</p><p>库的使用场景主要有:</p><ul><li>全局变量：通过 <code>&lt;script&gt;</code> 标签引入第三方库，注入全局变量</li><li>npm 包：通过 <code>import foo from &#39;foo&#39;</code> 导入，符合 ES6 模块规范</li><li>UMD 库：既可以通过 <code>&lt;script&gt;</code> 标签引入，又可以通过 <code>import</code> 导入</li><li>直接扩展全局变量：通过 <code>&lt;script&gt;</code> 标签引入后，改变一个全局变量的结构</li><li>在 npm 包或 UMD 库中扩展全局变量：引用 npm 包或 UMD 库后，改变一个全局变量的结构</li><li>模块插件：通过 <code>&lt;script&gt;</code> 或 <code>import</code> 导入后，改变另一个模块的结构</li></ul><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>js 中有很多内置对象, 可以直接在 ts 中当做定义好了的类型</p><h3 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h3><p>如: <code>Boolean</code> <code>Error</code> <code>Date</code> <code>RegExp</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: <span class="hljs-title class_">Boolean</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">let</span> <span class="hljs-attr">e</span>: <span class="hljs-title class_">Error</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Error occurred&#x27;</span>)<br><span class="hljs-keyword">let</span> <span class="hljs-attr">d</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-keyword">let</span> <span class="hljs-attr">r</span>: <span class="hljs-title class_">RegExp</span> = <span class="hljs-regexp">/[a-z]/</span><br></code></pre></td></tr></table></figure><h3 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h3><p>如: <code>Document</code> <code>HTMLElement</code> <code>Event</code> <code>NodeList</code></p><p>ts 中常用类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">body</span>: <span class="hljs-title class_">HTMLElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">allDiv</span>: <span class="hljs-title class_">NodeList</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e: MouseEvent</span>) &#123;<br>  <span class="hljs-comment">// do something</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="ts-核心库的定义文件"><a href="#ts-核心库的定义文件" class="headerlink" title="ts 核心库的定义文件"></a>ts 核心库的定义文件</h3><p>TypeScript 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</p><p>当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>上面的例子中，Math.pow 必须接受两个 number 类型的参数。事实上 Math.pow 的类型定义如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Math</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns the value of a base expression taken to a specified power.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> x The base value of the expression.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> y The exponent value of the expression.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">pow</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用-ts-写-Node-js"><a href="#用-ts-写-Node-js" class="headerlink" title="用 ts 写 Node.js"></a>用 ts 写 Node.js</h3><p>Node.js 不是内置对象,如果要用 ts 写 Node.js,需要引入第三方声明文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @types/node --save-dev<br></code></pre></td></tr></table></figure><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>给类型起个新名字</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Name</span> = <span class="hljs-built_in">string</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">NameResolver</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">string</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">NameOrResolver</span> = <span class="hljs-title class_">Name</span> | <span class="hljs-title class_">NameResolver</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params">n: NameOrResolver</span>): <span class="hljs-title class_">Name</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> n === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> n<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">n</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上例中，我们使用 <code>type</code> 创建类型别名。</p><p>类型别名常用于联合类型。</p><h2 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h2><p>用来约束取值只能取某几个字符串中的一个</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">EventNames</span> = <span class="hljs-string">&#x27;click&#x27;</span> | <span class="hljs-string">&#x27;scroll&#x27;</span> | <span class="hljs-string">&#x27;mousemove&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleEvent</span>(<span class="hljs-params">ele: Element, event: EventNames</span>) &#123;<br>  <span class="hljs-comment">// do something</span><br>&#125;<br><br><span class="hljs-title function_">handleEvent</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;hello&#x27;</span>), <span class="hljs-string">&#x27;scroll&#x27;</span>)<br><span class="hljs-title function_">handleEvent</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;world&#x27;</span>), <span class="hljs-string">&#x27;dblclick&#x27;</span>) <span class="hljs-comment">// 报错,event不能只能是定义的三个中的某一个</span><br></code></pre></td></tr></table></figure><p>上例中，我们使用 <code>type</code> 定了一个字符串字面量类型 <code>EventNames</code>,它只能取三种字符串中的一种。</p><p><strong>注意，类型别名与字符串字面量类型都是使用 <code>type</code> 进行定义</strong></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>数组合并了相同类型的对象, 而元组合并了不同类型的对象</p><p>定义一对值分别为 <code>string</code>和 <code>number</code>的元组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&#x27;ton&#x27;</span>, <span class="hljs-number">22</span>]<br></code></pre></td></tr></table></figure><p>当赋值或访问一个已知索引的元素时, 会得到正确的类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>]<br>tom[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;tom&#x27;</span><br>tom[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br><br>tom[<span class="hljs-number">0</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>tom[<span class="hljs-number">1</span>].<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>也可以只赋值其中一项,但是当直接对元组类型的变量进行初始化或者赋值的时候,需要提供所有元组类型中指定的项</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>]<br>tom = [<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-number">22</span>]<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>]<br>tom = [<span class="hljs-string">&#x27;tom&#x27;</span>] <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h3 id="越界的元素"><a href="#越界的元素" class="headerlink" title="越界的元素"></a>越界的元素</h3><p>当添加越界的元素时, 它的类型会被限制为元组中每个类型的联合类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>]<br>tom = [<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-number">25</span>]<br>tom.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;male&#x27;</span>)<br>tom.<span class="hljs-title function_">push</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举类型用于取值被限定在一定范围内的场景,比如一周只能有 7 天<br>枚举使用 <code>enum</code>关键字来定义</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Days</span> (<span class="hljs-title class_">Sun</span>, <span class="hljs-title class_">Mon</span>, <span class="hljs-title class_">Tue</span>, <span class="hljs-title class_">Wed</span>, <span class="hljs-title class_">Thu</span>, <span class="hljs-title class_">Fri</span>, <span class="hljs-title class_">Sat</span>)<br></code></pre></td></tr></table></figure><p>枚举成员会被赋值为从 0 开始递增的数字, 同时也会对枚举值到枚举名进行反向映射:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Days</span> &#123;<br>  <span class="hljs-title class_">Sun</span>,<br>  <span class="hljs-title class_">Mon</span>,<br>  <span class="hljs-title class_">Tue</span>,<br>  <span class="hljs-title class_">Wed</span>,<br>  <span class="hljs-title class_">Thu</span>,<br>  <span class="hljs-title class_">Fri</span>,<br>  <span class="hljs-title class_">Sat</span>,<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Sun&#x27;</span>] === <span class="hljs-number">0</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Mon&#x27;</span>] === <span class="hljs-number">1</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Tue&#x27;</span>] === <span class="hljs-number">2</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Sat&#x27;</span>] === <span class="hljs-number">6</span>) <span class="hljs-comment">// true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;Sun&#x27;</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;Mon&#x27;</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-number">2</span>] === <span class="hljs-string">&#x27;Tue&#x27;</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-number">6</span>] === <span class="hljs-string">&#x27;Sat&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="手动赋值"><a href="#手动赋值" class="headerlink" title="手动赋值"></a>手动赋值</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Days</span> &#123;<br>  <span class="hljs-title class_">Sun</span> = <span class="hljs-number">7</span>,<br>  <span class="hljs-title class_">Mon</span> = <span class="hljs-number">1</span>,<br>  <span class="hljs-title class_">Tue</span>,<br>  <span class="hljs-title class_">Wed</span>,<br>  <span class="hljs-title class_">Thu</span>,<br>  <span class="hljs-title class_">Fri</span>,<br>  <span class="hljs-title class_">Sat</span>,<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Sun&#x27;</span>] === <span class="hljs-number">7</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Mon&#x27;</span>] === <span class="hljs-number">1</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Tue&#x27;</span>] === <span class="hljs-number">2</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Sat&#x27;</span>] === <span class="hljs-number">6</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>未手动赋值的枚举项会接着上一个枚举项递增</p><p>如果未手动赋值的与手动赋值的重复了,ts 是察觉不到的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Days</span> &#123;<br>  <span class="hljs-title class_">Sun</span> = <span class="hljs-number">3</span>,<br>  <span class="hljs-title class_">Mon</span> = <span class="hljs-number">1</span>,<br>  <span class="hljs-title class_">Tue</span>,<br>  <span class="hljs-title class_">Wed</span>,<br>  <span class="hljs-title class_">Thu</span>,<br>  <span class="hljs-title class_">Fri</span>,<br>  <span class="hljs-title class_">Sat</span>,<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Sun&#x27;</span>] === <span class="hljs-number">3</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Wed&#x27;</span>] === <span class="hljs-number">3</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-number">3</span>] === <span class="hljs-string">&#x27;Sun&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-number">3</span>] === <span class="hljs-string">&#x27;Wed&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><code>Days[3]</code> 先是 Sun 后来又被 Wed 覆盖了,所以使用的时候最好不要出现这种情况</p><p>手动赋值的枚举项可以不是数字, 此时需要使用类型断言让 ts 无视类型检查(编译后 js 可用)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Days</span> &#123;<br>  <span class="hljs-title class_">Sun</span> = <span class="hljs-number">7</span>,<br>  <span class="hljs-title class_">Mon</span>,<br>  <span class="hljs-title class_">Tue</span>,<br>  <span class="hljs-title class_">Wed</span>,<br>  <span class="hljs-title class_">Thu</span>,<br>  <span class="hljs-title class_">Fri</span>,<br>  <span class="hljs-title class_">Sat</span> = &lt;<span class="hljs-built_in">any</span>&gt;<span class="hljs-string">&#x27;S&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>手动赋值可以是小数或负数,后续的未手动赋值的项递增步长依旧为 <code>1</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Days</span> &#123;<br>  <span class="hljs-title class_">Sun</span> = <span class="hljs-number">7</span>,<br>  <span class="hljs-title class_">Mon</span> = <span class="hljs-number">1.5</span>,<br>  <span class="hljs-title class_">Tue</span>,<br>  <span class="hljs-title class_">Wed</span>,<br>  <span class="hljs-title class_">Thu</span>,<br>  <span class="hljs-title class_">Fri</span>,<br>  <span class="hljs-title class_">Sat</span>,<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Sun&#x27;</span>] === <span class="hljs-number">7</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Mon&#x27;</span>] === <span class="hljs-number">1.5</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Tue&#x27;</span>] === <span class="hljs-number">2.5</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Days</span>[<span class="hljs-string">&#x27;Sat&#x27;</span>] === <span class="hljs-number">6.5</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="常数项和计算所得项"><a href="#常数项和计算所得项" class="headerlink" title="常数项和计算所得项"></a>常数项和计算所得项</h2><p>枚举项有两种类型: 常数项, 计算所得项</p><p>上面的例子都是常数项,计算所得项:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>  red,<br>  green,<br>  blue = <span class="hljs-string">&#x27;blue&#x27;</span>.<span class="hljs-property">length</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>&quot;blue&quot;.length</code> 就是一个计算所得项。<br>计算所得项后面不能是未手动赋值的项,会报错的</p><h3 id="常数枚举"><a href="#常数枚举" class="headerlink" title="常数枚举"></a>常数枚举</h3><p>使用 <code>const enum</code>定义的枚举类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Directions</span> &#123;<br>  <span class="hljs-title class_">Up</span>,<br>  <span class="hljs-title class_">Down</span>,<br>  <span class="hljs-title class_">Left</span>,<br>  <span class="hljs-title class_">Right</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> directions = [<span class="hljs-title class_">Directions</span>.<span class="hljs-property">Up</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Down</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Left</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Right</span>]<br></code></pre></td></tr></table></figure><p>常数枚举与普通枚举的区别是,它会在编译阶段被删除,并且不包含计算成员</p><p>上例的编译结果是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> directions = [<span class="hljs-number">0</span> <span class="hljs-comment">/* Up */</span>, <span class="hljs-number">1</span> <span class="hljs-comment">/* Down */</span>, <span class="hljs-number">2</span> <span class="hljs-comment">/* Left */</span>, <span class="hljs-number">3</span> <span class="hljs-comment">/* Right */</span>]<br></code></pre></td></tr></table></figure><p>包含计算成员会报错:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title class_">Red</span>,<br>  <span class="hljs-title class_">Green</span>,<br>  <span class="hljs-title class_">Blue</span> = <span class="hljs-string">&#x27;blue&#x27;</span>.<span class="hljs-property">length</span>,<br>&#125; <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h3 id="外部枚举"><a href="#外部枚举" class="headerlink" title="外部枚举"></a>外部枚举</h3><p>使用 <code>declare enum</code>定义枚举类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Directions</span> &#123;<br>  <span class="hljs-title class_">Up</span>,<br>  <span class="hljs-title class_">Down</span>,<br>  <span class="hljs-title class_">Left</span>,<br>  <span class="hljs-title class_">Right</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> directions = [<span class="hljs-title class_">Directions</span>.<span class="hljs-property">Up</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Down</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Left</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Right</span>]<br></code></pre></td></tr></table></figure><p><code>declare</code>定义的类型只用于编译时检查, 编译结果中会删除 上例的编译结果是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> directions = [<span class="hljs-title class_">Directions</span>.<span class="hljs-property">Up</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Down</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Left</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Right</span>]<br></code></pre></td></tr></table></figure><p>外部枚举与声明语句一样，常出现在声明文件中。</p><p>同时使用 declare 和 const 也是可以的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Directions</span> &#123;<br>  <span class="hljs-title class_">Up</span>,<br>  <span class="hljs-title class_">Down</span>,<br>  <span class="hljs-title class_">Left</span>,<br>  <span class="hljs-title class_">Right</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> directions = [<span class="hljs-title class_">Directions</span>.<span class="hljs-property">Up</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Down</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Left</span>, <span class="hljs-title class_">Directions</span>.<span class="hljs-property">Right</span>]<br></code></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> directions = [<span class="hljs-number">0</span> <span class="hljs-comment">/* Up */</span>, <span class="hljs-number">1</span> <span class="hljs-comment">/* Down */</span>, <span class="hljs-number">2</span> <span class="hljs-comment">/* Left */</span>, <span class="hljs-number">3</span> <span class="hljs-comment">/* Right */</span>]<br></code></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="ts-中的类用法"><a href="#ts-中的类用法" class="headerlink" title="ts 中的类用法"></a>ts 中的类用法</h3><p>ts 可以使用三种访问修饰符,<code>public</code>,<code>private</code>, <code>protected</code></p><ul><li><code>public</code>修饰的属性或方法是公有的, 可以在任何地方被访问到,默认所有的属性和方法都是 <code>public</code>的</li><li><code>private</code>修饰的属性或方法是私有的, 不能再声明它的类的外部访问</li><li><code>protected</code>修饰的属性或方法是受保护的,和 <code>private</code>类似,区别是它在子类中是被允许访问的</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span> name<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;Jack&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">name</span>) <span class="hljs-comment">// Jack</span><br>a.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Tom&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">name</span>) <span class="hljs-comment">// Tom</span><br></code></pre></td></tr></table></figure><p>因为 <code>name</code>被设置了 <code>public</code>所以直接访问实例的 <code>name</code>属性是允许的</p><p>如果希望属性无法直接存取,可用 <code>private</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">private</span> name<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;Jack&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">name</span>) <span class="hljs-comment">// Jack</span><br>a.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Tom&#x27;</span> <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>修饰符和 <code>readonly</code>还可以使用在构造函数中, 等同类中定义该属性赋值,使代码更简洁</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>readonly</code>是只读属性关键字,只允许出现在属性声明或索引签名或构造函数中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">readonly</span> name<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;jack&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">name</span>) <span class="hljs-comment">// jack</span><br>a.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;tom&#x27;</span> <span class="hljs-comment">// 无法分配到 &quot;name&quot; ，因为它是只读属性</span><br></code></pre></td></tr></table></figure><p>如果 <code>readonly</code> 和其他访问修饰符同时存在的话，需要写在其后面。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-comment">// public readonly name;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> name</span>) &#123;<br>    <span class="hljs-comment">// this.name = name;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>abstract</code>用于定义抽象类和其中的抽象方法</p><p>首先抽象类是不允许被实例化的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span> name<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">sayHi</span>()<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;jack&#x27;</span>) <span class="hljs-comment">// 无法创建抽象类的实例。</span><br></code></pre></td></tr></table></figure><p>其次抽象类中的抽象方法必须被子类实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span> name<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">sayHi</span>()<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>  <span class="hljs-comment">// 非抽象类“Cat”不会实现继承自“Animal”类的抽象成员“sayHi”</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is eating.`</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&#x27;Tom&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上例中,定义了类 <code>Cat</code>继承了抽象类 <code>Animal</code>, 但是没有实现抽象方法 <code>sayHi</code>, 所以报错</p><p>正常例子:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span> name<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">sayHi</span>()<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Meow, My name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&#x27;tom&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h3><p>给类加上 ts 的类型很简单,与接口类似:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-title function_">sayHi</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`My name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-title class_">Animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;jack&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">sayHi</span>())<br></code></pre></td></tr></table></figure><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><h3 id="类实现接口"><a href="#类实现接口" class="headerlink" title="类实现接口"></a>类实现接口</h3><p>一般来讲, 一个类只能继承自另一个类,有时候不同类之间可以有一些共有的特性,这时候就可以吧特性提取成接口, 用 <code>implements</code>关键字来实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>    <span class="hljs-title function_">alert</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Door</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityDoor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Door</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Alarm</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;SecurityDoor alert&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Alarm</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Car alert)</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-title function_">alert</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">LightableAlarm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-title function_">lightOn</span>(): <span class="hljs-built_in">void</span><br>  <span class="hljs-title function_">lightOff</span>(): <span class="hljs-built_in">void</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这很好理解，<code>LightableAlarm</code> 继承了 <code>Alarm</code>，除了拥有 <code>alert</code> 方法之外，还拥有两个新方法 <code>lightOn</code> 和 <code>lightOff</code>。</p><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>ts 中接口可以继承类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Point3</span>d <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">point3d</span>: <span class="hljs-title class_">Point3</span>d = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">z</span>: <span class="hljs-number">3</span> &#125;<br></code></pre></td></tr></table></figure><p>为什么 TypeScript 会支持接口继承类呢？</p><p>实际上，当我们在声明 <code>class Point</code> 时，除了会创建一个名为 <code>Point</code> 的类之外，同时也创建了一个名为 <code>Point</code> 的类型（实例的类型）。</p><p>所以我们既可以将 <code>Point</code> 当做一个类来用（使用 <code>new Point</code> 创建它的实例）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>也可以将 <code>Point</code> 当做一个类型来用（使用 <code>:Point</code> 表示参数的类型）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printPoint</span>(<span class="hljs-params">p: Point</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">x</span>, p.<span class="hljs-property">y</span>)<br>&#125;<br><br><span class="hljs-title function_">printPoint</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>指定义函数, 接口或类的时候,不先指定具体的类型,而是使用的时候再指定类型的一种特性</p><p>实现一个函数,可以创建一个指定长度的数组,同时将每一项都填充一个默认值:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createArray</span>(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: <span class="hljs-built_in">any</span></span>): <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>  <span class="hljs-keyword">let</span> result = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    result[i] = value<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-title function_">createArray</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]</span><br></code></pre></td></tr></table></figure><p>这段代码的缺陷是没有准确定义返回值的类型<br><code>Array&lt;any&gt;</code> 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 <code>value</code> 的类型。</p><p>这时候可以使用泛型了:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> createArray&lt;T&gt;(<span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-title class_">Array</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>: T[] = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    result[i] = value<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br>createArray&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span><br></code></pre></td></tr></table></figure><p>上例中，我们在函数名后添加了 <code>&lt;T&gt;</code>，其中 <code>T</code> 用来指代任意输入的类型，在后面的输入 <code>value: T</code> 和输出 <code> Array&lt;T&gt;</code> 中即可使用了。</p><p>接着在调用的时候，可以指定它具体的类型为 <code>string</code>。当然，也可以不手动指定，而让类型推论自动推算出来：</p><h3 id="多个类型参数"><a href="#多个类型参数" class="headerlink" title="多个类型参数"></a>多个类型参数</h3><p>定义泛型的时候,可以一次定义多个类型参数</p><p>定义一个 <code>swap</code>函数, 用来交换输入的元组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> swap&lt;T, U&gt;(<span class="hljs-attr">tuple</span>: [T, U]): [U, T] &#123;<br>  <span class="hljs-keyword">return</span> [tuple[<span class="hljs-number">1</span>], tuple[<span class="hljs-number">0</span>]]<br>&#125;<br><br><span class="hljs-title function_">swap</span>([<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;seven&#x27;</span>]) <span class="hljs-comment">// [&#x27;seven&#x27;, 7]</span><br></code></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>在函数内部使用泛型变量的时候, 由于不知道它是哪种类型,所以不能随意操作它的属性或方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> loggingIdentity&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>) <span class="hljs-comment">// 类型“T”上不存在属性“length”。</span><br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br></code></pre></td></tr></table></figure><p>上例中，泛型 <code>T</code> 不一定包含属性 <code>length</code>，所以编译的时候报错了。</p><p>这时，我们可以对泛型进行约束，只允许这个函数传入那些包含 <code>length</code> 属性的变量。这就是泛型约束：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Lengthwise</span> &#123;<br>  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">function</span> loggingIdentity&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Lengthwise</span>&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>)<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br></code></pre></td></tr></table></figure><p>上例中，我们使用了 <code>extends</code> 约束了泛型 <code>T</code> 必须符合接口 <code>Lengthwise</code> 的形状，也就是必须包含 <code>length</code> 属性。</p><p>此时如果调用 <code>loggingIdentity</code> 的时候，传入的 <code>arg</code> 不包含 <code>length</code>，那么在编译阶段就会报错了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Lengthwise</span> &#123;<br>  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">function</span> loggingIdentity&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Lengthwise</span>&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>)<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><br><span class="hljs-title function_">loggingIdentity</span>(<span class="hljs-number">7</span>) <span class="hljs-comment">// 类型“7”的参数不能赋给类型“Lengthwise”的参数。</span><br></code></pre></td></tr></table></figure><p>多个类型参数之间也可以互相约束：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> copyFields&lt;T <span class="hljs-keyword">extends</span> U, U&gt;(<span class="hljs-attr">target</span>: T, <span class="hljs-attr">source</span>: U): T &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> id <span class="hljs-keyword">in</span> source) &#123;<br>    target[id] = (&lt;T&gt;source)[id]<br>  &#125;<br>  <span class="hljs-keyword">return</span> target<br>&#125;<br><br><span class="hljs-keyword">let</span> x = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">4</span> &#125;<br><br><span class="hljs-title function_">copyFields</span>(x, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">20</span> &#125;)<br></code></pre></td></tr></table></figure><p>上例中，我们使用了两个类型参数，其中要求 <code>T</code> 继承 <code>U</code>，这样就保证了 <code>U</code> 上不会出现 <code>T</code> 中不存在的字段。</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>可以使用接口的方式来定义一个函数需要符合的形状：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SearchFunc</span> &#123;<br>  (<span class="hljs-attr">source</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">subString</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">mySearch</span>: <span class="hljs-title class_">SearchFunc</span><br>mySearch = <span class="hljs-keyword">function</span> (<span class="hljs-params">source: <span class="hljs-built_in">string</span>, subString: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> source.<span class="hljs-title function_">search</span>(subString) !== -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以使用含有泛型的接口来定义函数的形状：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CreateArrayFunc</span> &#123;<br>  &lt;T&gt;(<span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-title class_">Array</span>&lt;T&gt;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">createArray</span>: <span class="hljs-title class_">CreateArrayFunc</span><br>createArray = <span class="hljs-keyword">function</span> &lt;T&gt;(<span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-title class_">Array</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>: T[] = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    result[i] = value<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-title function_">createArray</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span><br></code></pre></td></tr></table></figure><p>进一步，我们可以把泛型参数提前到接口名上：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CreateArrayFunc</span>&lt;T&gt; &#123;<br>  (<span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-title class_">Array</span>&lt;T&gt;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">createArray</span>: <span class="hljs-title class_">CreateArrayFunc</span>&lt;<span class="hljs-built_in">any</span>&gt;<br>createArray = <span class="hljs-keyword">function</span> &lt;T&gt;(<span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-title class_">Array</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>: T[] = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    result[i] = value<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-title function_">createArray</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span><br></code></pre></td></tr></table></figure><p>注意，此时在使用泛型接口的时候，需要定义泛型的类型。</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类也可以用于类的类型定义中:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericNumber</span>&lt;T&gt; &#123;<br>  <span class="hljs-attr">zeroValue</span>: T<br>  <span class="hljs-attr">add</span>: <span class="hljs-function">(<span class="hljs-params">x: T, y: T</span>) =&gt;</span> T<br>&#125;<br><br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericNumber</span>&lt;<span class="hljs-built_in">number</span>&gt;()<br>myGenericNumber.<span class="hljs-property">zeroValue</span> = <span class="hljs-number">0</span><br>myGenericNumber.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型参数的默认类型"><a href="#泛型参数的默认类型" class="headerlink" title="泛型参数的默认类型"></a>泛型参数的默认类型</h3><p>我们可以为泛型中的类型参数指定默认类型, 当使用泛型时没有在代码中直接指定类型参数,从实际值参数中也无法推测出时, 这个默认类型就会起作用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> createArray&lt;T = <span class="hljs-built_in">string</span>&gt;(<span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-title class_">Array</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>: T[] = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    result[i] = value<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h2><p>如果定义了两个相同名字的函数, 接口或类, 那么它们会合并成一个类型</p><h3 id="函数的合并"><a href="#函数的合并" class="headerlink" title="函数的合并"></a>函数的合并</h3><p>使用重载定义多个函数类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Number</span>(x.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口的合并"><a href="#接口的合并" class="headerlink" title="接口的合并"></a>接口的合并</h3><p>接口中的属性在合并时会简单的合并到一个接口中:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure><p>相当于:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意，合并的属性的类型必须是唯一的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 虽然重复了，但是类型都是 `number`，所以不会报错</span><br>  <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-built_in">string</span> <span class="hljs-comment">// 类型不一致，会报错</span><br>  <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接口中方法的合并,与函数的一样:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">alert</span>(<span class="hljs-attr">s</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">alert</span>(<span class="hljs-attr">s</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Alarm</span> &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">alert</span>(<span class="hljs-attr">s</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">alert</span>(<span class="hljs-attr">s</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类的合并"><a href="#类的合并" class="headerlink" title="类的合并"></a>类的合并</h3><p>类的合并与接口的合并规则一致</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>该关键字有三种用法</p><ul><li>继承/扩展</li><li>约束类型</li><li>条件类型</li></ul><ol><li><p>继承与扩展为 <code>class</code> 的继承 或者扩展 <code>interface</code></p></li><li><p>约束类型则为对泛型的类型参数进行约束, 如</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> getLength&lt;T <span class="hljs-keyword">extends</span> &#123; <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span> &#125;&gt;(<span class="hljs-attr">arr</span>: T): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-property">length</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这表示 <code>getLength</code> 函数的参数必须包含 类型为 <code>number</code> 的 <code>length</code> 属性</p><ol start="3"><li>条件类型有点像三元表达式, 如</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> A = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-keyword">type</span> B = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-keyword">type</span> C = A <span class="hljs-keyword">extends</span> B ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>意思是类型为 <code>A</code> 的值可以分配给类型为 <code>B</code> 的值, 像下面这样就为 <code>false</code>, 因为类型 <code>A</code> 缺少 <code>age</code> 属性, 但如果 <code>age</code> 为可选属性则又为 <code>true</code></p><p><strong>注意: 类型 A 可以分配给类型 B，而不是说类型 A 是类型 B 的子集</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> A = <span class="hljs-string">&#x27;x&#x27;</span><br><span class="hljs-keyword">type</span> B = <span class="hljs-string">&#x27;x&#x27;</span> | <span class="hljs-string">&#x27;y&#x27;</span><br><br><span class="hljs-keyword">type</span> C = A <span class="hljs-keyword">extends</span> B ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">type</span> D = B <span class="hljs-keyword">extends</span> A ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>再看一个例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> P&lt;T&gt; = T <span class="hljs-keyword">extends</span> <span class="hljs-string">&#x27;x&#x27;</span> ? <span class="hljs-built_in">string</span> : <span class="hljs-built_in">number</span><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">A3</span> = P&lt;<span class="hljs-string">&#x27;x&#x27;</span> | <span class="hljs-string">&#x27;y&#x27;</span>&gt; <span class="hljs-comment">// A3的类型是 string | number</span><br></code></pre></td></tr></table></figure><blockquote><p>如果 extends 前面的参数是一个泛型类型，当传入该参数的是联合类型，则使用分配律计算最终的结果。分配律是指，将联合类型的联合项拆成单项，分别代入条件类型，然后将每个单项代入得到的结果再联合起来，得到最终的判断结果。</p></blockquote><p>也就是说 <code>extends</code> 前面的 <code>T</code> 传的是一个联合类型 <code>&#39;x&#39; | &#39;y&#39;</code> , 会被拆开 分别代入 <code>P&lt;T&gt;</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript">P&lt;<span class="hljs-string">&#x27;x&#x27;</span> | <span class="hljs-string">&#x27;y&#x27;</span>&gt; =&gt; P&lt;<span class="hljs-string">&#x27;x&#x27;</span>&gt; | P&lt;<span class="hljs-string">&#x27;y&#x27;</span>&gt;<br><br><span class="hljs-comment">// &#x27;x&#x27;代入得到</span><br><span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">&#x27;x&#x27;</span> ? <span class="hljs-built_in">string</span> : <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> <span class="hljs-built_in">string</span><br><br><span class="hljs-comment">// &#x27;y&#x27;代入得到</span><br><span class="hljs-string">&#x27;y&#x27;</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">&#x27;x&#x27;</span> ? <span class="hljs-built_in">string</span> : <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> <span class="hljs-built_in">number</span><br><br><span class="hljs-comment">// 然后将每一项代入得到的结果联合起来，得到string | number</span><br></code></pre></td></tr></table></figure><p><strong>满足两个要点即可适用：第一，参数是泛型类型，第二，代入参数的是联合类型</strong><br>但是也可以避免这样, <code>[]</code> 括起来即可,传入的 <code>T</code> 将被当成一个整体:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> P&lt;T&gt; = [T] <span class="hljs-keyword">extends</span> [<span class="hljs-string">&#x27;x&#x27;</span>] ? <span class="hljs-built_in">string</span> : <span class="hljs-built_in">number</span><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">A3</span> = P&lt;<span class="hljs-string">&#x27;x&#x27;</span> | <span class="hljs-string">&#x27;y&#x27;</span>&gt; <span class="hljs-comment">// A3的类型是 number</span><br></code></pre></td></tr></table></figure><p><code>never</code> 被认为是空的联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// never是所有类型的子类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">A1</span> = <span class="hljs-built_in">never</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">&#x27;x&#x27;</span> ? <span class="hljs-built_in">string</span> : <span class="hljs-built_in">number</span> <span class="hljs-comment">// string</span><br><br><span class="hljs-keyword">type</span> P&lt;T&gt; = T <span class="hljs-keyword">extends</span> <span class="hljs-string">&#x27;x&#x27;</span> ? <span class="hljs-built_in">string</span> : <span class="hljs-built_in">number</span><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">A2</span> = P&lt;<span class="hljs-built_in">never</span>&gt; <span class="hljs-comment">// never</span><br></code></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>代码量较大的时候,为了避免各种命名冲突,可将相似功能的函数、类、接口等放置到命名空间内<br>命名空间和模块的区别:</p><ul><li>命名空间:内部模块,用于组织代码,避免命名冲突</li><li>模块: ts 的外部模块的简称,侧重代码复用,一个模块里可能会有多个命名空间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js">namespace A &#123;<br> interface <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: string<br>  <span class="hljs-title function_">eat</span>(): <span class="hljs-keyword">void</span><br> &#125;<br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> *<span class="hljs-title class_">Dog</span>* implements <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: string<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: string</span>) &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> 吃骨头`</span>)<br>  &#125;<br> &#125;<br>&#125;<br><br>namespace B &#123;<br> interface <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: string<br>  <span class="hljs-title function_">eat</span>(): <span class="hljs-keyword">void</span><br> &#125;<br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> *<span class="hljs-title class_">Dog</span>* implements <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: string<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: string</span>) &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> 吃肉`</span>)<br>  &#125;<br> &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> A.<span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;小黑&#x27;</span>)<br>d.<span class="hljs-title function_">eat</span>()<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> B.<span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;小黄&#x27;</span>)<br>b.<span class="hljs-title function_">eat</span>()<br></code></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>一个封装的 <code>ajax.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Config</span> &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span><br>  data?: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">dataType</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">config: Config</span>) &#123;<br>  <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>  xhr.<span class="hljs-title function_">open</span>(config.<span class="hljs-property">type</span>, config.<span class="hljs-property">url</span>, <span class="hljs-literal">true</span>)<br>  xhr.<span class="hljs-title function_">send</span>(config.<span class="hljs-property">data</span>)<br>  xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-keyword">if</span> (config.<span class="hljs-property">dataType</span> === <span class="hljs-string">&#x27;json&#x27;</span>) &#123;<br>        <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">ajax</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;name=zs&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,<br>  <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Typescript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack配置</title>
    <link href="/blog/2021/03/07/Webpack%E9%85%8D%E7%BD%AE/"/>
    <url>/blog/2021/03/07/Webpack%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>记录 Webpack 常用配置及各类插件、技巧</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学的时候还是 <code>4.x</code>，现在 <code>webpack5</code> 都有了，学这些配置也一直没用上，学了没用等于没学，记一下大概的流程吧，有机会用到在说吧。</p><h2 id="Webpack-配置技巧"><a href="#Webpack-配置技巧" class="headerlink" title="Webpack 配置技巧"></a>Webpack 配置技巧</h2><ol><li><code>webpack.config.js</code> 配置时先写最外层的再配里面的</li></ol><ul><li>mode</li><li>entry</li><li>output</li><li>module</li><li>plugins</li><li>devServer</li></ul><ol start="2"><li>一些 <code>API</code> 可能不记得了，可以在配置文件里面使用 <code>ts</code> 类型来做代码提示</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Configuration</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;webpack&#x27;</span> <span class="hljs-comment">// import 的语法webpack无法识别配完了要记得注释掉</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 这里面就有代码提示了</span><br>  <span class="hljs-comment">//...do something</span><br><br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">Configuration</span> <span class="hljs-comment">// 断言类型</span><br><br></code></pre></td></tr></table></figure><h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><p>webpack 三大件</p><ul><li>webpack</li><li>webpack-cli</li><li>webpack-dev-server</li></ul><p>处理 ES6+ 的 babel 核心三大件</p><ul><li>babel-loader</li><li>babel-core</li><li>babel-preset-env</li></ul><p>及其他 babel 按需求安装</p><ul><li>babel-plugin-transform-runtime</li><li>babel-plugin-transform-decorators</li><li>babel-plugin-transform-decorators-legacy</li><li>…</li></ul><p>处理 css 样式， loader 为倒序，一层层处理</p><p>sass =&gt; css =&gt; style</p><ul><li>style-loader</li><li>css-loader</li><li>sass-loader</li><li>node-sass</li></ul><p>处理 html</p><p><code>webpack5</code> 如果要自定义动态定义 <code>title</code> 得用 <code>index.ejs</code></p><ul><li>html-webpack-plugin</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./public/index.ejs&#x27;</span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;webpack5&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;<br></code></pre></td></tr></table></figure><p>打包前清空文件</p><p><code>webpack5</code> <code>output</code> 自带，不需要 <code>clean-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>webpack5</code> 内置了资源处理模块，<code>file-loader</code> 和 <code>url-loader</code> 都可以不用安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpe?g|png|gif)$/i</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset&#x27;</span>,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-comment">// [ext] 自带 &quot;.&quot; 这个与 url-loader 配置不同</span><br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name][hash:8][ext]&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>            <span class="hljs-attr">maxSize</span>: <span class="hljs-number">50</span> * <span class="hljs-number">1024</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>js 兼容性处理配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Browserslist">[development]<br>last 1 chrome version<br>last 1 firefox version<br>last 1 safari version<br><br>[production]<br>&gt; 0.2%<br>not dead<br>not op_mini all<br></code></pre></td></tr></table></figure><h2 id="好用的依赖"><a href="#好用的依赖" class="headerlink" title="好用的依赖"></a>好用的依赖</h2><h3 id="css-类名提示"><a href="#css-类名提示" class="headerlink" title="css 类名提示"></a>css 类名提示</h3><p>现在使用 <code>ts</code> 开发很多，<code>ts</code> 的类型提示很好用，唯独 <code>css</code> 类名提示没有，现在用的都是模块化的 <code>css</code> 没有提示很不方便</p><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pwsh">yarn add typescript<span class="hljs-literal">-plugin-css-modules</span> <span class="hljs-literal">-D</span><br></code></pre></td></tr></table></figure><p>这个插件可以提示 <code>css</code> 类名， 搭配 <code>css-loader</code> 很好用</p><p>安装完后需要在 <code>tsconfig.json</code> 里面加入如下代码:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;typescript-plugin-css-modules&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;classnameTransform&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;camelCaseOnly&quot;</span> <span class="hljs-comment">// 驼峰css类名</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用驼峰类名更加美观，且两者同时存在、生效：<code>className=&#123;styles[&#39;home-wrap&#39;]&#125;</code> =&gt; <code>className=&#123;styles.homeWrap&#125;</code></p><p>注意需要在 <code>css-loader</code> 里面也加上驼峰配置 <code>exportLocalsConvention:&#39;camelCase&#39;</code></p><p>在 <code>.vscode/settings.json</code> 里面加入:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;typescript.tsdk&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node_modules/typescript/lib&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typescript.enablePromptUseWorkspaceTsdk&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>同时在 <code>.tsx</code> 文件中按 <code>F1</code> 按图选择即可</p><p><img src="https://s2.loli.net/2022/06/14/E69w2fHq5B1CPxd.png" alt="1-1"><br><img src="https://s2.loli.net/2022/06/14/d5LaWb7y6Y8Ktzr.png" alt="1-2"></p><p>这样写 <code>css</code> 类名时就会有代码提示了</p>]]></content>
    
    
    <categories>
      
      <category>Webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES3/5</title>
    <link href="/blog/2021/03/07/ES3-5/"/>
    <url>/blog/2021/03/07/ES3-5/</url>
    
    <content type="html"><![CDATA[<p>包括函数/预编译/作用域/闭包/原型/原型链/继承</p><span id="more"></span><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>三类方式的定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 赋值</span><br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-comment">// 立即执行函数</span><br>;(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;)()<br><br><span class="hljs-comment">// 构造函数</span><br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;console.log(x+y)&#x27;</span>)<br></code></pre></td></tr></table></figure><p>所有的函数都是Function的实例(对象),函数也属于对象</p><p><code>arguments</code>关键字里有所有的实参</p><h3 id="预编译-gt-作用域-gt-闭包"><a href="#预编译-gt-作用域-gt-闭包" class="headerlink" title="预编译-&gt;作用域-&gt;闭包"></a>预编译-&gt;作用域-&gt;闭包</h3><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>js运行:</p><ol><li>语法分析</li><li>预编译</li><li>解释执行</li></ol><p>全局预编译: 页面加载完成时<br>局部预编译: 函数执行前一刻</p><blockquote><p>预编译阶段发生的变量声明和函数声明没有初始化行为(赋值),匿名函数不参与预编译. 只有在解释阶段才进行变量初始化</p></blockquote><p>一切声明的全局变量和未声明的变量都归window所有</p><ol><li>函数声明整体提升</li><li>变量声明提升</li></ol><blockquote><p>js函数的调用永远在函数声明下面调用,即使调用卸载函数声明之前</p></blockquote><p>预编译步骤:</p><p>先扫描整体语法语句,有逻辑错误或者语法错误直接停止运行报错,没有错误就解释一行执行一行</p><p>全局预编译:</p><ol><li>创建GO对象(Global Object)全局对象</li><li>找变量声明,将变量名作为GO属性名,值为undefined</li><li>查找函数声明,作为GO属性,值赋予函数体</li></ol><blockquote><p>GO对象是全局预编译,优先于AO对象创建和执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">global</span> = <span class="hljs-number">100</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">global</span>)<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable language_">global</span> = <span class="hljs-number">200</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">global</span>)<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable language_">global</span> = <span class="hljs-number">300</span><br>&#125;<br><span class="hljs-title function_">test</span>()<br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">global</span><br></code></pre></td></tr></table></figure><p>GO:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建GO对象</span><br><span class="hljs-variable constant_">GO</span> &#123;&#125;<br><span class="hljs-comment">// 找变量声明,将变量名作为GO属性名,值为undefined</span><br><span class="hljs-variable constant_">GO</span> &#123;<br>  <span class="hljs-attr">global</span>:<span class="hljs-literal">undefined</span><br>&#125;<br><span class="hljs-comment">// 查找函数声明,作为GO属性,值赋予函数体</span><br><span class="hljs-variable constant_">GO</span> &#123;<br>  <span class="hljs-attr">global</span>:<span class="hljs-literal">undefined</span><br>&#125;<br><span class="hljs-comment">// 创建AO对象</span><br><span class="hljs-variable constant_">AO</span> &#123;&#125;<br><span class="hljs-comment">// 找形参和变量声明，将形参名和变量名作为AO对象的属性名</span><br><span class="hljs-variable constant_">AO</span> &#123;<br>  <span class="hljs-attr">global</span>:<span class="hljs-literal">undefined</span><br>&#125;<br><span class="hljs-comment">// 实参形参值统一</span><br><span class="hljs-variable constant_">AO</span> &#123;<br>  <span class="hljs-attr">global</span>:<span class="hljs-literal">undefined</span><br>&#125;<br><span class="hljs-comment">// 函数体找函数声明,值赋予函数体</span><br><span class="hljs-variable constant_">AO</span> &#123;<br>  <span class="hljs-attr">global</span>:<span class="hljs-literal">undefined</span><br>&#125;<br></code></pre></td></tr></table></figure><p>局部预编译:</p><ol><li>创建AO对象(Activation Object)执行上下文</li><li>找形参和变量声明,将变量和形参名作为AO属性名,值为undefined</li><li>将实参和形参统一</li><li>在函数体里面找函数声明,值赋予函数体</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>  <span class="hljs-comment">// 变量声明+变量赋值(只提升变量声明,不提升变量赋值)</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>  <span class="hljs-comment">// 函数声明</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>  <span class="hljs-comment">// 函数表达式</span><br>  <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b)<br>  <span class="hljs-comment">// 函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>AO:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建AO对象</span><br><span class="hljs-variable constant_">AO</span> &#123;&#125;<br><span class="hljs-comment">// 找形参和变量声明,将形参和变量名作为AO对象的属性名,值为undefined</span><br><span class="hljs-variable constant_">AO</span> &#123;<br>  <span class="hljs-attr">a</span>:<span class="hljs-literal">undefined</span>,<br>  <span class="hljs-attr">b</span>:<span class="hljs-literal">undefined</span><br>&#125;<br><span class="hljs-comment">// 实参形参值统一</span><br><span class="hljs-variable constant_">AO</span> &#123;<br>  <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;<br>&#125;<br><span class="hljs-comment">// 在函数体里面找函数声明,值赋予函数体</span><br><span class="hljs-variable constant_">AO</span> &#123;<br>  <span class="hljs-attr">a</span>:<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;...&#125;,<br>  <span class="hljs-attr">b</span>:<span class="hljs-literal">undefined</span>,<br>  <span class="hljs-attr">d</span>:<span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params"></span>) &#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><ul><li>作用域就是一个变量可以生效的范围</li><li>分为全局作用域和局部作用域</li></ul><p>全局作用域</p><ul><li>全局作用域是最大的作用域</li><li>全局作用域中定义的变量可以在任何地方使用</li><li>浏览器中的全局作用域是window,页面打开创建,关闭销毁</li></ul><p>局部作用域</p><ul><li>js中函数里就是局部作用域,每一个函数都是一个局部作用域</li><li>局部作用域中定义的变量只能在局部作用域中使用</li></ul><p>作用域查找机制: 访问变量时,按照就近原则一级一级向上查找</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>能够访问其他函数内部变量的函数</p><p>创建闭包的常见方式,就是在一个函数内部创建另一个函数</p><p>闭包的表现形式:</p><p>返回一个函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 2</span><br>  &#125;<br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><p>作为函数参数传递:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 2</span><br>  &#125;<br>  <span class="hljs-title function_">bar</span>(baz)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-comment">// 闭包</span><br>  <span class="hljs-title function_">fn</span>()<br>&#125;<br><span class="hljs-title function_">foo</span>()<br></code></pre></td></tr></table></figure><p>回调函数:无论是定时器还是http请求之类的异步操作,只要用了回调函数就使用了闭包</p><p>IIFE:立即执行函数,不是一个经典的闭包,但确实创建了一个闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>&#125;)()<br></code></pre></td></tr></table></figure><h3 id="原型-gt-原型链-gt-继承"><a href="#原型-gt-原型链-gt-继承" class="headerlink" title="原型-&gt;原型链-&gt;继承"></a>原型-&gt;原型链-&gt;继承</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>ES6之前js中没有类的概念,对象不是基于类创建的,而是用构造函数来定义对象和它们的特征</p><p>利用构造函数创建对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">name,age</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;唱歌&#x27;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ly = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;LY&#x27;</span>,<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>构造函数是一种特殊的函数,主要用来初始化对象(为对象成员变量赋初始值)</p><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> zs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;zs&#x27;</span>)<br><span class="hljs-keyword">var</span> ls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zs.<span class="hljs-property">sayName</span> === ls.<span class="hljs-property">sayName</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>构造函数方法会浪费内存,每个实例对象的方法都会开辟新的内存空间来存放同一个函数<br>JavaScript规定,每个构造函数都有一个prototype属性,指向另一个对象,这个prototype就是一个对象,这个对象的所有属性和方法,都会被构造函数所拥有<br>我们可以将一成不变的方法,直接定义到prototype对象上,这样所有实例就可以共用同一个方法,不用开辟新的内存空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> zs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;zs&#x27;</span>)<br><span class="hljs-keyword">var</span> ls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zs.<span class="hljs-property">sayName</span> === ls.<span class="hljs-property">sayName</span>); <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 对象的__proto__指向构造函数的prototype,它们是等价的</span><br><span class="hljs-comment">// __proto__的意义就在于为对象的查找机制提供一个方向,它是一个非标准属性,实际开发不使用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zs.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>每一个构造函数都有(原型)prototype指向它的原型对象。<br>原型对象有constructor指向它的构造函数。<br>构造函数可以通过new 的创建方式创建实例对象<br>实例对象通过__proto__指向它的原型对象。<br>原型对象也有自己的原型对象，通过__proto__指向。</p><p>查找对象的某个属性时,首先会在自身上找,找不到就向原型上找,还找不到就向原型的原型上找,以此类推,一层层向上找,直到终点null,这个链式关系就是原型链</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><p>将父类的实例作为子类的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span> = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span><br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getInfo</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-comment">// 父类的实例挂载到子类的原型上</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>()<br><br><span class="hljs-keyword">let</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><span class="hljs-comment">// 继承了父类的属性和方法</span><br>child1.<span class="hljs-property">info</span>.<span class="hljs-property">gender</span> = <span class="hljs-string">&#x27;man&#x27;</span><br>child1.<span class="hljs-title function_">getInfo</span>()<br></code></pre></td></tr></table></figure><p>可以实现父类方法的复用<br>但是父类的所有引用属性会被子类所共享,修改子类的引用属性,其他子类也会受影响,子类实例不能给父类构造函数传参</p><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><p>在子类构造函数中调用父类构造函数, 可以在子类构造函数中使用<code>call()</code>和<code>apply()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span> = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">23</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// call()从第二个参数开始可以传参</span><br>&#125;<br><span class="hljs-keyword">let</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br>child1.<span class="hljs-property">info</span>.<span class="hljs-property">gender</span> = <span class="hljs-string">&#x27;man&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child1.<span class="hljs-property">info</span>) <span class="hljs-comment">// &#123; name: &#x27;zs&#x27;, age: 23, gender: &#x27;man&#x27; &#125;</span><br><br><span class="hljs-keyword">let</span> child2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child2.<span class="hljs-property">info</span>) <span class="hljs-comment">// &#123; name: &#x27;zs&#x27;, age: 23 &#125;</span><br></code></pre></td></tr></table></figure><p>通过使用<code>call()</code>或<code>apply()</code>方法指定this,实现继承<br>每个实例都有自己的info属性</p><p>可以在子类构造函数中向父类传参<br>父类的引用属性不会被共享</p><p>子类不能访问父类原型上定义的方法,也就是父类prototype上定义的方法,<br>因此所有的方法都写在构造函数中,每次创建实例都会开辟新的内存空间初始化</p><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>结合了原型链继承和构造函数继承,既可以通过构造函数继承实例属性,也可以把方法定义在原型上实现重用,又可以让每个实例都有自己的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;yellow&#x27;</span>]<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name,age</span>) &#123;<br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,name)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>()<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">12</span>)<br>child1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;pink&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child1.<span class="hljs-property">colors</span>); <span class="hljs-comment">// [ &#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;pink&#x27; ]</span><br>child1.<span class="hljs-title function_">sayAge</span>() <span class="hljs-comment">// 123</span><br>child1.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// zs</span><br></code></pre></td></tr></table></figure><p>child的构造函数内部call()调用了Parent构造函数又传入了参数,Child.prototype也挂载了Parent的实例</p><p>父类方法可复用<br>子类构造函数可向父类构造函数传参<br>父类构造焊接中的引用属性不会被共享</p><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>对参数对象的一种浅复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">objectCopy</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Fun</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-title class_">Fun</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = obj<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fun</span>()<br>&#125;<br><br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-number">123</span>,<br>  <span class="hljs-attr">friends</span>:[<span class="hljs-string">&#x27;lis&#x27;</span>,<span class="hljs-string">&#x27;whw&#x27;</span>,<span class="hljs-string">&#x27;mal&#x27;</span>],<br>  <span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> person1 = <span class="hljs-title function_">objectCopy</span>(person)<br><br>person1.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;ss&#x27;</span><br>person1.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;ll&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">friends</span>); <span class="hljs-comment">// [ &#x27;lis&#x27;, &#x27;whw&#x27;, &#x27;mal&#x27;, &#x27;ll&#x27; ]</span><br>person1.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// ss</span><br><br></code></pre></td></tr></table></figure><p>父类方法的复用</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES3/5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拷贝</title>
    <link href="/blog/2021/03/07/%E6%8B%B7%E8%B4%9D/"/>
    <url>/blog/2021/03/07/%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>深拷贝 &amp;&amp; 浅拷贝</p><span id="more"></span><h2 id="深拷贝浅拷贝"><a href="#深拷贝浅拷贝" class="headerlink" title="深拷贝浅拷贝"></a>深拷贝浅拷贝</h2><p>js中8种数据类型,其中7种是基本数据类型,基本数据类型之间复制返回的是新的数据,都是在独立的栈中</p><p>引用数据类型<code>object</code>,像<code>array function Date...</code>都是<code>object</code></p><p>引用数据类型存放在堆内存中,可以直接访问和修改</p><p>引用数据类型占据空间大,放在栈中存在性能问题,所以在栈中保存了一份指针,指向堆中的原始地址,当解释器寻找引用值时,首先检索栈中的地址,通过地址从堆中获取数据</p><p>引用型数据类型的赋值是从栈中复制了一份地址指针,所以两个变量指向的是同一个对象,修改任意一个变量,都会导致另一个的改变,有时候复制一份新的数据,这时就需要<strong>深拷贝浅拷贝</strong></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>展开运算符<code>... </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span> &#125;<br><span class="hljs-keyword">let</span> obj2 = &#123; ...obj&#125;<br>obj2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;12&#x27;</span><br></code></pre></td></tr></table></figure><p><code>Object.assign()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj2 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,obj)<br></code></pre></td></tr></table></figure><p>可将所有可枚举属性的值从一个或多个源对象分配到目标对象,并返回目标对象</p><p><code>concat</code>和<code>slice</code>可拷贝数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">arr2 = arr.<span class="hljs-title function_">concat</span>()<br>arr2 - arr.<span class="hljs-title function_">slice</span>()<br></code></pre></td></tr></table></figure><p>缺陷: 如果拷贝对象中有引用型值的话,引用型值是指向同一个地址的,修改一个会影响到另一个</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝可以将拷贝过程中遇到的引用类型都新开辟一块内存空间存放,这样可以避免子对象共享同一份内存的问题</p><p><code>JSON.parse(JSON.stringify())</code></p><p>缺陷: 不能解决循环引用的问题<br>      无法拷贝特殊对象,如: <code>RegExp, Date,Set,Map</code></p><p>手写深拷贝</p><p>思路: 浅拷贝 + 递归</p><ul><li>基本数据类型直接拷贝</li><li>引用数据类型进行递归拷贝</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">target</span>) &#123;<br>  <span class="hljs-keyword">const</span> type = <span class="hljs-keyword">typeof</span> target<br>  <span class="hljs-keyword">return</span> target !== <span class="hljs-literal">null</span> &amp;&amp; (type === <span class="hljs-string">&#x27;object&#x27;</span> || type === <span class="hljs-string">&#x27;function&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">target</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isObject</span>(target)) <span class="hljs-keyword">return</span> target <span class="hljs-comment">// 拷贝基本数据类型</span><br><br>  <span class="hljs-keyword">let</span> cloneTarget = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(target) ? [] :&#123;&#125;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(target).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span>=&gt;</span> &#123;<br>    cloneTarget[key] = <span class="hljs-title function_">deepClone</span>(target[key]) <span class="hljs-comment">// 递归拷贝属性</span><br>  &#125;)<br>  <span class="hljs-keyword">return</span> cloneTarget<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深拷贝</tag>
      
      <tag>浅拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js线程</title>
    <link href="/blog/2021/03/07/js%E7%BA%BF%E7%A8%8B/"/>
    <url>/blog/2021/03/07/js%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="JS线程"><a href="#JS线程" class="headerlink" title="JS线程"></a>JS线程</h2><p>众所周知js是单线程的，js引擎是单线程执行的， 可是浏览器是可以多线程的，js引擎只是浏览器的一个线程而已， 定时器、网络请求、浏览器渲染等等都是由不同的线程去完成的</p><p>比如: js引擎遇到<code>setTimeout</code>后会开启一个定时器线程， 然后继续向下执行，定时器线程会在指定时间后往任务队列插入一个任务，等所有的同步任务执行后，再去任务队列中去执行代码</p><p>浏览器线程：</p><ul><li>GUI渲染线程</li><li>JS引擎线程</li><li>定时器触发线程</li><li>浏览器事件线程</li><li>http异步线程</li><li>事件循环(Event Loop)轮询处理线程</li><li>…….</li></ul><p><strong>一个浏览器至少实现三个常驻线程：JavaScript引擎线程，GUI渲染线程，浏览器事件触发线程</strong></p><h2 id="js线程与进程"><a href="#js线程与进程" class="headerlink" title="js线程与进程"></a>js线程与进程</h2><p>一个进程就是一个程序， 比如用浏览器打开１个网页，就是开启了１个进程， 3个网页就是3个进程</p><p>一个<strong>进程</strong>的运行需要，多个<strong>线程</strong>的配合，比如打开QQ，有接收消息线程，传输文件线程……</p><p>浏览器线程有很多，如: </p><p><strong>类别A</strong>：GUI 渲染线程</p><p><strong>类别B</strong>：JS 引擎线程</p><p><strong>类别C</strong>：EventLoop轮询处理线程</p><p><strong>类别D</strong>：其他线程，有 定时器触发线程 (setTimeout)、http 异步线程、浏览器事件线程 (onclick)等等。</p><p><strong>注意:</strong> <strong>js引擎与GUI引擎是互斥的</strong></p><p>js语言设定为<strong>js引擎与GUI引擎互斥</strong>，也就是就GUI引擎在渲染时会阻塞js引擎计算</p><p>因为，如果GUI渲染时js改变了DOM，那么会造成渲染不同步</p><h3 id="类别B"><a href="#类别B" class="headerlink" title="类别B"></a>类别B</h3><p>js引擎线程， 一般叫<strong>主线程</strong>， 用来运行js代码(不包括异步代码)</p><p>主线程运行JS代码时，会生成个<strong>执行栈</strong>，可以处理函数的嵌套</p><h4 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h4><p><strong>执行上下文</strong></p><p>js所有的代码运行时都在执行上下文中进行的， js中有三种执行上下文:</p><ul><li>全局执行上下文， 默认的， 在浏览器中是window对象， this在非严格模式下指向它</li><li>函数执行上下文， js函数在调用时会创建一个上下文</li><li>Eval执行上下文，Eval函数会产生自己的上下文(可忽略)</li></ul><p>执行上下文生命周期: <strong>创建 =&gt; 执行 =&gt; 回收</strong></p><p><strong>创建:</strong></p><p>当函数调用， 但未执行内部代码之前，会:</p><ol><li>创建变量对象: 初始化函数的参数， 提升函数声明和变量声明</li><li>创建作用域链: 作用域链在变量对象之后创建的</li><li>确定this指向</li></ol><p>在一段 JS 脚本执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为 <code>undefined</code>，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。</p><p><strong>执行:</strong></p><p>执行变量赋值，代码执行</p><p><strong>回收:</strong></p><p>执行上下文出栈等待虚拟机回收</p><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p><strong>变量声明提升</strong></p><p>js中的<code>var</code>可以先使用后声明变量:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>上面没有没有报错是因为进行了变量提升:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a <span class="hljs-comment">// 声明了变量a 但是没有赋值， 默认为undefinde</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// undefined</span><br>a = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><strong>函数声明提升</strong></p><p>有两种创建函数的方法:</p><p>函数声明: <code>function fn()&#123;&#125;</code></p><p>函数表达式: <code>var fn = function()&#123;&#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f1); <span class="hljs-comment">// function f1()&#123;&#125;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">// 函数声明</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f2); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> f2 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;; <span class="hljs-comment">// 函数表达式</span><br></code></pre></td></tr></table></figure><p>函数声明是将整个函数提升， 而函数表达式只提升了<code>var f2</code>，所以为<code>undefined</code></p><p>栈是一种数据结构， 具有<strong>先进后出</strong>的原则， js中的执行栈也是这样的</p><p>当js引擎第一次遇到js代码时， 会产生一个全局执行上下文并压入执行栈， 每当遇到一个函数调用，就往执行栈中压入一个新的上下文，执行栈顶部的函数执行完毕后， 会自动出栈， 也就是<strong>先进后出</strong></p><p>结论: </p><ul><li>单线程</li><li>同步执行，只有栈顶的上下文处于执行中，其他的需要等待</li><li>全局上下文只有一个，在浏览器关闭时出栈</li><li>函数的执行上下文没有个数限制</li><li>每次调用函数，就会有新的执行上下文为其创建， 调用自身也是如此</li></ul><p>**注意:**函数中， 遇到<code>return</code>直接终止可执行代码的执行， 直接出栈</p><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>一个静态存储结构， 用来存储异步任务成功后的回调函数<strong>字符串</strong>(未来要执行的回调函数)， 先成功的排在前面，后成功的排在后面</p><p><strong>只有异步成功后，才将回调函数放入队列中，比如<code>setTimeout</code>在3秒后执行一个函数，那么该函数在3秒后才进队列的</strong></p><h3 id="类别D"><a href="#类别D" class="headerlink" title="类别D:"></a>类别D:</h3><p>异步: 定时器，http，浏览器事件</p><p>主线程执行JS代码时，碰到异步代码，就把它丢给各自相对应的线程去执行:</p><ul><li>定时器: 定时器触发线程在接收到代码时就开始计时， 时间到了就将回调函数放进队列</li><li>http: http异步线程发起http请求，请求成功后将回调函数放进队列</li><li>浏览器事件: 浏览器事件先监听DOM， 直到事件触发后，再将回调函数放进队列</li></ul><p>也就是说这几个线程主要干两件事：</p><ol><li>执行主线程扔过来的异步代码，并执行代码</li><li>保存回调函数，在未来的某个时刻，通知<strong>EventLoop轮询处理线程</strong>过来取相应的回调函数然后执行</li></ol><h3 id="类别C"><a href="#类别C" class="headerlink" title="类别C:"></a>类别C:</h3><p><code>EventLoop</code>轮询处理线程</p><p>上面的主线程， 异步线程， 任务队列互相交流需要由<code>EventLoop</code>作为<strong>中介</strong>去处理</p><ol><li><code>主线程</code>遇到异步代码， 交给<code>EventLoop</code>去处理</li><li><code>EventLoop</code>再传给<code>异步线程</code></li><li><code>异步线程</code>执行成功后把回调函数传回<code>EventLoop</code> </li><li><code>EventLoop</code>把接收到的回调函数放进<code>任务队列</code>里</li><li><code>主线程</code>同步任务执行完了， 就去<code>任务队列</code>里去看看有没有需要执行的代码</li></ol><p>如此往复循环</p><p><strong>注意: 只有主线程的同步代码都执行完了，才会去队列里看看还有啥要执行的， 主线程没执行完，队列里的只能等着</strong></p><p><img src="https://i.loli.net/2020/09/06/5prCmZcFU1otwT4.png"></p><p>所以<code>setTimeout</code>，<code>setInterval</code>的定时，不一定完全按照设想的时间的，因为主线程里的代码可能复杂到执行很久，所以会发生你定时3秒后执行，实际上是3.5秒后执行（主线程花费了0.5秒）</p><h2 id="微任务-宏任务"><a href="#微任务-宏任务" class="headerlink" title="微任务 宏任务"></a>微任务 宏任务</h2><p>js中的任务分为两种类型:</p><p>宏任务: js主线程中的 <code>定时器</code>，<code>事件绑定</code>，<code>网络请求</code></p><p>微任务: <code>promise</code> <code>.then catch finally</code> <code>async</code> <code>await</code> <code>genrator</code> <code>process.nextTick</code></p><p>执行同步代码 ==&gt; <strong>检查微任务并执行</strong> ==&gt; 执行宏任务1 ==&gt; <strong>检查微任务并执行</strong> ==&gt; 执行宏任务2 ==&gt; <strong>检查微任务并执行</strong> ==&gt; 执行宏任务3 …… 循环</p><p><strong>宏任务执行完后一定会检查微任务执行</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)  <span class="hljs-comment">// 同步</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// 异步 宏任务</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>&#125;)<br><span class="hljs-comment">// new Promise(excurtor执行器函数) excurtor会立即执行</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve， reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<span class="hljs-comment">// 同步</span><br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-number">4</span>) <br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123; <span class="hljs-comment">// 异步 微任务</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)  <br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>)<span class="hljs-comment">// 同步</span><br><br><span class="hljs-comment">// 1 3 6 5 4 2</span><br></code></pre></td></tr></table></figure><p>也就是说之前所有的异步都放进一个任务队列里， 现在分两个任务队列了：宏任务和微任务</p><blockquote><p>任务有优先级：</p><p><code>process.nextTick</code> 高于<code>Promise</code></p><p><code>setTimeout</code>高于<code>setlmmediate</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setImmediate</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br> <span class="hljs-title function_">resolve</span>();<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>);<br>process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">7</span>);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">8</span>);<br><br><span class="hljs-comment">// 3 4 6 8 7 5 2 1</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a>同步异步</h2><p>js中大部分代码是同步的， 从上往下执行， 定时器，ajax，绑定事件，<code>fs.readFile</code>，<code>fs.writeFile</code>是异步的</p><p>优先执行同步代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>&#125;， <span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 执行结果 1，3，2</span><br></code></pre></td></tr></table></figure><p>凡是有异步的地方，基本都有回调函数如: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 异步操作</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> data = <span class="hljs-number">123</span><br>        <span class="hljs-keyword">return</span> data<br>    &#125;， <span class="hljs-number">1000</span>)<br>    <span class="hljs-comment">// 相当于直接return undefined， 没有调用异步函数，不用回调函数拿不到异步结果</span><br>&#125;<br><span class="hljs-keyword">const</span> res = <span class="hljs-title function_">fn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// undefined</span><br><br><br><span class="hljs-comment">// 回调函数 把函数当作参数传递</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">// 不是马上可以得到结果 异步操作</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> data = <span class="hljs-number">123</span><br>        <span class="hljs-title function_">callback</span>(data)<br>    &#125;， <span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// 123</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>回调函数有个大问题: **回调地狱(callback hell)**如: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 需要按照1，2，3打印</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;， <span class="hljs-number">1000</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>&#125;， <span class="hljs-number">600</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>&#125;， <span class="hljs-number">200</span>)<br><br><span class="hljs-comment">// 3，2，1 行不通</span><br><br><span class="hljs-comment">// 可用嵌套写法</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>    <br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>      <br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>    &#125;， <span class="hljs-number">200</span>)<br>  &#125;， <span class="hljs-number">600</span>)<br>&#125;， <span class="hljs-number">1000</span>)<br><br><span class="hljs-comment">// 1，2，3 可行， 但是可读性太差，如果有很多层嵌套，修改起来会非常麻烦</span><br></code></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p><code>Promise</code>是一个异步的解决方案</p><p>异步: 一件事情现在待定状态， 将来才会有结果， 结果有两种， 要么成功，要么失败</p><ul><li>在<code>Promise</code>对象的<code>then</code>和<code>catch</code>中都是异步的，除此之外，都是同步的</li><li><code>Promise</code>对象方法中，<code>then</code> 和<code>catch</code>方法本身就是异步的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve， reject</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">123</span>)           <br>    &#125;，<span class="hljs-number">1000</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p) <span class="hljs-comment">// 返回一个promise对象: Promise &#123;&lt;pending&gt;&#125;</span><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">//123</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>用promise写上面的回调函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve， reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>    &#125;， <span class="hljs-number">1000</span>)<br>&#125;)<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve， reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)<br>    &#125;， <span class="hljs-number">600</span>)<br>&#125;)<br><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve， reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>)<br>    &#125;， <span class="hljs-number">200</span>)<br>&#125;)<br><br>p1<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    <span class="hljs-keyword">return</span> p2<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    <span class="hljs-keyword">return</span> p3<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br><br><span class="hljs-comment">// 打印1，2，3</span><br></code></pre></td></tr></table></figure><p>Promise扩展方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Promise.all(Array) 接收一个数组参数，数组中所有的异步操作全部得到结果后才会调用then</span><br><span class="hljs-comment">// 如果有一个得到reject，那么该方法就调用catch</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1， p2， p3]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// [1，2，3]</span><br>&#125;)<br><br><span class="hljs-comment">// Promise.race(Array) 接收一个数组参数，只要有一个得到了结果，其他的都放弃</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([p1， p2， p3]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// 3， 3用时最短最快出来</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h3><p>异步的终极解决方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve， reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>    &#125;， <span class="hljs-number">1000</span>)<br>&#125;)<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve， reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)<br>    &#125;， <span class="hljs-number">600</span>)<br>&#125;)<br><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve， reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>)<br>    &#125;， <span class="hljs-number">200</span>)<br>&#125;)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-keyword">await</span> p1<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-keyword">await</span> p2<br>    <span class="hljs-keyword">let</span> c = <span class="hljs-keyword">await</span> p3<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// 2</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c) <span class="hljs-comment">// 3</span><br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Axios</title>
    <link href="/blog/2020/07/03/Axios/"/>
    <url>/blog/2020/07/03/Axios/</url>
    
    <content type="html"><![CDATA[<p>记录Axios请求方法</p><span id="more"></span><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><p><strong>方法一:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTodos</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">axios</span>(&#123;<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>,<br>        <span class="hljs-attr">params</span>:&#123;<br>            <span class="hljs-comment">// 限制5条数据</span><br>            <span class="hljs-attr">_limit</span>:<span class="hljs-number">5</span><br>        &#125;<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTodos</span>(<span class="hljs-params"></span>)&#123;<br>  axios<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos?_limit=5&#x27;</span>,<br>      &#123;<br>        <span class="hljs-comment">// 请求5秒钟,5秒后不请求了</span><br>        <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>      &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>)&#123;<br>  axios<br>    .<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>,<br>      &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Axios请求解析&#x27;</span><br>      &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="PUT-PATCH请求"><a href="#PUT-PATCH请求" class="headerlink" title="PUT/PATCH请求"></a>PUT/PATCH请求</h2><p><code>put</code>显示更新的数据，<code>patch</code>都会显示出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateTodo</span> () &#123;<br>  axios<br>    .<span class="hljs-title function_">patch</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos/1&#x27;</span>,<br>      &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Axios请求解析&#x27;</span>,<br>        <span class="hljs-attr">completed</span>: <span class="hljs-literal">true</span><br>      &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DELETE请求"><a href="#DELETE请求" class="headerlink" title="DELETE请求"></a>DELETE请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeTodo</span> () &#123;<br>  axios<br>    .<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos/1&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="批量请求数据"><a href="#批量请求数据" class="headerlink" title="批量请求数据"></a>批量请求数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span> () &#123;<br>  axios<br>    .<span class="hljs-title function_">all</span>([<br>      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos?_limit=5&#x27;</span>),<br>      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/posts?_limit=5&#x27;</span>)<br>    ])<br>    <span class="hljs-comment">// .then(res =&gt; showOutput(res[1]))</span><br>    <span class="hljs-comment">// 请求分发,按需返回</span><br>    .<span class="hljs-title function_">then</span>(axios.<span class="hljs-title function_">spread</span>(<span class="hljs-function">(<span class="hljs-params">todos,posts</span>) =&gt;</span> <span class="hljs-title function_">showOutput</span>(todos)))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义请求头"><a href="#自定义请求头" class="headerlink" title="自定义请求头"></a>自定义请求头</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">customHeaders</span> () &#123;<br>    <span class="hljs-keyword">const</span> config = &#123;<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json/json&#x27;</span>,<br>            <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">&#x27;sometoken&#x27;</span><br>        &#125;<br>    &#125;<br>    axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>,<br>               &#123;<br>        <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;Axios请求&#x27;</span>,<br>        <span class="hljs-attr">completed</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>     config<br>    )<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TRANSFORMING-请求-amp-响应-对响应的数据进行转换"><a href="#TRANSFORMING-请求-amp-响应-对响应的数据进行转换" class="headerlink" title="TRANSFORMING 请求 &amp; 响应 对响应的数据进行转换"></a>TRANSFORMING 请求 &amp; 响应 对响应的数据进行转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">transformResponse</span> () &#123;<br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;hello world&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">transformResponse</span>: axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">transformResponse</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>      data.<span class="hljs-property">title</span> = data.<span class="hljs-property">title</span>.<span class="hljs-title function_">toUpperCase</span>()<br>      <span class="hljs-keyword">return</span> data<br>    &#125;)<br>  &#125;<br>  <span class="hljs-title function_">axios</span>(options)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ERROR-处理"><a href="#ERROR-处理" class="headerlink" title="ERROR 处理"></a>ERROR 处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">errorHandling</span> () &#123;<br>  axios<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todoss&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err.<span class="hljs-property">response</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">response</span>.<span class="hljs-property">status</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">response</span>.<span class="hljs-property">headers</span>)<br><br>        <span class="hljs-keyword">if</span> (err.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) &#123;<br>          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;客户端请求出现问题&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (err.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">500</span>) &#123;<br>          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;服务端接口出现问题&#x27;</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CANCEL-TOKEN"><a href="#CANCEL-TOKEN" class="headerlink" title="CANCEL TOKEN"></a>CANCEL TOKEN</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">cancelToken</span> () &#123;<br><br>  <span class="hljs-keyword">const</span> source = axios.<span class="hljs-property">CancelToken</span>.<span class="hljs-title function_">source</span>()<br><br>  axios<br>    .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>,<br>      &#123;<br>        <span class="hljs-attr">cancelToken</span>: source.<span class="hljs-property">token</span><br>      &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">thrown</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (axios.<span class="hljs-title function_">isCancel</span>(thrown)) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;request canceled&#x27;</span>, thrown.<span class="hljs-property">message</span>);<br>      &#125;<br>    &#125;)<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    source.<span class="hljs-title function_">cancel</span>(<span class="hljs-string">&#x27;请求取消&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br> <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>   <span class="hljs-string">`<span class="hljs-subst">$&#123;config.method.toUpperCase()&#125;</span> request sent to</span><br><span class="hljs-string">   <span class="hljs-subst">$&#123;config.url&#125;</span> at <span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()&#125;</span>`</span><br>  )<br>  <span class="hljs-keyword">return</span> config<br> &#125;,<br> <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br> &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="响应拦截"><a href="#响应拦截" class="headerlink" title="响应拦截"></a>响应拦截</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br> <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>   <span class="hljs-string">`<span class="hljs-subst">$&#123;res.config.method.toUpperCase()&#125;</span> response sent to</span><br><span class="hljs-string">   <span class="hljs-subst">$&#123;res.config.url&#125;</span> at <span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()&#125;</span>`</span><br>  )<br>  <span class="hljs-keyword">return</span> res<br> &#125;,<br> <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br> &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="AXIOS-实例化"><a href="#AXIOS-实例化" class="headerlink" title="AXIOS 实例化"></a>AXIOS 实例化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> axiosInstance = axios.<span class="hljs-title function_">create</span>(&#123;<br> <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span><br>&#125;)<br>axiosInstance<br> <span class="hljs-comment">// .get(&#x27;/todos?_limit=5&#x27;)</span><br> .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/comments?_limit=5&#x27;</span>)<br> .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-title function_">showOutput</span>(res))<br> .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))  <br></code></pre></td></tr></table></figure><h2 id="query和params"><a href="#query和params" class="headerlink" title="query和params"></a>query和params</h2><p><strong>query</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传参</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/index&#x27;</span><br>    <span class="hljs-attr">query</span>: &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span><br>&#125;<br>&#125;)<br><br><span class="hljs-comment">// 接收</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">query</span>.<span class="hljs-property">name</span><br></code></pre></td></tr></table></figure><p><strong>params</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传参</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;路径名称&#x27;</span><br>    <span class="hljs-attr">params</span>: &#123;<br><span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;123&#x27;</span><br>&#125;<br>&#125;)<br><br><span class="hljs-comment">// 接收</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">id</span><br></code></pre></td></tr></table></figure><p><code>query</code>相当于get请求，跳转时可在地址栏看到请求参数</p><p><code>params</code>相当于post请求，参数不在地址栏里</p>]]></content>
    
    
    <categories>
      
      <category>Http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue激活菜单问题</title>
    <link href="/blog/2020/02/18/vue%E6%BF%80%E6%B4%BB%E8%8F%9C%E5%8D%95/"/>
    <url>/blog/2020/02/18/vue%E6%BF%80%E6%B4%BB%E8%8F%9C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>关于<code>Element</code>组件中导航栏<code>&lt;el-menu&gt;</code>的<code>default-active</code>属性高亮激活问题</p><span id="more"></span><p>今天遇到问题:</p><p><code> :default-active=&quot;$route.path</code>无效,发现去掉路由前面的<code>/</code>可行</p><p>所以使用计算属性将其前面的<code>/</code>截取掉了</p><p>属性描述为:</p><blockquote><p>default-active    当前激活菜单的 index</p></blockquote><p>也就是说选中菜单时,选中的选项会高亮</p><p>默认会高亮但是浏览器刷新后或者从其他方式跳转到的,没有高亮</p><p>没有多层嵌套: 在<code>&lt;el-menu&gt;</code>中加入属性:<code>:default-active=&quot;$route.path&quot;</code>即可,</p><p>有多层嵌套: 使用计算属性去掉地址中的<code>/</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;el-menu :<span class="hljs-keyword">default</span>-active=<span class="hljs-string">&quot;defaultActive&quot;</span>&gt;<br>...    <br>&lt;/el-menu&gt;<br><br>...<br><br><span class="hljs-attr">computed</span>: &#123;<br>    defaultActive () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">path</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gulp</title>
    <link href="/blog/2020/01/30/Gulp/"/>
    <url>/blog/2020/01/30/Gulp/</url>
    
    <content type="html"><![CDATA[<p>本篇记录 <code>gulp</code> 的安装和使用方法， <code>gulp</code> 是自动化构建工具，不同于 <code>webpack</code>，<br><code>webpack</code> 是基于 <code>js</code> 文件的构建工具, 而 <code>gulp</code> 是基于流的构建工具。</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.gulpjs.com.cn/docs/getting-started/quick-start/">gulp</a> 是什么?</p><ol><li><code>gulp</code> 是一个开源的 <code>JavaScript</code> 开源自动化工具</li><li><code>gulp</code> 是基于 <code>NodeJS</code> 和 <code>NPM</code> 应用的构建工具</li><li><code>gulp</code> 主要用于处理耗时及重复的任务</li><li><code>gulp</code> 可以解决上百种的任务例如：压缩代码合并代码等</li></ol><p><code>gulp</code> 能够压缩代码，合并代码，压缩图片， <code>Sass</code> 转换等等</p><p><code>gulp</code> 提供了很多<a href="https://gulpjs.com/plugins/">插件</a></p><p><code>gulp</code> 是基于流文件的构建工具，就像是工厂里的流水线一样，一层层处理。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 <code>gulp</code> 命令行工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --global gulp-cli<br></code></pre></td></tr></table></figure><p>在文件夹内安装 gulp，作为开发时依赖项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save-dev gulp<br></code></pre></td></tr></table></figure><p>利用任何文本编辑器在项目大的根目录下创建一个名为 <code>gulpfile.js</code> 的文件，并在文件中输入以下内容：</p><blockquote><p><code>gulp</code> 版本分 <code>gulp@3</code> 和 <code>gulp@4</code> 写法标准有所不同</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @3</span><br><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 在此处放置默认任务的代码</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @4</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defaultTask</span>(<span class="hljs-params">cb</span>) &#123;<br>  <span class="hljs-comment">// 在此处放置默认任务的代码</span><br>  <span class="hljs-title function_">cb</span>()<br>&#125;<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">default</span> = defaultTask<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gulp<br></code></pre></td></tr></table></figure><h2 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 API</h2><ul><li><code>gulp.task(任务名称, 任务处理函数)</code> – 创建任务</li><li><code>gulp.src(路径信息)</code> – 找到需要执行任务的文件<ul><li><code>gulp.src(&#39;./src/a.html&#39;)</code> – 找到<code>src</code>目录下指定文件</li><li><code>gulp.src(&#39;./src/*.html&#39;)</code> – 找到<code>src</code>目录下指定后缀文件</li><li><code>gulp.src(&#39;./src/**&#39;)</code> – 找到<code>src</code>目录下所有文件</li><li><code>gulp.src(&#39;./src/**/*&#39;)</code> – 找到<code>src</code>目录下所有子目录里面的所有文件</li><li><code>gulp.src(&#39;./src/**/*.html&#39;)</code> – 找到<code>src</code>目录下所有子目录里指定的后缀文件</li></ul></li><li><code>gulp.dest(路径信息)</code> – 执行任务后文件的去处</li><li><code>gulp.watch(路径信息, 任务名称)</code> – 监听文件是否发生变化，一旦变化就重新执行对应的任务</li><li><code>gulp.series(任务1, 任务2, 任务3, ...)</code> – 按顺序执行多个任务</li><li><code>gulp.parallel(任务1, 任务2, 任务3, ...)</code> – 并行执行多个任务</li><li><code>gulp.pipe(任务)</code> – 管道函数 接收左侧数据并使用任务处理然后输入到右侧<ul><li><code>gulp.src(&#39;./index.js&#39;).pipe(压缩).pipe(混淆).pipe(gulp.dest(&#39;dist&#39;))</code></li></ul></li></ul><h2 id="打包-CSS-SASS"><a href="#打包-CSS-SASS" class="headerlink" title="打包 CSS | SASS"></a>打包 CSS | SASS</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add gulp-cssmin -D<br></code></pre></td></tr></table></figure><h3 id="压缩-css"><a href="#压缩-css" class="headerlink" title="压缩 css"></a>压缩 <code>css</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><span class="hljs-keyword">const</span> cssmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-cssmin&#x27;</span>)<br><br><span class="hljs-keyword">const</span> cssMinify = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./src/assets/css/*.css&#x27;</span>).<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">cssmin</span>()).<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist/css&#x27;</span>))<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  cssMinify,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">gulp cssMinify<br><br>Using gulpfile ~\Desktop\GULP\gulpfile.js<br>Starting <span class="hljs-string">&#x27;cssMinify&#x27;</span>...<br>The following tasks did not complete: cssMinify<br>Did you forget to signal async completion?<br></code></pre></td></tr></table></figure><p>这里会有个警告，意思就是说 <code>gulp</code> 无法捕获到 <code>cssMinify</code> 任务的结束，因为 <code>gulp</code> 是流式任务 比如 <code>gulp.series(任务1, 任务2, 任务3, ...)</code> 就需要在上一个任务结束后再执行下一个任务，无法捕获到任务结束就没办法向下执行。</p><p>有两种方式解决：</p><ol><li>直接 <code>return</code> <code>gulp</code> 语句</li><li>如果任务是同步的，需要使用 <code>done</code> 回调</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><span class="hljs-keyword">const</span> cssmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-cssmin&#x27;</span>)<br><br><span class="hljs-comment">// 1</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;cssMinify&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./src/assets/css/*.css&#x27;</span>).<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">cssmin</span>()).<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist/css&#x27;</span>))<br>&#125;)<br><br><span class="hljs-comment">// 2</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;cssMinify&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) &#123;<br>  gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./src/assets/css/*.css&#x27;</span>).<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">cssmin</span>()).<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist/css&#x27;</span>))<br>  <span class="hljs-title function_">done</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="压缩-SASS"><a href="#压缩-SASS" class="headerlink" title="压缩 SASS"></a>压缩 SASS</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add gulp-cssmin gulp-autoprefixer gulp-sass node-sass -D<br></code></pre></td></tr></table></figure><p><code>gulp-autoprefixer</code> 添加兼容性前缀, 推荐写在 <code>.browserslistrc</code> 文件里,可配环境变量，由 <code>BROWSERSLIST_ENV</code> 或 <code>NODE_ENV</code> 控制，具体可查看<a href="https://github.com/browserslist/browserslist">文档</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">[production]<br>&gt;<span class="hljs-number">0.2</span>%<br>not dead<br>not op_mini <span class="hljs-keyword">all</span><br><br>[development]<br><span class="hljs-keyword">last</span> <span class="hljs-number">1</span> chrome <span class="hljs-keyword">version</span><br><span class="hljs-keyword">last</span> <span class="hljs-number">1</span> firefox <span class="hljs-keyword">version</span><br><span class="hljs-keyword">last</span> <span class="hljs-number">1</span> safari <span class="hljs-keyword">version</span><br><span class="hljs-keyword">last</span> <span class="hljs-number">1</span> ie <span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><p><code>Sass</code> 大致相同，但是需要安装 <code>node-sass</code> 这个经常安装失败，可用以下命令安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i node-sass --sass_binary_site=https://npmmirror.com/mirrors/node-sass/<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><span class="hljs-keyword">const</span> cssmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-cssmin&#x27;</span>)<br><span class="hljs-keyword">const</span> autoPrefixer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-autoprefixer&#x27;</span>)<br><span class="hljs-keyword">const</span> sass = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-sass&#x27;</span>)(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-sass&#x27;</span>))<br><br><span class="hljs-keyword">const</span> sassMinify = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp<br>    .<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./src/assets/sass/*.scss&#x27;</span>)<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">sass</span>())<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">autoPrefixer</span>())<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">cssmin</span>())<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist/scss&#x27;</span>))<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  sassMinify,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打包-js"><a href="#打包-js" class="headerlink" title="打包 js"></a>打包 js</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add gulp-uglify @babel-core @babel/preset-env -D<br></code></pre></td></tr></table></figure><p>目前 <code>gulp-uglify</code> 可以直接打包压缩 <code>ES6</code> 语法，如果有转 <code>ES5</code> 的需求<br>可用 <code>gulp-babel</code>，它有两个版本:</p><ul><li><code>gulp-babel@7</code> – 常用于 <code>gulp@3</code></li><li><code>gulp-babel@8</code> – 常用于 <code>gulp@4</code></li></ul><p>同时需要搭配另外两个包：<code>@babel-core</code> <code>@babel/preset-env</code></p><blockquote><p>跟 webpack 里的差不多 俗称 babel 三大件，不过 webpack 里的是 babel-loader</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><span class="hljs-keyword">const</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>)<br><br><span class="hljs-keyword">const</span> jsHandler = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp<br>    .<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./src/js/*.js&#x27;</span>)<br>    .<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">babel</span>(&#123;<br>        <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/env&#x27;</span>],<br>      &#125;)<br>    )<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">uglify</span>())<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist/js&#x27;</span>))<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  jsHandler,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打包-html"><a href="#打包-html" class="headerlink" title="打包 html"></a>打包 html</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add gulp-htmlmin -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><span class="hljs-keyword">const</span> htmlMin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>)<br><br><span class="hljs-keyword">const</span> htmlHandler = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp<br>    .<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./src/pages/*.html&#x27;</span>)<br>    .<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">htmlMin</span>(&#123;<br>        <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 移除空格</span><br>        <span class="hljs-attr">removeEmptyAttributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 移除空属性 限原生属性</span><br>        <span class="hljs-attr">collapseBooleanAttributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 布尔值属性简写</span><br>        <span class="hljs-attr">removeAttributeQuotes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 移除双引号</span><br>        <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 压缩内嵌 css 代码，不能自动添加前缀</span><br>        <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 压缩内嵌 js 代码， 不能转码，不能压缩es6代码</span><br>      &#125;)<br>    )<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist&#x27;</span>))<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  htmlHandler,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>需要安装<code>gulp-imagemin</code>模块</p><p>最近用 gulp 压缩微信小程序本地图片时，发现该模块有问题</p><blockquote><p>现发现该模块需要很好的网络环境，否则下载会成功，使用会失败，安装极难成功。</p></blockquote><p>如果要使用较新的版本，推荐该模块单独使用 cnpm 安装，npm 以及 yarn 安装的都不能压缩图片，会有类似如下报错：</p><blockquote><p>gulp-imagemin: Couldn’t load default plugin “gifsicle”</p></blockquote><p>cnpm 安装该模块经过测试没有问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;gulp-imagemin&quot;</span>: <span class="hljs-string">&quot;^7.1.0&quot;</span><br><span class="hljs-string">&quot;gulp&quot;</span>: <span class="hljs-string">&quot;^4.0.2&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cnpm install --save-dev gulp-imagemin<br></code></pre></td></tr></table></figure><p>使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><span class="hljs-keyword">const</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>)<br><br><span class="hljs-keyword">const</span> imagesHandler = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;src/images/*&#x27;</span>).<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">imagemin</span>()).<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist/images&#x27;</span>))<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  imagesHandler,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码合并"><a href="#代码合并" class="headerlink" title="代码合并"></a>代码合并</h2><p>需要安装<code>gulp-concat</code>模块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add gulp-concat -D<br></code></pre></td></tr></table></figure><p>合并:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><span class="hljs-keyword">const</span> concat = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-concat&#x27;</span>)<br><br><span class="hljs-keyword">const</span> concatHandler = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp<br>    .<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>)<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;main.js&#x27;</span>)) <span class="hljs-comment">// 合并后重命名</span><br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">uglify</span>()) <span class="hljs-comment">// 压缩代码</span><br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist/js&#x27;</span>))<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  concatHandler,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行多任务"><a href="#执行多任务" class="headerlink" title="执行多任务"></a>执行多任务</h2><p><code>default</code> 为默认任务名，可以直接使用 <code>gulp</code> 执行</p><p><code>series()</code> 和 <code>parallel()</code> 可以进行嵌套组合</p><p>打包前需要先清理旧文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add gulp-clean -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cleanHandle = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;dist&#x27;</span>, &#123; <span class="hljs-attr">read</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">allowEmpty</span>: <span class="hljs-literal">true</span> &#125;).<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">clean</span>())<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">default</span>: gulp.<span class="hljs-title function_">series</span>(<br>    delHandler,<br>    gulp.<span class="hljs-title function_">parallel</span>(cssMinify, sassHandler, jsHandler, htmlHandler)<br>  ),<br>&#125;<br></code></pre></td></tr></table></figure><p>输入 <code>gulp</code> 即可</p><h2 id="监听文件"><a href="#监听文件" class="headerlink" title="监听文件"></a>监听文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> watchHandler = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  gulp.<span class="hljs-title function_">watch</span>(<span class="hljs-string">&#x27;./src/assets/css/*.css&#x27;</span>, cssMinify)<br>  gulp.<span class="hljs-title function_">watch</span>(<span class="hljs-string">&#x27;./src/assets/sass/*.scss&#x27;</span>, sassHandler)<br>  gulp.<span class="hljs-title function_">watch</span>(<span class="hljs-string">&#x27;./src/js/*.js&#x27;</span>, jsHandler)<br>  gulp.<span class="hljs-title function_">watch</span>(<span class="hljs-string">&#x27;./src/pages/*.html&#x27;</span>, htmlHandler)<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">default</span>: gulp.<span class="hljs-title function_">series</span>(<br>    cleanHandle,<br>    gulp.<span class="hljs-title function_">parallel</span>(cssMinify, sassHandler, jsHandler, htmlHandler),<br>    devServer,<br>    watchHandler<br>  ),<br>&#125;<br></code></pre></td></tr></table></figure><p>运行 <code>gulp</code> 当文件发生变化并保存时，自动重新打包</p><h2 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h2><p>启动一个本地 <code>Nodejs</code> 服务器，要以打包后的文件夹（<code>dist</code>）为根目录，但是编写代码要在打包前的目录里，所以要注意资源的引用地址要以 <code>dist</code> 目录为准。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add gulp-webserver -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>)<br><span class="hljs-keyword">const</span> webserver = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-webserver&#x27;</span>)<br><br><span class="hljs-keyword">const</span> devServer = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;dist&#x27;</span>).<span class="hljs-title function_">pipe</span>(<br>    <span class="hljs-title function_">webserver</span>(&#123;<br>      <span class="hljs-attr">livereload</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 热更新</span><br>      <span class="hljs-attr">open</span>: <span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-comment">// 自动打开 布尔值或字符串</span><br>      <span class="hljs-attr">proxies</span>: [<br>        &#123;<br>          <span class="hljs-attr">source</span>: <span class="hljs-string">&#x27;/api&#x27;</span>, <span class="hljs-comment">//代理标识符</span><br>          <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;https://www.xxx.com/xxx/xxxx&#x27;</span> <span class="hljs-comment">// 代理目标地址</span><br>        &#125;<br>      ]<br>    &#125;)<br>  )<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">default</span>: gulp.<span class="hljs-title function_">series</span>(<br>    cleanHandle,<br>    gulp.<span class="hljs-title function_">parallel</span>(cssMinify, sassHandler, jsHandler, htmlHandler),<br>    devServer,<br>    watchHandler<br>  ),<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组件式开发"><a href="#组件式开发" class="headerlink" title="组件式开发"></a>组件式开发</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add gulp-file-include -D<br></code></pre></td></tr></table></figure><p>这个很有意思，可以将原生 <code>html</code> 做成类似 <code>SPA</code> 应用那种组件的形式<br>需要在在打包 <code>html</code> 的任务里配置使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> htmlHandler = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gulp<br>    .<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./src/pages/*.html&#x27;</span>,<span class="hljs-string">&#x27;./src/components/*.html&#x27;</span>)<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">fileInclude</span>(&#123;<br>      <span class="hljs-attr">prefix</span>: <span class="hljs-string">&#x27;@@&#x27;</span>, <span class="hljs-comment">// 自定义标识符</span><br>      <span class="hljs-attr">basepath</span>: <span class="hljs-string">&#x27;./src/components&#x27;</span> <span class="hljs-comment">// 组件目录</span><br>    &#125;))<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlMin</span>())<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;dist&#x27;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p><code>src</code> 下新建 <code>components</code> 目录用来放组件，比如：<code>head.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- src/components/head.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>@@title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><p>组件引用路径以上面定义的 <code>basepath</code> 为准，打包代码后会合并在一起，并且接受传参，有一定灵活度<br>这样原生开发多页面应用时可以减少很多重复代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- src/pages/home.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    @@include(&#x27;./head.html&#x27;,&#123;<br>      title: &#x27;home的标题&#x27;<br>    &#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>gulp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gulp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js</title>
    <link href="/blog/2020/01/28/vue-js/"/>
    <url>/blog/2020/01/28/vue-js/</url>
    
    <content type="html"><![CDATA[<p>本篇记录Vue.js的内容</p><span id="more"></span><h2 id="Vue初体验"><a href="#Vue初体验" class="headerlink" title="Vue初体验"></a>Vue初体验</h2><p>新建项目,引入vue.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;&#123;message&#125;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello Vue!&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Vue基础应用"><a href="#Vue基础应用" class="headerlink" title="Vue基础应用"></a>Vue基础应用</h2><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Mustache 标签将会被替代为对应数据对象上 msg 属性（msg定义在data对象中）的值。<br>无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会<strong>自动更新</strong></p><h3 id="el挂载点"><a href="#el挂载点" class="headerlink" title="el挂载点"></a>el挂载点</h3><p>el 是用来设置Vue实例挂载(管理)的元素</p><p>​    vue实例的作用范围是el选项命中的元素及其内部后代元素</p><p>​    可以使用其他的选择器, 但是建议使用id选择器, 因为它是唯一的</p><p>​    可以使用其他双标签, 但是不能使用html和body</p><h3 id="data数据对象"><a href="#data数据对象" class="headerlink" title="data数据对象"></a>data数据对象</h3><p>vue中用到的数据定义在data中, data中可以写复杂数据类型的数据, 渲染复杂类型数据时, 遵循js语法即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>分类: &#123;&#123; commodity.fruit &#125;&#125; &#123;&#123; commodity.snack &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> &#123;&#123; classification[0] &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> &#123;&#123; classification[1] &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> &#123;&#123; classification[2] &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    &lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;超市&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">commodity</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">fruit</span>: <span class="hljs-string">&#x27;水果&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">snack</span>: <span class="hljs-string">&#x27;零食&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">classification</span>: [<span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;李子&#x27;</span>, <span class="hljs-string">&#x27;香蕉&#x27;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="methods方法"><a href="#methods方法" class="headerlink" title="methods方法"></a>methods方法</h3><p>所有的函数方法是放在methods中</p><p>创建Vue示例时: el(挂载点), data(数据), methods(方法)<br>方法中通过this关键字获取data中的数据</p><h3 id="闪烁"><a href="#闪烁" class="headerlink" title="闪烁"></a>闪烁</h3><p>插值表达式存在闪动问题, 在比较卡的时候, 会先显示插值表达式再显示值, 使用<code>v-cloak</code>指令可以解决</p><p>原理: 先通过样式隐藏内容, 然后在内存中替换好值后再显示替换好的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        [v-cloak] &#123;<br>            display: none;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;div id=&quot;app&quot;&gt;<br>        &lt;div v-cloak&gt; &#123;&#123; message &#125;&#125; &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;<br><br>    &lt;script&gt;<br>        var app = new Vue(&#123;<br>            el: &#x27;#app&#x27;,<br>            data: &#123;<br>                message: &#x27;hello world&#x27;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p><code>v-text</code>指令的作用是: 设置标签的内容, 比插值表达式更简洁, 没有闪动问题<br>默认写法会替换全部内容, 使用插值表达式<code> {{}}</code>可以替换指定内容<br>插值表达式支持基本的计算操作<br>内部支持写表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message + &#x27;!&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> &#123;&#123; message + &#x27;?&#x27; &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    &lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;web前端开发&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p><code>v-html</code>指令的作用是: 设置元素的<code>innerHTML</code><br>内容中有html结构会被解析为标签<br><code>v-text</code>指令无论内容是什么, 只会解析为文本<br><code>v-text</code>存在安全问题, 本网站内部数据可以使用, 第三方数据不可用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    &lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;web前端开发&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27; &lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt; &#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p><code>v-pre</code>指令的作用是: 填充原始信息<br>显示原始信息, 跳过编译过程,写的什么就显示什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123;&#123; msg &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-pre</span>&gt;</span> &#123;&#123; msg &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    &lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p><code>v-once </code>指令的作用是: 只编译一次</p><p>显示内容之后就不再具有响应式功能, 显示的信息不需要修改时使用, 可以提高性能</p><p>响应式:</p><ol><li><p>H5中的响应式: 屏幕尺寸的变化导致样式的变化</p></li><li><p>数据响应式: 数据变化导致页面内容变化</p></li></ol><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p><code>v-on</code>指令的作用是: 为元素绑定事件</p><p>事件名不需要写on<br>指令可以简写为<code>@</code><br>绑定的方法定义在methods属性中<br>方法内部通过this关键字可以访问定义在data中的数据</p><p><code>@click</code> 点击事件</p><p><code>@dbclick</code>双击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 点击弹窗</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;v-on&quot; v-on:click=&quot;doIt&quot;&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;v-on简写&quot; @click=&quot;doIt&quot;&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;双击事件&quot; @dblclick=&quot;doIt&quot;&gt;<br>        &lt;h2 @click=&quot;changeFood&quot;&gt; &#123;&#123; food &#125;&#125; &lt;/h2&gt;<br><br>    &lt;/div&gt;<br>    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        var app = new Vue(&#123;<br>            el: &#x27;#app&#x27;,<br>            data: &#123;<br>                food: &#x27;炒饭&#x27;<br>            &#125;,<br>            methods: &#123;<br>                doIt: function() &#123;<br>                    alert(&#x27;hi&#x27;)<br>                &#125;,<br>                changeFood: function() &#123;<br>                    this.food += &#x27;真香!&#x27;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><code>v-show</code>指令的作用: 根据真假切换元素的显示状态</p><p>原理是修改元素的display来显示隐藏<br>指令后面的内容最终都会解析为布尔值<br>值为true元素显示, 为false元素隐藏<br>数据改变后对应元素会同步更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 切换图片显示隐藏</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeIsShow&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">changeIsShow</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p><code>v-if</code>指令的作用是: 根据表达式的真假切换元素的显示状态</p><p>本质是通过操纵DOM元素来切换显示状态<br>表达式值为true,元素存在Dom树中, 为false,从Dom树中移除<br>频繁的切换用v-show, 反之使用v-if, 后者切换消耗大</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 切换显示内容</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeIsShow&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>2333333<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;age&gt;=18&quot;</span>&gt;</span>6666666<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    &lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">age</span>: <span class="hljs-number">10</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">changeIsShow</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p><code>v-bind</code>指令的作用是: 为元素绑定属性</p><p>完整写法: <code>v-bind:属性名</code><br>简写可以直接省略v-bind, 只保留 <code>:属性名</code></p><p><strong>注意:</strong><br><strong>需要动态的增删class建议使用对象的方式, 而不是三元表达式</strong></p><p>对象绑定和数组绑定可以一起使用<br>class绑定的值可以简化操作, 以数组或对象的方式写到data中<br>默认的class会保留</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 点击图片切换图片外框显示隐藏</span><br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        .active &#123;<br>            border: 1px solid #f0f;<br>        &#125;<br><br>        img &#123;<br>            width: 200px;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;div id=&quot;app&quot;&gt;<br>        // 三元表达式不建议使用<br>        &lt;img v-bind:src=&quot;imgSrc&quot; :title=&quot;imgTitle&quot; :class=&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot; @click=&quot;toggleActive&quot;&gt;<br>        // 建议使用对象的方式 <br>        &lt;img :src=&quot;imgSrc&quot; :title=&quot;imgTitle&quot; :class=&quot;&#123;active:isActive&#125;&quot; @click=&quot;toggleActive&quot;&gt;<br>    &lt;/div&gt;<br>    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        var app = new Vue(&#123;<br>            el: &#x27;#app&#x27;,<br>            data: &#123;<br>                imgSrc: &#x27;./images/1.jpg&#x27;,<br>                imgTitle: &#x27;猫宫&#x27;,<br>                isActive: false<br>            &#125;,<br>            methods: &#123;<br>                toggleActive: function () &#123;<br>                    this.isActive = !this.isActive<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><code>v-for</code>指令的作用: 根据数据生成列表结构</p><p>数组经常和<code>v-for</code>结合使用<br>语法: <code>(item, index) in 数据</code><br>item和index可以结合其他指令一起使用<br>key可以帮助vue区分不同的元素, 从而提高性能<br><code>&lt;li :key=&quot;item.id&quot; v-for=&quot;(item, index) in arr&quot;&gt;</code><br>没有id属性可以换成index<br>遍历对象: <code>&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;&lt;/div&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 遍历列表</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in arr&quot;</span>&gt;</span></span><br><span class="language-xml">                &#123;&#123; index + 1 &#125;&#125; 一线城市: &#123;&#123; item &#125;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    &lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">arr</span>: [<span class="hljs-string">&#x27;北&#x27;</span>, <span class="hljs-string">&#x27;上&#x27;</span>, <span class="hljs-string">&#x27;广&#x27;</span>, <span class="hljs-string">&#x27;深&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p><code>v-model</code>指令的作用是便捷设置和获取表单元素的值</p><p>绑定的数据和表单元素的值相关联, 双向绑定<br>绑定的数据—表单元素的值,修改一个另一个会同步变化</p><p>v-model指令本质: <code>v-bind:value=&quot;msg&quot; v-on:input=&quot;msg=$event.target.value&quot; </code>监听input事件值的改变,新值覆盖旧值</p><p><strong>MVVM设计思想</strong><br><strong>M(model)数据模型 通过Data Bindings数据绑定 view</strong><br><strong>V(view)视图 通过DOM Listeners 监听model数据</strong><br><strong>VM(view-model)二者结合</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 修改文本框中的值,会同时修改显示的值</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;修改message&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setM&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;getM&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> &#123;&#123; message &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;web前端开发&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">getM</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">setM</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;Vue.js&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>事件修饰符:<br>事件绑定的方法要写成函数调用的形式, 可以传入自定义参数<br>定义方法时需要定义形参来接收传入的实参<br>事件的后面跟上 <code>.</code>修饰符可以对事件进行限制<br>按键修饰符:keyup<br><code>.enter</code>可以限制触发的按键为回车<br>事件修饰符:on<br><code>.stop</code>阻止冒泡<br><code>.prevent</code>阻止默认行为<br>自定义按键修饰符: 名字是自定义的, 值必须是<code>event.keyCode</code>里按键对应的值:<br><code>v-on:keyup.f1</code><br><code>Vue.config.keyCodes.f1 = 65</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 传值以及回车触发弹窗</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doIt(&#x27;哈哈&#x27;, 233)&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;sayHi&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">doIt</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">p1, p2</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="事件绑定-传参"><a href="#事件绑定-传参" class="headerlink" title="事件绑定-传参"></a>事件绑定-传参</h3><p>事件绑定-参数传递</p><ol><li>如果事件直接绑定函数名, 那么默认传递事件对象作为事件函数的第一个参数</li><li>如果事件绑定函数调用, 那么事件对象必须作为最后一个参数显示传递, 且事件对象名称必须是<code>$event</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;handle1&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;handle(123, $event)&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">p, event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p, event);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">innerHTML</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">handle1</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">innerHTML</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="axios基本使用"><a href="#axios基本使用" class="headerlink" title="axios基本使用"></a>axios基本使用</h3><ol><li><p>axios必须先导入才可以使用</p></li><li><p>使用get或post方法即可发送对应的请求</p></li><li><p>then方法中的回调函数会在请求成功或者失败时触发</p></li><li><p>通过回调函数的形参可以获取响应内容或错误信息</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;get请求&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;post请求&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 接口1: 随机笑话</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 请求地址: https://autumnfish.cn/api/joke/list?num=3</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 请求方法: get</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 请求参数: num(笑话条数, 数字)</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 响应内容: 随机笑话</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.get&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">           axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;https://autumnfish.cn/api/joke/list?num=3&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">               .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)</span></span><br><span class="language-javascript"><span class="language-xml">               &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)</span></span><br><span class="language-javascript"><span class="language-xml">               &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">/*</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">           接口2: 用户注册</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">           请求地址: https://autumnfish.cn/api/user/reg</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">           请求方法: post</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">           请求参数: username(用户名, 字符串)</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">           响应内容: 注册成功或失败</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">       */</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.post&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">           axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;https://autumnfish.cn/api/user/reg&quot;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;jack&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">               &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">               .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)</span></span><br><span class="language-javascript"><span class="language-xml">               &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="axios与Vue"><a href="#axios与Vue" class="headerlink" title="axios与Vue"></a>axios与Vue</h3><p>axios回调函数中的this已经改变, 无法访问data中的数据<br>把this保存起来, 回调函数中直接使用保存到this即可<br>和本地应用最大的区别就是改变了数据来源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>       <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取笑话&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getJoke&quot;</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123; joke &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-attr">joke</span>: <span class="hljs-string">&#x27;很好笑的笑话&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">           &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-attr">getJoke</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span></span></span><br><span class="language-javascript"><span class="language-xml">                   axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;https://autumnfish.cn/api/joke&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                       .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                           that.<span class="hljs-property">joke</span> = response.<span class="hljs-property">data</span></span></span><br><span class="language-javascript"><span class="language-xml">                       &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);</span></span><br><span class="language-javascript"><span class="language-xml">                       &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">               &#125;</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Vue常用特性"><a href="#Vue常用特性" class="headerlink" title="Vue常用特性"></a>Vue常用特性</h2><h3 id="表单域修饰符"><a href="#表单域修饰符" class="headerlink" title="表单域修饰符"></a>表单域修饰符</h3><p>表单域修饰符:<br>number: 转化为数值<br>trim: 去掉开始和结尾的空格<br>lazy: 将input事件切换为change事件, input事件内容更变就触发 change事件失去焦点时才触发</p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>内置指令不满足需求时, 可以自定义指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>       <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-focus</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 自定义指令, 表单中光标默认选中</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-comment">// el表示指令所绑定的元素</span></span></span><br><span class="language-javascript"><span class="language-xml">               el.<span class="hljs-title function_">focus</span>()</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// (全局)自定义指令--带参数 根据指令设置文本框背景色</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// Vue.directive(&#x27;color&#x27;, &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//     bind: function (el, binding) &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//         el.style.backgroundColor = binding.value.color</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//     &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-attr">msg</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#f00&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">               &#125;</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">           &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-comment">// (局部)自定义指令 只能在本组件中使用</span></span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">directives</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-attr">color</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-comment">// 指令的定义 设置颜色</span></span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-attr">bind</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                       el.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = binding.<span class="hljs-property">value</span>.<span class="hljs-property">color</span></span></span><br><span class="language-javascript"><span class="language-xml">                   &#125;</span></span><br><span class="language-javascript"><span class="language-xml">               &#125;</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>表达式的计算逻辑可能比较复杂, 使用计算属性可以使模板内容更加简洁<br>计算属性是基于它们的依赖的数据进行缓存的,如果数据变化,就重新计算, 否则就用之前缓存的计算结果<br>方法不存在缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 反转文字</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>       <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123;&#123; msg &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>       <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123;&#123; reverseString &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>   &lt;/div&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;一二三&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">           &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-attr">reverseString</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-comment">// 用空格分隔为数组, 反转数组, 再拼接到一起</span></span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">               &#125;</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>用于数据变化时执行异步或开销比较大的操作, 比如:</p><p>侦听器监听用户名的变化, 调用后台接口进行验证, 根据验证的结果调整提示信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> &#123;&#123; tip &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">   * 侦听器监听用户名的变化</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">   * 调用后台接口进行验证</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">   * 根据验证的结果调整提示信息</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">   */</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">tip</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">checkName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">uname</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 调用接口</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 模拟接口调用</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (uname == <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            that.<span class="hljs-property">tip</span> = <span class="hljs-string">&#x27;用户名已存在, 请更换一个&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">          &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            that.<span class="hljs-property">tip</span> = <span class="hljs-string">&#x27;用户名可以使用&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-number">500</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 侦听器</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">watch</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">uname</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 调用后台接口验证用户名的合法性</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkName</span>(val)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 修改提示信息</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">tip</span> = <span class="hljs-string">&#x27;正在验证...&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器用于格式化处理数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123;&#123; msg | upper &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123;&#123; msg | upper | lower &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!-- 先变大写再变小写 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:abc</span>=<span class="hljs-string">&quot; msg | upper&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 全局过滤器 将首字母变为大写</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// Vue.filter(&#x27;upper&#x27;, function (val) &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//     // 截取第一个变大写 + 返回从第二个截取</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//     return val.charAt(0).toUpperCase() + val.slice(1)</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 全局过滤器 将首字母变小写</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;lower&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 截取第一个变小写 + 返回从第二个截取</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> val.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toLowerCase</span>() + val.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 局部过滤器 首字母变大写</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">filters</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">upper</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> val.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + val.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="带属性的过滤器"><a href="#带属性的过滤器" class="headerlink" title="带属性的过滤器"></a>带属性的过滤器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123;&#123; date | format(&#x27;yyyy-MM-dd&#x27;) &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 格式化日期 value接收值 arg接收规则</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;format&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">value, arg</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (arg == <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">var</span> ret = <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">                ret += value.<span class="hljs-title function_">getFullYear</span>() + <span class="hljs-string">&#x27;-&#x27;</span> + (value.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;-&#x27;</span> + value.<span class="hljs-title function_">getDate</span>()</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">return</span> ret</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> value</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">date</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="修改响应式数据"><a href="#修改响应式数据" class="headerlink" title="修改响应式数据"></a>修改响应式数据</h3><p>修改响应式数据:<br><code>Vue.set(vm.items, indexOfItem, newValue)</code><br><code>vm.$set(vm.items, indexOfItem, newValue)</code><br>参数一: 要处理的数组名称<br>参数二: 要处理的数组的索引<br>参数三: 要处理的数组的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;info.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;info.gender&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">list</span>: [<span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;香蕉&#x27;</span>, <span class="hljs-string">&#x27;梨子&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">info</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">age</span>: <span class="hljs-number">10</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 结果一样, 只是语法不同</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(app.<span class="hljs-property">list</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;橙子&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    app.$set(app.<span class="hljs-property">list</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;橘子&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    app.$set(app.<span class="hljs-property">info</span>, <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/01/29/u3oi6hjOWX9f7mN.png" alt="例子"></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>初始化显示 执行1次</p><ol><li><code>beforeCreate</code>在实例初始化之后，数据观测和事件配置之前被调用。</li><li><code>created</code>在实例创建完成后被立即调用。</li><li><code>beforeMount</code>在挂载开始之前被调用。</li><li><code>mounted el</code>被新创建的<code>vm.$el</code>替换，并挂载至实例上去之后调用该钩子。</li></ol><p>更新显示 执行n次</p><ol><li><code>beforeUpdate</code>数据更新时调用，发生在虚拟DOM打补丁之前。</li><li><code>updated</code>由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子</li></ol><p>销毁Vue实例 <code>vm.$destroy()</code></p><ol><li><code>beforeDestroy</code>实例销毁之前调用</li><li><code>destroyed</code>实例销毁后调用。</li></ol><h3 id="常用生命周期方法"><a href="#常用生命周期方法" class="headerlink" title="常用生命周期方法"></a>常用生命周期方法</h3><p><code>created()</code>  <code>mounted()</code> 发送ajax请求, 启动定时器等异步任务<br><code>beforeDestroy()</code> 做收尾工作, 比如清除定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 点击停止文字闪烁</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>       <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;destroyVM&quot;</span>&gt;</span>点击停止<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>       <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>闪烁文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>   &lt;/div&gt;<br><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">           &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123; </span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-comment">// 初始化显示后立即调用</span></span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalId</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span></span></span><br><span class="language-javascript"><span class="language-xml">               &#125;, <span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-comment">// 清除定时器防止内存泄漏</span></span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalId</span>)</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-title function_">destroyVM</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-variable language_">this</span>.$destroy()</span></span><br><span class="language-javascript"><span class="language-xml">               &#125;</span></span><br><span class="language-javascript"><span class="language-xml">           &#125;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h3 id="全局组件注册"><a href="#全局组件注册" class="headerlink" title="全局组件注册"></a>全局组件注册</h3><p>组件可复用, 每个子组件之间数据独立<br>组件data必须是个函数<br>组件模板内容必须是单个根元素, 根元素不能有兄弟<br>组件模板内容可以是模板字符串``(需要浏览器支持)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 组件名称, 驼峰式命名只能在字符串模板中使用组件, 普通标签模板中, 必须使用短横线的方式(名称)使用组件</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 组件数据</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 组件模板内容</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += <span class="hljs-number">2</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            </span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="局部组件注册"><a href="#局部组件注册" class="headerlink" title="局部组件注册"></a>局部组件注册</h3><p>局部组件只能在注册它的父组件中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hello-world</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello-world</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hello-tom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello-tom</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hello-jerry</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello-jerry</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> <span class="hljs-title class_">HelloWorld</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> <span class="hljs-title class_">HelloTom</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;HelloTom&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> <span class="hljs-title class_">HelloJerry</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;HelloJerry&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&#x27;hello-world&#x27;</span>: <span class="hljs-title class_">HelloWorld</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&#x27;hello-tom&#x27;</span>: <span class="hljs-title class_">HelloTom</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&#x27;hello-jerry&#x27;</span>: <span class="hljs-title class_">HelloJerry</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="组件间数据交互"><a href="#组件间数据交互" class="headerlink" title="组件间数据交互"></a>组件间数据交互</h3><p>组件内部通过<code>props</code>接收传递过来的值<br>父组件通过属性将值传递给子组件<br><code>props</code>中使用驼峰形式, 模板中需要使用短横线的形式(接收是驼峰, 但是传递是短横线)<br>字符串形式的模板中没有这个限制<br><code>props</code>属性值类型: 字符串,数字,布尔,数组,对象<br>传数字或布尔值时,加上<code>:(v-bind)</code>是数字型或布尔型,不加是字符串型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;来自父组件的值&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br>    &lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;menu-item&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;子组件本身的数据&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;div&gt; &#123;&#123; msg + &quot;---&quot; + title + &quot;---&quot; + content&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">pmsg</span>:<span class="hljs-string">&#x27;父组件中的内容&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;动态绑定的值&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p><code>props</code>单向数据流: 只允许父组件向子组件传递数据, 子组件不能直接操作<code>props</code>中的数据</p><p>子组件通过自定义事件向父组件传递信息:<br><code>&lt;button @click=&quot;$emit(&#39;enlarge-text&#39;)&quot;&gt;扩大父组件中的字体&lt;/button&gt;</code><br>父组件监听子组件的事件:<br><code>&lt;menu-item :parr=&quot;parr&quot; @enlarge-text=&quot;handle&quot;&gt;&lt;/menu-item&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>         <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;fontSize: fontSize + &#x27;px&#x27;&#125;&quot;</span>&gt;</span> &#123;&#123; pmsg &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>         &lt;!-- 传值固定写法: $event --&gt;<br>         <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:parr</span>=<span class="hljs-string">&quot;parr&quot;</span> @<span class="hljs-attr">enlarge-text</span>=<span class="hljs-string">&quot;handle($event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br>     &lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    Vue.component(&#x27;menu-item&#x27;, &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        props:[&#x27;parr&#x27;],</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template: `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in parr&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;parr.push(&#x27;lemon&#x27;)&quot;</span>&gt;</span>点击新增<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;enlarge-text&#x27;, 10)&quot;</span>&gt;</span>扩大父组件中的字体<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    var app = new Vue(&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        el: &#x27;#app&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        data: &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            pmsg: &#x27;父组件中的内容&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            parr: [&#x27;苹果&#x27;, &#x27;橘子&#x27;, &#x27;香蕉&#x27;],</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            fontSize: 10</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        methods: &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            handle: function(val) &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                this.fontSize += val</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="非父子组件传值"><a href="#非父子组件传值" class="headerlink" title="非父子组件传值"></a>非父子组件传值</h3><p>兄弟组件之间数据传递<br>通过单独的事件中心来通信</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 兄弟组件互相传值  </span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">test-tom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test-tom</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">test-jerry</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test-jerry</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handle&quot;</span>&gt;</span>事件销毁<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 事件中心</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> hub = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;test-tom&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">num</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;div&gt;TOM: &#123;&#123; num &#125;&#125;&lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">                &lt;button @click=&quot;handle&quot;&gt;点击&lt;/button&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        `</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 触发兄弟组件的事件  传值</span></span></span><br><span class="language-javascript"><span class="language-xml">          hub.$emit(<span class="hljs-string">&#x27;jerry-event&#x27;</span>, <span class="hljs-number">2</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 监听事件</span></span></span><br><span class="language-javascript"><span class="language-xml">        hub.$on(<span class="hljs-string">&#x27;tom-event&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> += val</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;test-jerry&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">num</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;div&gt;Jerry: &#123;&#123; num &#125;&#125;&lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">                &lt;button @click=&quot;handle&quot;&gt;点击&lt;/button&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        `</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 触发兄弟组件的事件  传值</span></span></span><br><span class="language-javascript"><span class="language-xml">          hub.$emit(<span class="hljs-string">&#x27;tom-event&#x27;</span>, <span class="hljs-number">1</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 监听事件</span></span></span><br><span class="language-javascript"><span class="language-xml">        hub.$on(<span class="hljs-string">&#x27;jerry-event&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> += val</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 销毁事件</span></span></span><br><span class="language-javascript"><span class="language-xml">          hub.$off(<span class="hljs-string">&#x27;tom-event&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">          hub.$off(<span class="hljs-string">&#x27;jerry-event&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><p>用的是同一个模板, 插槽内容为空, 显示模板默认内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;!-- 插槽内容 --&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span>有bug<span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span>有一个警告<span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br>    &lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 组件插槽 插槽位置</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;alert-box&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;strong&gt;ERROR:&lt;/strong&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;slot&gt;默认内容&lt;/slot&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        `</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            </span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/01/29/c1h8wYdOL4CVrZm.png" alt="例图"></p><h3 id="具名的插槽"><a href="#具名的插槽" class="headerlink" title="具名的插槽"></a>具名的插槽</h3><p>具名插槽: 在模板中定义多个插槽,并命名, 还有一个默认不带名字的插槽,<br>使用的时候根据名称匹配, 没有匹配的就给默认的插槽.  名称标注在标签中只能标注一个<br>如果要使用多个标签用<code>template</code>(固定写法)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>底部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>-------------<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- template临时性包裹内容 --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>底部1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>底部2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span></span><br>    &lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    // 具名插槽</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    Vue.component(&#x27;base-layout&#x27;, &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template:`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    var app = new Vue(&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        el: &#x27;#app&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        data: &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            </span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>父组件对子组件的内容进行加工处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style type=&quot;text/css&quot;&gt;<br>        .current &#123;<br>            color: #f00;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;!-- <br>            父组件对子组件的内容进行加工处理 <br>     --&gt;<br>    &lt;div id=&quot;app&quot;&gt;<br>        &lt;fruit-list :list=&quot;list&quot;&gt;<br>            &lt;template slot-scope=&quot;slotProps&quot;&gt;<br>                &lt;strong v-if=&quot;slotProps.info.id==num&quot; class=&quot;current&quot;&gt;&#123;&#123; slotProps.info.name &#125;&#125;&lt;/strong&gt;<br>                &lt;span v-else&gt;&#123;&#123; slotProps.info.name &#125;&#125;&lt;/span&gt;<br>            &lt;/template&gt;<br>        &lt;/fruit-list&gt;<br>        &lt;input type=&quot;text&quot; v-model=&quot;num&quot;&gt;<br>    &lt;/div&gt;<br>    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        Vue.component(&#x27;fruit-list&#x27;, &#123;<br>            props: [&#x27;list&#x27;],<br>            template: `<br>        &lt;div&gt;<br>            &lt;li :key=&quot;item.id&quot; v-for=&quot;item in list&quot;&gt;<br>                &lt;slot :info=&quot;item&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/slot&gt;<br>            &lt;/li&gt;<br>        &lt;/div&gt;<br>        `<br>        &#125;)<br>        var app = new Vue(&#123;<br>            el: &#x27;#app&#x27;,<br>            data: &#123;<br>                num: &#x27;&#x27;,<br>                list: [&#123;<br>                    id: 1,<br>                    name: &#x27;苹果&#x27;<br>                &#125;, &#123;<br>                    id: 2,<br>                    name: &#x27;梨子&#x27;<br>                &#125;, &#123;<br>                    id: 3,<br>                    name: &#x27;香蕉&#x27;<br>                &#125;]<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/01/29/SbN5O4lRBG6tCmW.png" alt="例图"></p><h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>promise基本用法:<br>实例化promise对象, 构造函数中传递函数, 该函数用于处理异步任务<br><code>resolve</code>和<code>reject</code>两个参数用于处理成功和失败两种情况,并通过<code>p.then</code>获取处理结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>        <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>            <span class="hljs-comment">// 异步任务</span><br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">if</span> (flag) &#123;<br>                    <span class="hljs-comment">// 正常情况</span><br>                    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 异常情况</span><br>                    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>)<br>                &#125;<br>            &#125;, <span class="hljs-number">100</span>)<br>        &#125;)<br>        p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br><br>        &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">info</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info);<br><br>        &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="promise常用API"><a href="#promise常用API" class="headerlink" title="promise常用API"></a>promise常用API</h3><p><code>p.then()</code>得到异步任务的正确结果<br><code>p.catch()</code>获取异常信息<br><code>p.finally()</code>成功与否都会执行(非正式标准)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-comment">// resolve(123)</span><br>                    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>                &#125;, <span class="hljs-number">100</span>)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-title function_">foo</span>()<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br><br>            &#125;)<br>            .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br><br>            &#125;)<br>            .<span class="hljs-title function_">finally</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;finished&#x27;</span>);<br><br>            &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>promise常用API对象方法</strong></p><p><code>Promise.all()</code>并发处理多个异步任务, 所有的任务执行完成才能得到结果<br><code>Promise.race()</code>并发处理多个异步任务, 只要有一个任务完成就能的到结果</p><h3 id="fetch接口调用"><a href="#fetch接口调用" class="headerlink" title="fetch接口调用"></a>fetch接口调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:3000/fdata&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">// text()方法属于fetchAPI的一部分, 它返回一个promise实例对象, 用于获取后台返回的数据</span><br>            <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">text</span>()<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">// 这里得到最终数据</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>        &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="fetch请求参数"><a href="#fetch请求参数" class="headerlink" title="fetch请求参数"></a>fetch请求参数</h3><p>传统URL传参:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/abc&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>fetch传参:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/abc?id=123&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">text</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ret</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret)<br>&#125;)<br></code></pre></td></tr></table></figure><p>Restful形式的URL传递参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/abc/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>            res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>fetch传参:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/abc/123&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">text</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ret</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret)<br>&#125;)<br></code></pre></td></tr></table></figure><p>DELETE形式的URL传递参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;/abc/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>fetch传参:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/abc/123&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">text</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ret</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret)<br>&#125;)<br></code></pre></td></tr></table></figure><p>post形式的URL传递参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/abc&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">uname</span>+req.<span class="hljs-property">body</span>.<span class="hljs-property">pwd</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>fetch传参:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/abc&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-comment">// body: &#x27;uname=lis&amp;pwd=123&#x27;, 2种方式</span><br>    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>        <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>        <span class="hljs-attr">pwd</span>: <span class="hljs-string">&#x27;233&#x27;</span><br>    &#125;),<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-comment">// &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;</span><br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">text</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ret</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>&#125;)<br></code></pre></td></tr></table></figure><p>put形式的URL传递参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;/abc/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">uname</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">pwd</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>fetch传参:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/abc&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;put&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>        <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>        <span class="hljs-attr">pwd</span>: <span class="hljs-string">&#x27;233&#x27;</span><br>    &#125;),<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">text</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ret</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="fetch响应结果"><a href="#fetch响应结果" class="headerlink" title="fetch响应结果"></a>fetch响应结果</h3><p>响应数据格式:<br><code>text()</code>: 将返回结果处理成字符串类型<br><code>json()</code>: 返回结果和<code>JSON.parse(responseText)</code>一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        app.get(&#x27;/json&#x27;, (req,res) =&gt; &#123;</span><br><span class="hljs-comment">            res.json(&#123;</span><br><span class="hljs-comment">                uname: &#x27;lis&#x27;,</span><br><span class="hljs-comment">                age: 12,</span><br><span class="hljs-comment">                gender: &#x27;male&#x27;</span><br><span class="hljs-comment">            &#125;)</span><br><span class="hljs-comment">        &#125;)</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:3000/json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-comment">// return data.json() // json更简洁</span><br>        <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">text</span>()<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-comment">// console.log(data.uname);</span><br>        <span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data) <span class="hljs-comment">// 是字符串, 必须转为对象才能使用</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">uname</span>, obj.<span class="hljs-property">age</span>, obj.<span class="hljs-property">gender</span>);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h3><p><code>async/await</code>是ES7引入的新语法, 用于异步操作<br><code>async</code>关键字用于函数上(async函数的返回值是Promise实例对象)<br><code>await</code>关键字用英语async函数中(await可以得到异步的结果)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-comment">// 单个请求</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">queryData</span>(<span class="hljs-params">id</span>) &#123;<br>        <span class="hljs-keyword">const</span> ret = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/data&#x27;</span>)<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br>    queryData.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ret</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>    &#125;)<br>    <span class="hljs-comment">// 多个请求</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">queryData</span>(<span class="hljs-params">id</span>) &#123;<br>        <span class="hljs-keyword">const</span> info = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/async1&#x27;</span>)<br>        <span class="hljs-keyword">const</span> ret = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/async2?info=&#x27;</span> + info.<span class="hljs-property">data</span>)<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br>    queryData.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ret</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="路由基本概念与原理"><a href="#路由基本概念与原理" class="headerlink" title="路由基本概念与原理"></a>路由基本概念与原理</h3><h3 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h3><p>概念: 根据不同的用户URL请求, 返回不同的内容<br>本质: URL请求地址与服务器资源之间的对应关系</p><h3 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h3><p>SPA（ Single Page Application）</p><ul><li>后端渲染（存在性能问题）</li><li>Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）</li><li>SPA（ Single Page Application）单页面应用程序：整个网站只有一个页面，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作</li><li>SPA实现原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求）</li><li>在实现SPA过程中，最核心的技术点就是前端路由</li></ul><h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p>概念: 根据不同的用户事件, 显示不同的页面内容<br>本质: 用户事件与事件处理函数之间的对应关系</p><h3 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 导入路由文件 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.1.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;User 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Register</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 创建路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 所有路由规则</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">routes</span>: [&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/user&#x27;</span> <span class="hljs-comment">// 路由重定向</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            ]</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 创建 vm 实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 指定控制的区域</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 挂载路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// router: router 缩写 router</span></span></span><br><span class="language-javascript"><span class="language-xml">            router</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>Register中嵌套两个路由: Tab1,Tab2</p><p>使用<code>children</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const User = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>User 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const Register = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Register 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-comment">&lt;!-- 子路由链接 --&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register/tab1&quot;</span>&gt;</span>Tab1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register/tab2&quot;</span>&gt;</span>Tab2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const Tab1 = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tab1 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>&#x27;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const Tab2 = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tab2 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>&#x27;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const router = new VueRouter(&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        routes: [&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            path: &#x27;/&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            redirect: &#x27;/user&#x27;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            path: &#x27;/user&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            component: User</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            path: &#x27;/register&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            component: Register,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            children: [&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                path: &#x27;/register/tab1&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                component: Tab1</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;, &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                path: &#x27;/register/tab2&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                component: Tab2</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;]</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;]</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    // 创建 vm 实例对象</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const vm = new Vue(&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 指定控制的区域</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        el: &#x27;#app&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        data: &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        router</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user1&quot;</span>&gt;</span>User1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user2&quot;</span>&gt;</span>User2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user3&quot;</span>&gt;</span>User3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    &lt;!-- 路由占位符 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123; $route.params.id &#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Register</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 创建路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 所有路由规则</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">routes</span>: [&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/user&#x27;</span> <span class="hljs-comment">// 路由重定向</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user:id&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        ]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 创建 vm 实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 指定控制的区域</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 挂载路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// router: router</span></span></span><br><span class="language-javascript"><span class="language-xml">        router</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user1&quot;</span>&gt;</span>User1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user2&quot;</span>&gt;</span>User2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user3&quot;</span>&gt;</span>User3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    &lt;!-- 路由占位符 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 三种传参方式 ,第二种跟第三种区别在于传id</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1 props: [&#x27;id&#x27;],</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1 template: &#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123; id &#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123; id &#125;&#125; 姓名: &#123;&#123;uname&#125;&#125; 年龄: &#123;&#123;age&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Register</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 创建路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 所有路由规则</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">routes</span>: [&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/user&#x27;</span> <span class="hljs-comment">// 路由重定向</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user:id&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 1 props: true</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 2 props: &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">//     uname: &#x27;lisi&#x27;,</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">//     age: 12</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">props</span>: <span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> (&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">age</span>: <span class="hljs-number">13</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        ]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 创建 vm 实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 指定控制的区域</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 挂载路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// router: router</span></span></span><br><span class="language-javascript"><span class="language-xml">        router</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user1&quot;</span>&gt;</span>User1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user2&quot;</span>&gt;</span>User2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name: &#x27;user&#x27;,params: &#123;id: 3&#125; &#125;&quot;</span>&gt;</span>User3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    &lt;!-- 路由占位符 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123; id &#125;&#125; 姓名: &#123;&#123;uname&#125;&#125; 年龄: &#123;&#123;age&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Register</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 创建路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 所有路由规则</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">routes</span>: [&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/user&#x27;</span> <span class="hljs-comment">// 路由重定向</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 命名路由</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user:id&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">props</span>: <span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> (&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        ]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 创建 vm 实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 指定控制的区域</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 挂载路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// router: router</span></span></span><br><span class="language-javascript"><span class="language-xml">        router</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>声明式导航: 通过点击链接实现导航的方式, 如<code>&lt;a&gt; </code>或<code>&lt;router-link&gt;</code><br>编程式导航: 通过调用JavaScript形式的API实现导航</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user1&quot;</span>&gt;</span>User1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user2&quot;</span>&gt;</span>User2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name: &#x27;user&#x27;,params: &#123;id: 3&#125; &#125;&quot;</span>&gt;</span>User3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>    &lt;!-- 路由占位符 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">                &lt;h1&gt;User 组件 -- 用户id为: &#123;&#123; id &#125;&#125; 姓名: &#123;&#123;uname&#125;&#125; 年龄: &#123;&#123;age&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">                &lt;button @click=&quot;goRegister&quot;&gt;跳转&lt;/button&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;/div&gt;`</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">goRegister</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/register&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Register</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">                &lt;h1&gt;Register 组件&lt;/h1&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">                &lt;button @click=&quot;goBack&quot;&gt;后退&lt;/button&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">            &lt;/div&gt;`</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">goBack</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 创建路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 所有路由规则</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">routes</span>: [&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/user1&#x27;</span> <span class="hljs-comment">// 路由重定向</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 命名路由</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user:id&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">props</span>: <span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> (&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">id</span>: route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">component</span>: <span class="hljs-title class_">Register</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        ]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 创建 vm 实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 指定控制的区域</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">data</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 挂载路由实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// router: router</span></span></span><br><span class="language-javascript"><span class="language-xml">        router</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><p>前端工程化也叫模块化, 传统开发模式的主要问题有两个:</p><ol><li>命名冲突</li><li>文件依赖</li></ol><p>通过模块化可以解决这两个问题</p><p><strong>模块化</strong>就是把单独的功能封装到一个模块中,模块之间相互隔离, 但是可以通过特定的接口公开内部成员,也可以依赖别的模块, 这样方便了代码的重用,从而提升开发效率,也方便后期维护</p><p>浏览器端模块化规范:</p><ol><li>AMD</li><li>CMD</li></ol><p>服务器端模块化规范:</p><p>CommonJS</p><ul><li>模块分为单文件模块和包</li><li>模块成员导出: <code>module.exports</code>和<code>exports</code></li><li>模块成员导出: <code>require(&#39;模块标识符&#39;)</code></li></ul><p><strong>统一的ES6模块化规范:</strong></p><ul><li>每个js文件都是独立的模块</li><li>导入模块成员使用<code>import</code>关键字</li><li>暴露模块成员使用<code>export</code>关键字</li></ul><p>默认导出语法 <code>export default</code> 默认导出的成员<br>默认导入语法 <code>import</code> 接受名称 <code>from &#39;模块标识符&#39;</code><br>注意: 每个模块中, 只允许使用唯一的次 <code>export default</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">20</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-number">30</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br><br>&#125;<br><br><span class="hljs-comment">// 将本模块中的私有成员暴露出去, 供其他模块使用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    a,<br>    b,<br>    show<br>&#125;<br><br><span class="hljs-comment">// 按需导出变量 (可以导出多次)</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> s1 = <span class="hljs-string">&#x27;aaa&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> s2 = <span class="hljs-string">&#x27;ccc&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>按需导出语法<code>export let s1 = 10</code></p><p>按需导入语法<code>import &#123;s1&#125; from &#39;模块标识符&#39;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 导入模块(按需导入用&#123;&#125;)</span><br><span class="hljs-comment">// as: 取别名</span><br><br><span class="hljs-keyword">import</span> m1, &#123;<br>    s1,<br>    s2 <span class="hljs-keyword">as</span> ss2,<br>    say<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mi.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ss2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(say);<br></code></pre></td></tr></table></figure><p>单纯执行某个模块中的代码,并不需要得到模块中向外暴露的成员可以直接导入并执行模块代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./m2.js&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>Vuex概述 Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享</p><p>使用Vuex管理数据的好处：</p><ul><li><p>能够在vuex中集中管理共享的数据，便于开发和后期进行维护 </p></li><li><p>能够高效的实现组件之间的数据共享，提高开发效率 </p></li><li><p>存储在vuex中的数据是响应式的，当数据发生改变时，页面中的数据也会同步更新</p></li></ul><h3 id="Vuex的基本使用"><a href="#Vuex的基本使用" class="headerlink" title="Vuex的基本使用"></a>Vuex的基本使用</h3><p>安装vuex依赖包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm i vuex --save<br></code></pre></td></tr></table></figure><p>导入vuex包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">ues</span>(<span class="hljs-title class_">Vuex</span>)<br></code></pre></td></tr></table></figure><p>创建store对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br><span class="hljs-comment">// state 中存放的就是全局共享的数据</span><br><span class="hljs-attr">state</span>: &#123;<span class="hljs-attr">count</span>: <span class="hljs-number">0</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>将store对象挂载到vue实例中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span><br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(app),<br>    router,<br>    <span class="hljs-comment">// 将创建的共享数据对象,, 挂载到Vue实例中</span><br>    <span class="hljs-comment">// 所有的组件就可以直接从store中华获取全局的数据了</span><br>    store<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Vuex的核心概念"><a href="#Vuex的核心概念" class="headerlink" title="Vuex的核心概念"></a>Vuex的核心概念</h3><p>Vuex中主要核心概念如下:</p><ul><li>State</li><li>Mutation</li><li>Action</li><li>Getter</li></ul><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>State提供唯一的公共数据源, 所有共享的数据都要统一放到Store的State中存储</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 创建store数据源, 提供唯一的公共数据</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br><span class="hljs-attr">state</span>: &#123;<span class="hljs-attr">count</span>: <span class="hljs-number">0</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>组件访问State中数据的第一种方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.全局数据名称<br></code></pre></td></tr></table></figure><p>组件访问State中数据的第二种方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.从vuex中按需导入mapState函数</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure><p>通过刚才的导入mapState函数,将当前组件需要的全局数据,映射为当前组件的computed计算属性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 2.将全局数据,映射为当前组件的计算属性</span><br><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>Mutation用于变更Store中的数据</p><ul><li>只能通过mutation变更Store数据, 不可以直接操作Store中的数据</li><li>通过这种方式虽然操作繁琐些, 但是可以集中监控所有的数据变化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义Mutation</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">stste</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>     <span class="hljs-comment">// 更变状态</span><br>            state.<span class="hljs-property">count</span>++<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 触发mutation</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">handle1</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 触发mutations的第一种方式</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commite</span>(<span class="hljs-string">&#x27;add&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可在触发mutations时传递参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义Mutation</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">stste</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">addN</span>(<span class="hljs-params">state, step</span>) &#123;<br>     <span class="hljs-comment">// 更变状态</span><br>            state.<span class="hljs-property">count</span> += step<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 触发mutation</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">handle2</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 在调用commit函数,</span><br>        <span class="hljs-comment">// 触发mutations时携带的参数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commite</span>(<span class="hljs-string">&#x27;addN&#x27;</span>, <span class="hljs-number">3</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.$store.commit()</code>是触发mutations的第一种方式, 触发mutations的第二种方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 1.从vuex中按需导入mapMutations函数</span><br><span class="hljs-keyword">import</span> &#123; mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure><p>通过刚才导入的mapMutations函数, 将需要的mutations函数, 映射为当前组件的methods方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 2.将指定的mutations函数, 映射为当前的组件的methods函数</span><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-string">&#x27;addN&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action用于处理异步任务</p><p>如同通过异步操作更变数据,必须通过Action, 而不能使用Mutation, 但是在Action中还是要通过触发Mutation的方式间接变更数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义Action</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">stste</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">count</span>++<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-title function_">addAsync</span>(<span class="hljs-params">context</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;add&#x27;</span>)<br>            &#125;, <span class="hljs-number">1000</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 触发Action</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">handle</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 触发 actions的第一种方式</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;addAsync&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>触发actions异步任务时携带参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义Action</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">stste</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">addN</span>(<span class="hljs-params">state, step</span>) &#123;<br>            state.<span class="hljs-property">count</span> += step<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-title function_">addAsync</span>(<span class="hljs-params">context, step</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addN&#x27;</span>, step)<br>            &#125;, <span class="hljs-number">1000</span>)<br>        &#125;<br>    &#125;<br>    <br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 触发Action</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">handle</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 在调用dispatch函数,</span><br>        <span class="hljs-comment">// 触发 actions时携带参数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;addNAsync&#x27;</span>, <span class="hljs-number">5</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.$store.dispatch()</code>是触发actions的第一种方式, 触发actions的第二种方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 1.从vuex中按需导入mapActions函数</span><br><span class="hljs-keyword">import</span> &#123; mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure><p>通过刚才导入的mapActions函数, 将需要的Actions函数, 映射为当前组件的methods方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 2.将指定的Actions函数, 映射为当前的组件的methods函数</span><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;addAsync&#x27;</span>, <span class="hljs-string">&#x27;addNAsync&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>Getter用于对Store中数据进行加工形成新的数据</p><ul><li>Getter可以对Store中已有的数据加工处理之后形成新的数据, 类似Vue的计算属性</li><li>Store中数据发生变化, Getter的数据也会跟着发生变化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义Getter</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">stste</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-attr">showNum</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;当前最最新的数量时[&#x27;</span>+ state.<span class="hljs-property">count</span> + <span class="hljs-string">&#x27;]&#x27;</span><br>        &#125;<br>    &#125;<br>    <br>&#125;)<br></code></pre></td></tr></table></figure><p>使用getters的第一种方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.名称<br></code></pre></td></tr></table></figure><p>使用getters的第二种方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-string">`import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">computed: &#123;</span><br><span class="hljs-string">...mapGetters([&#x27;showNum&#x27;])</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Vue-cli-脚手架"><a href="#Vue-cli-脚手架" class="headerlink" title="Vue-cli 脚手架"></a>Vue-cli 脚手架</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>vue 脚手架用于快速生成 Vue 项目基础架构</p><p>安装: <code>npm i -g @vue/cli</code></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ol><li>基于<strong>交互式命令行</strong>的方式, 创建新版 vue 项目<br><code>vue create my-project</code></li><li>基于<strong>图形化界面</strong>的方式, 创建新版 vue 项目<br><code>vue ui</code></li><li>基于<strong>2.x旧的模板</strong>, 创建旧版 vue 项目<br><code>npm i -g @vue/cli-init</code><br><code>vue init webpack my-project</code></li></ol><h3 id="脚手架的自定义设置"><a href="#脚手架的自定义设置" class="headerlink" title="脚手架的自定义设置"></a>脚手架的自定义设置</h3><p>一、通过 package.json 配置项目</p><p>配置端口号和打包完成后自动打开浏览器, 输入 <code>npm run serve</code> 命令运行项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-string">&quot;vue&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;devServer&quot;</span>: &#123;<br>    <span class="hljs-comment">// 自动打开浏览器</span><br>    <span class="hljs-string">&quot;open&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;8888&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：不推荐使用这种配置方式。因为 package.json主要用来管理包的配置信息；为了方便维护，推荐将vue脚手架相关的配置，单独定义到 vue.config.js配置文件中。</p><p>二、通过单独的配置文件配置项目</p><ul><li>在项目的根目录创建文件 vue.config.js</li><li>在该文件中进行相关的配置, 从而覆盖默认配置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 自动打开浏览器</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8888</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2种方法只能用一种, 推荐第二种</p><h3 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element-UI"></a>Element-UI</h3><p>Element-UI: 一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p><p><a href="https://element.eleme.cn/#/zh-CN">官网</a></p><p>安装依赖包: <code>npm i element-ui -S</code></p><p>在main.js中导入资源:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 导入组件库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-comment">// 导入组件相关样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="hljs-comment">// 配置 Vue 插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>)<br></code></pre></td></tr></table></figure><p>基于图形化界面自动安装</p><ul><li>运行 vue ui命令，打开图形化界面</li><li>通过vue项目管理器，进入具体的项目配置面板</li><li>点击插件-&gt;添加插件，进入插件查询面板</li><li>搜索<code>vue-c1i-plugin-element</code>并安装</li><li>配置插件，实现按需导入，从而减少打包后项目的体积</li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js</title>
    <link href="/blog/2019/11/17/node-js/"/>
    <url>/blog/2019/11/17/node-js/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Node.js就是运行在服务端的JavaScript(没有BOM, DOM), 是一个环境(平台)  Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎 , 由V8引擎解析. node是单线程的, </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在Node.js 的<a href="https://nodejs.org/en/">官网</a>下载安装包, 直接安装</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p> NPM是随同NodeJS一起安装的包管理工具 </p><p>npm命令行<br>npm的第二层含义就是一个命令行工具，只要你安装了node就已经安装了npm.<br>npm也有版本这个概念。</p><p>可以通过在命令行中输入查看版本：</p><p><code>npm --version</code></p><p>升级npm:</p><p><code>npm install --global npm</code></p><p>常用命令:</p><ul><li>npm init<ul><li>npm init -y可以跳过向导，快速生成</li></ul></li><li>npm install<ul><li>一次性把 dependencies选项中的依赖项全部安装</li><li>npm i</li></ul></li><li>npm instal 包名<ul><li>只下载</li><li>npm i 包名</li></ul></li><li>npm install –save 包名<ul><li>下载并且保存依赖项（ package.json文件中的 dependencies选项）</li><li>npm i-S 包名</li></ul></li><li>npm uninstall 包名<ul><li>只删除，如果有依赖项会依然保存</li><li>npm un 包名</li></ul></li><li>npm uninstall –save 包名<ul><li>删除的同时也会把依赖信息也去除</li><li>npm un -S包名工</li></ul></li><li>npm help<ul><li>查看帮助</li></ul></li></ul><p>npm 安装 Node.js 模块语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$ npm install 包名<br></code></pre></td></tr></table></figure><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 <strong>express</strong>:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> express<br></code></pre></td></tr></table></figure><h2 id="解决npm被墙"><a href="#解决npm被墙" class="headerlink" title="解决npm被墙"></a>解决npm被墙</h2><p><a href="http://npm.taobao.org/">cnpm</a></p><p>由于NPM源服务器在国外, 下载速度比较慢, 可以使用淘宝镜像来下载, 淘宝NPM镜像是一个完整的npm镜像, 每10分钟与官方同步一次, 可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm </p><p>安装淘宝的cnpm:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"># 任意目录都行<br>npm install --<span class="hljs-variable language_">global</span> cnpm<br></code></pre></td></tr></table></figure><p>接下来安装包的时候把<code>npm</code>换成<code>cnpm</code></p><p>也可以不装cnpm:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm config set registry <span class="hljs-attr">https</span>:<span class="hljs-comment">//regustry.npm.taobao.org</span><br><br># 查看npm配置信息<br>npm config list<br></code></pre></td></tr></table></figure><p>只要经过了上面命令的配置，则你以后所有的<code>npm install</code>都会默认通过淘宝的服务器来下载</p><h2 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a>全局安装与本地安装</h2><p>npm 的包安装分为本地安装（local）、全局安装（global）两种</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> express          <span class="hljs-comment"># 本地安装</span><br>npm <span class="hljs-keyword">install</span> express -g   <span class="hljs-comment"># 全局安装</span><br></code></pre></td></tr></table></figure><h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><ul><li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li><li>可以通过 require() 来引入本地安装的包。</li></ul><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><ul><li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li><li>可以直接在命令行里使用。</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>package.json包说明文件,里面记录了各个包之间的依赖和说明</p><p>可以通过<code>npm init</code>初始化出来, 如果node_modules删除了,可以通过<code>npm install</code>命令下载回来</p><h2 id="Node-的使用"><a href="#Node-的使用" class="headerlink" title="Node 的使用"></a>Node 的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">node 文件名.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><p>可以执行js程序</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>网站越来越复杂，js代码、js文件也越来越多，会遇到<strong>一些问题</strong>：</p><ul><li><p>文件依赖复杂</p></li><li><p>全局污染、命名冲突</p></li></ul><p>程序模块化包括：</p><ul><li><p>日期模块</p></li><li><p>数学计算模块</p></li><li><p>日志模块</p></li><li><p>登陆认证模块</p></li><li><p>报表展示模块等。</p></li></ul><p>所有这些模块共同组成了程序软件系统。</p><p>一次编写，多次使用，才是提高效率的核心。</p><h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><p><strong>概念</strong>：将一个复杂的程序依据一定的规则（规范）封装成几个块（文件），并组合在一起。</p><p>模块的内部数据、实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。</p><p>最早的时候，我们会把所有的代码都写在一个js文件里，那么，耦合性会很高（关联性强），不利于维护；而且会造成全局污染，很容易命名冲突。</p><ul><li>文件作用域</li><li>通信规则<ul><li>加载</li><li>导出</li></ul></li></ul><h3 id="模块化的好处"><a href="#模块化的好处" class="headerlink" title="模块化的好处"></a>模块化的好处</h3><ul><li><p>避免命名冲突，减少命名空间污染</p></li><li><p>降低耦合性；更好地分离、按需加载</p></li><li><p><strong>高复用性</strong>：代码方便重用，别人开发的模块直接拿过来就可以使用，不需要重复开发类似的功能。</p></li><li><p><strong>高可维护性</strong>：软件的声明周期中最长的阶段其实并不是开发阶段，而是维护阶段，需求变更比较频繁。使用模块化的开发，方式更容易维护。</p></li><li><p>部署方便</p></li></ul><h2 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h2><p>使用Node编写应用程序主要是在使用:</p><ul><li>EcmaScript语言:<ul><li>和浏览器不一样, node中没有BOM,DOM</li></ul></li><li>核心模块:<ul><li>文件操作的fs</li><li>http服务的http</li><li>path路径处理模块</li></ul></li><li>第三方模块<ul><li>art-template, 通过npm来下载</li></ul></li><li>自己写的模块, 相对路径必须加<code>./</code></li></ul><p>require是一个方法</p><ol><li><p>可以用来加载模块   </p></li><li><p>可以拿到加载文件模块导入的exports接口对象</p></li></ol><p>node中没有全局作用域,只有模块作用域, 模块默认内外部互相访问不到<br>每个文件模块中都有一个默认为空的对象: <code>exports</code>, 使用exports接口对象导出模块中的成员</p><h2 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h2><p>语法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> 自定义变量名称 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;模块)</span><br></code></pre></td></tr></table></figure><p>2个作用:</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的exports导出的接口对象</li></ul><h2 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h2><ul><li>node中是模块作用域, 默认文件中所有的成员只在当前文件模块有效</li><li>通过挂载到exports接口对象中就可以导出多个成员(默认在对象中)</li></ul><p>语法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span> = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>导出单个成员(拿到的就是函数,字符串,而不是对象)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-comment">// 但是后者会覆盖前者</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y<br>&#125;<br><br></code></pre></td></tr></table></figure><p>导出多个成员:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> x + y<br>    &#125;,<br>    <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">xxx</span> = xxx <span class="hljs-comment">// 一个一个导</span><br></code></pre></td></tr></table></figure><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p>在Node中,每个模块内部都有一个自己的module对象, 该对象中有个exports成员也是对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = &#123;<br>    <span class="hljs-attr">exports</span>: &#123;<br>        <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;hello&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 还有一句</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span><br><br><span class="hljs-comment">// 所以这样对象.属性可以直接导出单个成员</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-comment">// 但是这样太麻烦, node简化了操作:</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> <span class="hljs-comment">// 赋值之后exports指向module.exports的地址, 给它们任何一个重新赋值都会因开辟新空间而断开引用</span><br></code></pre></td></tr></table></figure><p>所以<code>exports</code>是<code>module.exports</code>的一个引用,指向的是同一个地址 然而最后return的是module.exports,而不是exports, 所以给exports重新赋值不管用, exports会开辟新的空间,跟module.exports没关系了<br>给exports赋值会断开和module.exports之间的引用,同理,给module.exports赋值也会断开</p><h2 id="require方法加载规则"><a href="#require方法加载规则" class="headerlink" title="require方法加载规则"></a><code>require</code>方法加载规则</h2><ul><li>核心模块<ul><li>模块名</li></ul></li><li>第三方模块<ul><li>模块名</li></ul></li><li>自己写的模块<ul><li>路径</li></ul></li></ul><h3 id="优先从缓存加载"><a href="#优先从缓存加载" class="headerlink" title="优先从缓存加载"></a>优先从缓存加载</h3><p>加载模块前,如果模块被加载过, 会直接拿到接口, 不会重复加载比如:<br>a中加载b,c<br>b中返回接口,并加载c<br>c返回接口<br>a只加载b就能拿到b和c的接口,因为b中加载过c<br>a中的加载c不会重复执行</p><h3 id="判断模块标识"><a href="#判断模块标识" class="headerlink" title="判断模块标识"></a>判断模块标识</h3><p><code>require(&#39;模块标识&#39;)</code></p><p>路径形式的模块:</p><p>./,  ../,  D:/xxx.js(几乎不用.js后缀可以省略),  /xxx(几乎不用 /表示当前文件模块所属磁盘根路径)</p><p>核心模块:</p><p>也是文件,但是编译成了二进制,所以直接写文件名就行</p><p>第三方模块:</p><p>凡是第三方模块必须通过npm来下载<br>通过require(‘包名’)的方式来加载</p><p>先找到当前文件所处目录中的 node modules目录<br>node_modules/art-template<br>node_modules/art-temp rate/ package.json文件<br>node_modules/art-template/ package.json文件中的main属性<br>main属性中就记录了art- template的入口模块<br>然后加载使用这个第三方包<br>实际上最终加载的还是文件<br>如果 package.json文件不存在或者main指定的入口模块是也没有<br>则node会自动找该目录下的 index.js<br>也就是说 index.js会作为<br>一个默认备选项</p><p>如果以上所有任何一个条件都不成立，则会进入上一级目录中的 node modules目录查找<br>如果上一级还没有，则继续往上上一级查找<br>如果直到当前磁盘根目录还找不到，最后报错:<br>can not find module xxx</p><p><strong>注意：</strong>我们一个项目有且只有一个node_modules，放在项目根目录中,这样所有子目录都可以找到</p><p><strong>模块查找机制:</strong><br>优先从缓存加载<br>核心模块<br>路径形式的文件模块<br>第三方模块: 不会进入兄弟目录查找</p><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p>Node给js提供了很多服务器级别的核心模块, 核心模块需要加载后使用,如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>浏览器中的js没有操作文件的能力, 但是node中的js具有<br>fs是file-system的简写, 就是文件系统的意思<br>在node中要进行文件操作就必须引入fs<br>用require方法加载fs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 参数: 文件路径, 文件内容, 回调函数</span><br><span class="hljs-comment">// error:</span><br><span class="hljs-comment">// 成功 error是null</span><br><span class="hljs-comment">// 失败 error是错误对象</span><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./ent.txt&#x27;</span>, <span class="hljs-string">&#x27;233&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;文件写入成功&#x27;</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="文件操作路径和模块标识路径"><a href="#文件操作路径和模块标识路径" class="headerlink" title="文件操作路径和模块标识路径"></a>文件操作路径和模块标识路径</h2><p>文件操作中的相对路径:<br>./data/a.js 相对于当前目录<br>data/a.js  相对于当前目录<br>/data/a.js 绝对路径,当前文件的磁盘根目录<br>D:/xx/xx…绝对路径</p><p>模块操作路径:<br>require(‘/data/a.js’) 忽略了<code>.</code>就是磁盘根目录<br>require(‘./data/a.js’) 相对路径<br>模块加载的路径中的相对路径不能省略 <code>./</code></p><h2 id="通过Node创建web服务器"><a href="#通过Node创建web服务器" class="headerlink" title="通过Node创建web服务器"></a>通过Node创建web服务器</h2><ol><li><p>加载http核心模块</p></li><li><p><code>http.createServer()</code>: 创建一个web服务器</p></li><li><p><code>request</code>: 请求事件处理函数,接受2个对象: </p><ul><li><p>request请求对象: 获取客户端请求信息,比如请求路径</p></li><li><p>response响应对象: 给客户端发送响应消息</p><ul><li>response有个方法:write给客户端发送响应数据,可以使用多次,配合end结束响应</li></ul></li></ul></li><li><p>在服务端默认发送的数据，其实是utf8编码的内容, 但是浏览器不知道你是utf8编码的内容, 浏览器在不知道服务器响应内容的编码的情况下会按照当前操作系统的默认编码去解析, 中文操作系统默认是gbk, 解决方法就是正确的告诉浏览器我给你发送的内容是什么编码的</p></li><li><p><code>text/plain</code>: 普通文本,  <code>text/html</code>: 可以解析html代码</p></li><li><p>图片使用image/png等格式, 且不需要编码,只有字符才要编码</p></li><li><p>listen: 绑定端口号</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>) &#123;<br>    response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/plain; charset=UTF-8&quot;</span> <span class="hljs-comment">// 告诉对方发送的数据内容是什么类型</span><br>    &#125;);<br>    <span class="hljs-comment">// response.write(&quot;Hello World&quot;); 麻烦,不推荐写法</span><br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;Hello World&quot;</span>); <span class="hljs-comment">// 响应内容只能是字符串和二进制数据</span><br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br></code></pre></td></tr></table></figure><h3 id="ip和端口"><a href="#ip和端口" class="headerlink" title="ip和端口"></a>ip和端口</h3><p>计算机只有一个物理网卡,同一局域网中网卡地址必须唯一, 每个联网通信的应用都有一个端口号, 端口号范围:0~65536</p><p>输入网址-&gt;dns解析-&gt;ip地址</p><p>ip地址用来定位计算机</p><p>端口号用定位具体的应用程序</p><h2 id="JavaScript可以不写分号"><a href="#JavaScript可以不写分号" class="headerlink" title="JavaScript可以不写分号"></a>JavaScript可以不写分号</h2><p>js中分号可以不写, 但是以下三种开头需要加分号:</p><ul><li><p>(</p></li><li><p>[</p></li><li><p>` </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">;(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>  *<span class="hljs-comment">// 需要在前面加分号*</span><br><br>&#125;)()<br></code></pre></td></tr></table></figure><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>模板引擎 art-template</p><p>安装:<br>在需要安装的目录打开cmd输入: npm install art-template</p><p>加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> template = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;art-template&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h2><p>安装:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">cnpm install express --save<br></code></pre></td></tr></table></figure><p>使用: hello world</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-comment">// 创建app</span><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express app is running...&#x27;</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><p> Express 应用使用回调函数的参数： <strong>request</strong> 和 <strong>response</strong> 对象来处理请求和响应的数据 </p><h3 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h3><p>修改完代码自动重启用第三方命令行工具: <code>nodemon</code> ,需要独立安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"># 可在任意目录执行该命令, 所有需要--<span class="hljs-variable language_">global</span>来安装的包都可以在任意目录执行<br>npm install -g nodemon<br></code></pre></td></tr></table></figure><p>安装完后使用<code>nodemon</code>启动服务, 如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">nodemon app.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><h3 id="静态服务"><a href="#静态服务" class="headerlink" title="静态服务"></a>静态服务</h3><p>开放文件夹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 直接访问/public资源,url里面不用加/public</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;pubic&#x27;</span>))<br><span class="hljs-comment">// 直接访问/files资源</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;files&#x27;</span>))<br><br><span class="hljs-comment">// /public/xxx</span><br><span class="hljs-comment">//当以/pub1ic/开头的时候，去./pub1ic/目录中找找对应的资源(推荐)</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/public/&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;pubic&#x27;</span>))<br><br><span class="hljs-comment">// /static/xxx 给public取个别名:static</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/static&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;pubic&#x27;</span>))<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/static&#x27;</span>, express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)))<br><br></code></pre></td></tr></table></figure><h3 id="在express中配置使用art-template模板引擎"><a href="#在express中配置使用art-template模板引擎" class="headerlink" title="在express中配置使用art-template模板引擎"></a>在express中配置使用art-template模板引擎</h3><p>安装:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm install --save art-template express-art-template<br></code></pre></td></tr></table></figure><p>配置:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;art&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-art-template&#x27;</span>))<br></code></pre></td></tr></table></figure><p>使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-comment">// express默认会去项目中的views目录找index.html</span><br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>, &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;hello world&#x27;</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>修改默认的views视图渲染存储目录:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, 目录路径)<br></code></pre></td></tr></table></figure><p>express获取表单get请求参数用 <code>req.query</code></p><p>express没有内置的post请求api,获取表单post请求参数用第三方包body-parser:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"># 安装<br>npm i -S body-parser<br><br># 引包<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br># 配置body-parser中间件(插件, 解析表单post请求体)<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<br>    <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span><br>&#125;))<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br></code></pre></td></tr></table></figure><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>异步代码读文件不一定按照先后顺序的, 跟文件大小有关, 小文件可能先读<br>可以通过回调嵌套的方式保证顺序,但是会变成回调地狱嵌套</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-comment">// 抛出异常, 阻止程序运行, 把错误信息打印到控制台</span><br>        <span class="hljs-keyword">throw</span> err<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./data/b.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">throw</span> err<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./data/c.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>            <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-keyword">throw</span> err<br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>        &#125;)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>为了解决回调地狱嵌套，所以在 EcmaScript6中新增了一个APl： promise<br>promise不是异步任务, 但是内部往往封装一个异步任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-comment">// 失败了将容器pending状态改为Rejected</span><br>            <span class="hljs-title function_">reject</span>(err)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 成功了将容器pending状态改为Resolved</span><br>            <span class="hljs-title function_">resolve</span>(data)<br>        &#125;<br>    &#125;)<br>&#125;)<br><br><span class="hljs-keyword">var</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./data/b.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-comment">// 失败了将容器pending状态改为Rejected</span><br>            <span class="hljs-title function_">reject</span>(err)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 成功了将容器pending状态改为Resolved</span><br>            <span class="hljs-title function_">resolve</span>(data)<br>        &#125;<br>    &#125;)<br>&#125;)<br><br><span class="hljs-keyword">var</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./data/c.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-comment">// 失败了将容器pending状态改为Rejected</span><br>            <span class="hljs-title function_">reject</span>(err)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 成功了将容器pending状态改为Resolved</span><br>            <span class="hljs-title function_">resolve</span>(data)<br>        &#125;<br>    &#125;)<br>&#125;)<br><br><span class="hljs-comment">// 当p1成功了然后(then)做指定的操作</span><br>p1.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>        <span class="hljs-comment">// return什么后面就接收什么, 没有就是undefined</span><br>        <span class="hljs-keyword">return</span> p2 <span class="hljs-comment">// return一个promise对象</span><br>    &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取失败&#x27;</span>, err)<br><br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>        <span class="hljs-keyword">return</span> p3<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br><br>    &#125;)<br></code></pre></td></tr></table></figure><p>封装promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pReadFile</span>(<span class="hljs-params">filePath</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>        fs.<span class="hljs-title function_">readFile</span>(filePath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>            <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-title function_">reject</span>(err)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(data)<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">pReadFile</span>(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">pReadFile</span>(<span class="hljs-string">&#x27;./data/b.txt&#x27;</span>)<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">pReadFile</span>(<span class="hljs-string">&#x27;./data/c.txt&#x27;</span>)<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br><br>    &#125;)<br></code></pre></td></tr></table></figure><h2 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h2><p>关系型数据库和非关系型数据库:</p><p>表就是关系, 表于表之间存在关系</p><ul><li><p>所有的关系型数据库都需要通过sql语言操作</p></li><li><p>所有的关系型数据库在操作前都需要设计表结构</p></li><li><p>数据表支持约束</p></li></ul><p>非关系型数据库非常灵活, 有的非关系型数据库就是 键值对</p><p>MongoDB是最像关系型数据库的非关系型数据库, 不需要设计表结构, 可以任意的存数据</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>从<a href="https://www.mongodb.com/download-center/community">官网</a> 下载安装, 带有图形化界面可供安装, 安装后配置环境变量, 复制安装目录的地址, 直到bin文件夹下,粘贴到win10环境变量中的path中, 命令行输入<code>mongod --version</code>查看版本号, 有就代表安装成功了</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>默认使用安装磁盘根目录下的/data/db作为数据存储目录, 需要手动新建, 可以修改默认的目录:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">mongod --dbpath=数据存储路径<br></code></pre></td></tr></table></figure><p>cmd输入<code>mongod</code>启动, Ctrl+c停止</p><h3 id="连接和退出"><a href="#连接和退出" class="headerlink" title="连接和退出"></a>连接和退出</h3><p>连接:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"># 默认连接本机的<span class="hljs-title class_">MongoDB</span>服务<br>mongo<br></code></pre></td></tr></table></figure><p>退出:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">exit<br></code></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p><code>show dbs</code>: 查看显示所有数据库</p><p><code>db</code>: 查看当前操作的数据库</p><p><code>use 数据库名称</code>: 切换到指定数据(没有会新建)</p><h2 id="Node中操作MongoDB数据库"><a href="#Node中操作MongoDB数据库" class="headerlink" title="Node中操作MongoDB数据库"></a>Node中操作MongoDB数据库</h2><p>使用第三方 mongoose, 所有的API都支持promise, mongoose基于MongoDB官方的mongodb包再一次做了封装</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install mongoose<br></code></pre></td></tr></table></figure><p>demo:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-comment">// 连接MongoDB数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>, &#123;<br>    <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span><br>&#125;);<br><br><span class="hljs-comment">// 创建一个模型,就是在设计数据库,Mongoose是动态的,只需要在代码中设计数据库就行</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Cat</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;Cat&#x27;</span>, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">String</span><br>&#125;);<br><br><span class="hljs-comment">// 实例化一个Cat</span><br><span class="hljs-keyword">const</span> kitty = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;猫咪&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;3&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 持久化保存kitty实例</span><br>kitty.<span class="hljs-title function_">save</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;meow&#x27;</span>));<br></code></pre></td></tr></table></figure><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Schema</span> = mongoose.<span class="hljs-property">Schema</span><br><br><span class="hljs-comment">// 连接数据库</span><br><span class="hljs-comment">// 指定数据库不需要存在,插入数据后会自动创建</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/itcast&#x27;</span>)<br><br><span class="hljs-comment">// 设计集合架构(表结构), 字段名称就是表结构中的属性名称</span><br><span class="hljs-comment">// 约束: 保证数据的完整性</span><br><span class="hljs-keyword">var</span> userSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-attr">username</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 为true, 必须有</span><br>    &#125;,<br>    <span class="hljs-attr">password</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">email</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span><br>    &#125;<br><br>&#125;)<br><br><span class="hljs-comment">// 将文档结构发布为模型</span><br><span class="hljs-comment">// mongoose.modal方法就是用来将架构发布为model</span><br><span class="hljs-comment">// 第一个参数: 大写单数名词,表示数据库名称, mongoose会自动生成小写复数的集合名称</span><br><span class="hljs-comment">// 第二个参数: 架构 Schema</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">User</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;User&#x27;</span>, userSchema)<br></code></pre></td></tr></table></figure><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据:"></a>增加数据:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 增加数据</span><br><span class="hljs-keyword">var</span> admin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(&#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;admin@admin.com&#x27;</span><br>&#125;)<br><br>admin.<span class="hljs-title function_">save</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;保存失败&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;保存成功&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据:"></a>删除数据:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 删除所有匹配的数据</span><br><span class="hljs-comment">// deleteOne删除匹配的第一个数据</span><br><span class="hljs-comment">// deleteMany删除所有匹配的数据</span><br><span class="hljs-title class_">User</span>.<span class="hljs-title function_">deleteMany</span>(&#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zs&#x27;</span><br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除失败&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据:"></a>修改数据:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 修改数据, 查找匹配的文档</span><br><span class="hljs-title class_">User</span>.<span class="hljs-title function_">findOneAndUpdate</span>(<span class="hljs-string">&#x27;5dca97f58458cc3b7c4a026c&#x27;</span>, &#123; <br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;321&#x27;</span><br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;更新失败&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;更新成功&#x27;</span>);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据:"></a>查询数据:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 查询数据: 查询所有</span><br><span class="hljs-title class_">User</span>.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;查询失败&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 按条件查询所有</span><br><span class="hljs-comment">// 按条件查询单个: findOne, 没有条件就显示第一个</span><br><span class="hljs-title class_">User</span>.<span class="hljs-title function_">find</span>(&#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zs&#x27;</span><br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;查询失败&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Node中操作MySQL数据库"><a href="#Node中操作MySQL数据库" class="headerlink" title="Node中操作MySQL数据库"></a>Node中操作MySQL数据库</h2><p>安装:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm install mysql<br></code></pre></td></tr></table></figure><p>demo:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br><br><span class="hljs-comment">// 创建连接</span><br><span class="hljs-keyword">var</span> connection = mysql.<span class="hljs-title function_">createConnection</span>(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-comment">// 主机地址</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">// 用户名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-comment">// 密码</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-comment">// 数据库名</span><br>&#125;);<br><br><span class="hljs-comment">// 连接数据库</span><br>connection.<span class="hljs-title function_">connect</span>();<br><br><span class="hljs-comment">// 执行数据操作</span><br>connection.<span class="hljs-title function_">query</span>(<span class="hljs-string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">error, results, fields</span>) &#123;<br>    <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The solution is: &#x27;</span>, results[<span class="hljs-number">0</span>].<span class="hljs-property">solution</span>);<br>&#125;);<br><br><span class="hljs-comment">// 关闭连接</span><br>connection.<span class="hljs-title function_">end</span>();<br></code></pre></td></tr></table></figure><h2 id="path路径操作模块"><a href="#path路径操作模块" class="headerlink" title="path路径操作模块"></a>path路径操作模块</h2><ul><li>path.basename<ul><li>获取一个路径的文件名（默认包含扩展名）</li></ul></li><li>path.dirname<ul><li>获取一个路径中的目录部分</li></ul></li><li>path.extname<ul><li>获取一个路径中的扩展名部分</li></ul></li><li>path.parse<ul><li>把一个路径转为对象</li><li>root: 根路径</li><li>dir: 目录</li><li>base: 包含后缀名的文件名</li><li>ext: 后缀名</li><li>name: 不包含后缀名的文件名</li></ul></li><li>path.join<ul><li>当你需要进行路径拼接的时候，推荐使用这个方法</li></ul></li><li>path.isAbsolute<ul><li>判断一个路径是否是绝对路径</li></ul></li></ul><h2 id="特殊API"><a href="#特殊API" class="headerlink" title="特殊API"></a>特殊API</h2><p>__dirname: 获取当前文件模块所属目录的绝对路径<br>__filename: 获取当前文件的绝对路径</p><p>在文件操作中，使用相对路径是不可靠的，因为在Node中文件操作的路径被设计为相对于执行node命令所处的<br>路径（不是bug，人家这样设计是有使用场景）.<br>所了为了解决这个问题，很简单，只需要把相对路径变为绝对路径就可以了。使用上面2个参数动态地获取绝对路径</p><p>模块作用域中, 谁需要fs谁就必须加载fs</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>用来管理一些敏感信息, 例如保持登录状态</p><p>写<br>req.session.xxx = xxx</p><p>读<br>req.session.xxx</p><p>删除<br>req.session.xxx = null<br>更严谨的写法:<br>delete req.session.xxx</p><h2 id="express中间件"><a href="#express中间件" class="headerlink" title="express中间件"></a><code>express</code>中间件</h2><p>请求进来会从第一个中间件开始匹配,不匹配就下一个<br>匹配进来没有调用next就停住,调用了就继续向下找到匹配的第一个</p><p> 中间件: 处理请求的, 本质就是个函数<br> express中, 中间件有几种分类<br> 中间件本身就是一个方法, 接收3个参数:<br> request 请求对象<br> response 响应对象<br> next 下一个中间件<br> 当一个请求进入一个中间件后, 如果不调用next就会停留在当前中间件<br> next是一个方法,用来调用下一个中间件<br> next也是要匹配的,不是调用紧挨着的那个<br> 同一个请求经过的中间件都是同一个请求对象和响应对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//  1. 应用程序级别</span><br><span class="hljs-comment">// 万能匹配 不关心请求路径和请求方法的中间件, 也就是说任何请求都会进入这个中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    <span class="hljs-title function_">next</span>() <span class="hljs-comment">// 调用下一个中间件</span><br><br>&#125;)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>);<br><br>&#125;)<br><br><span class="hljs-comment">// url必须以 /a/ 开头的 /abc不行.  url没有别的路径默认为 / ,要以 / 开始匹配</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/a&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;3&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">// 没有能匹配的中间件,express默认输出: Cannot GET(或者POST) 路径</span><br><br><br><span class="hljs-comment">// 还有一种常用的, 严格匹配请求方法和请求路径的中间件</span><br><span class="hljs-comment">// 2. 路由级别:</span><br><span class="hljs-comment">// app.get</span><br><span class="hljs-comment">// app.post</span><br><br><span class="hljs-comment">// 只能匹配 /</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">// 只能匹配 /a</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/a&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;/a&#x27;</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;running...&#x27;</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/blog/2019/11/16/Ajax/"/>
    <url>/blog/2019/11/16/Ajax/</url>
    
    <content type="html"><![CDATA[<p>本篇内容为服务器架构, 类型, php常见语法, get, post, Ajax, xml, json等内容</p><span id="more"></span><h1 id="服务器-php和Ajax"><a href="#服务器-php和Ajax" class="headerlink" title="服务器,php和Ajax"></a>服务器,php和Ajax</h1><h2 id="C-S架构和B-S架构"><a href="#C-S架构和B-S架构" class="headerlink" title="C/S架构和B/S架构"></a>C/S架构和B/S架构</h2><h3 id="C-S架构"><a href="#C-S架构" class="headerlink" title="C/S架构"></a>C/S架构</h3><p>是Client/Server这两个单词的首字母，指的是客户端，服务器。</p><p>优点:</p><ul><li><p>性能较高：可以将一部分的计算工作放在客户端上,这样服务器只需要处理数据即可。</p></li><li><p>界面酷炫:客户端可以使用更多系统提供的效果,做出更为炫目的效果。</p></li></ul><p>缺点:</p><ul><li><p>更新软件：如果有新的功能，就要推出新的版本。</p></li><li><p>不同设备访问：如果使用其他的电脑，没有安装客户端的话就无法登陆软件。</p></li></ul><h3 id="B-S架构"><a href="#B-S架构" class="headerlink" title="B/S架构"></a>B/S架构</h3><p>是Browser/Server的这两个单词的首字母。指的是浏览器、服务器，是WEB兴起之后的一种架构。</p><p>现在所有的网站都是B/S架构，较为常见的例子有百度、知乎、网易云音乐Web等等，只需要通过浏览器即可使用.</p><p>优点：</p><ul><li><p>更新简洁：如果需要更新内容了,对开发人员而言需要更改服务器的内容，对用户而言只需要刷新浏览器即可。</p></li><li><p>多设备同步：所有数据都在网上,只要能够使用浏览器即可登录使用。</p></li></ul><p>缺点:</p><ul><li><p>性能较低：相比于客户端应用性能较低,但是随着硬件性能的提升,这个差距在缩小。</p></li><li><p>浏览器兼容：处理低版本的浏览器显示问题一直是前端开发人员头痛的问题之一。移动设备兼容性较好，ie6已经越来越少人用了。</p></li></ul><h2 id="服务器分类"><a href="#服务器分类" class="headerlink" title="服务器分类"></a>服务器分类</h2><p>项目开发时有三套环境:</p><ul><li>Development 开发环境</li><li>Test 测试环境</li><li>Production 生产环境</li></ul><p>三套环境三个服务器</p><h3 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h3><p>按类型分：</p><ul><li><p>文件服务器</p></li><li><p>数据库服务器</p></li><li><p>邮件服务器</p></li><li><p>Web 服务器等</p></li></ul><p>按软件分：</p><ul><li><p>Apache 服务器</p></li><li><p>Nginx 服务器</p></li><li><p>IIS 服务器</p></li><li><p>Tomcat 服务器</p></li><li><p>Node 服务器等</p></li></ul><p>按操作系统分：</p><ul><li>Linux服务器</li><li>Windows服务器等</li></ul><p>常见的服务器软件有：</p><ul><li>文件服务器：Server-U、FileZilla、VsFTP等；</li><li>数据库服务器：Oracle、MySQL、PostgreSQL、MSSQL等；</li><li>邮件服务器：Postfix、Sendmail等；</li><li>HTTP 服务器：Apache（免费、开源）、Nginx、IIS（微软的.net服务器）、Tomcat（java编程的服务器）、NodeJS 等。</li></ul><p>安装WampServer搭建HTTP服务, WampServer集成了windows + Apache + Mysql + PHP。直接安装可一步到位</p><h2 id="php常见语法"><a href="#php常见语法" class="headerlink" title="php常见语法"></a>php常见语法</h2><p>注释跟js一模一样: // </p><p>数据类型: 字符串,整数,浮点数,布尔,数组,对象,null</p><p>单引号内部内容只做字符串, 双引号内部会解析php和html代码</p><p>php代码以 . 拼接</p><p>开头</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">// 代码主体</span><br></code></pre></td></tr></table></figure><p>PHP 没有声明变量的命令。</p><p>变量在第一次赋值给它的时候被创建</p><ol><li>变量以$符号开头,大小写敏感必须以字母或下划线开头</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$num</span> = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>打印内容, echo不能输出集合,也就是不能打印数组,对象</li></ol><p>  后端编写的代码只能放到服务器对应的文件夹, 通过服务器运行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-variable">$num</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>数组</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 定义数组</span><br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">// 打印数组</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-comment">// 取出元素</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><ol start="4"><li>定义对象</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$dict</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;name&quot;</span>=&gt;<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>=&gt;<span class="hljs-string">&quot;20&quot;</span>);<br><span class="hljs-comment">// 取出元素</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dict</span>[<span class="hljs-string">&quot;name&quot;</span>];<br></code></pre></td></tr></table></figure><ol start="5"><li><p>分支循环语句</p><p>if/switch/三元/for/while</p></li></ol><p>if</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$age</span> = <span class="hljs-number">18</span>;<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$age</span>&gt;=<span class="hljs-number">18</span>) &#123;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;成年&quot;</span>;<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;未成年&quot;</span>;<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>switch</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$age</span> = <span class="hljs-number">18</span>;<br><br>  <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$age</span>) &#123;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;0&quot;</span>;<br><br>      <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">18</span>:<br><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;成年&quot;</span>;<br><br>      <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<br><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;未成年&quot;</span>;<br><br>      <span class="hljs-keyword">break</span>;<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>三元表达式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$res</span> = (<span class="hljs-variable">$age</span> &gt;= <span class="hljs-number">18</span>) ? <span class="hljs-string">&quot;成年&quot;</span> : <span class="hljs-string">&quot;未成年&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br></code></pre></td></tr></table></figure><p>for</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>); <span class="hljs-variable">$i</span>++) &#123;<br><br>     <span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>  &#125;<br></code></pre></td></tr></table></figure><p>while</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$index</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$index</span> &lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>)) &#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$index</span>];<br><br>  <span class="hljs-variable">$index</span>++;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="header-函数"><a href="#header-函数" class="headerlink" title="header()函数"></a>header()函数</h2><p>浏览器访问http服务器，接收到响应时，会根据响应<strong>报文头</strong>的内容进行一些具体的操作。在php中，我们可以根据 <strong>header</strong> 来设置这些内容。</p><p>设置编码格式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html; charset= utf-8&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="get请求和post请求"><a href="#get请求和post请求" class="headerlink" title="get请求和post请求"></a>get请求和post请求</h2><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>get请求通过$_GET对象来获取</p><p>_<code>$_GET</code>是关系型数组，可以通过 **$_GET[<code>key</code>]**获取值。这里的 key 是 form 标签中表单元素的 name 属性的值。</p><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        get请求会将提交的数据拼接到URL后面</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;1-get.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userPwd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1-get.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;userName&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;userPwd&quot;</span>];<br></code></pre></td></tr></table></figure><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><p><code>$_POST</code>是关系型数组，可以通过 **$_POST[<code>key</code>]**获取值。这里的 key 是 form 标签中表单元素的 name 属性的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;2-post.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userPwd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2-post.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;userName&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;userPwd&quot;</span>];<br><br></code></pre></td></tr></table></figure><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>都是提交数据到远程服务器</p><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ol><li>提交数据存储的位置不同</li></ol><p>get请求会将数据存放到URL后面</p><p>post请求会将数据放到请求头中</p><ol start="2"><li>提交数据大小限制不同</li></ol><p>get对数据有大小限制</p><p>post对数据没有大小限制</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>get用来提交非敏感数据,小数据</p><p>post用来提交敏感数据,大数据</p><h2 id="文件上传和保存"><a href="#文件上传和保存" class="headerlink" title="文件上传和保存"></a>文件上传和保存</h2><p>上传文件时, 需要在html表单中设置<code>enctype=&quot;multipart/form-data&quot;</code>, 而且只能用post方式获取</p><p>html文件:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;3-post-file.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;upFile&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>php文件:</p><p>上传之后会在<code>wamp/tmp</code>目录下出现一个<code>.tmp</code>临时文件,过一会就会自动删除,想要保存就要用到<code>move_uploaded_file()</code>函数</p><p>参数:</p><p>移动的文件, 目标路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 获取上传文件对应的字典</span><br><span class="hljs-variable">$fileInfo</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;upFile&quot;</span>];<br><br><span class="hljs-comment">// 获取上传文件的名称 </span><br><span class="hljs-variable">$fileName</span> = <span class="hljs-variable">$fileInfo</span>[<span class="hljs-string">&quot;name&quot;</span>];<br><br><span class="hljs-comment">// 获取上传文件的临时路径</span><br><span class="hljs-variable">$filePath</span> = <span class="hljs-variable">$fileInfo</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>];<br><br><span class="hljs-comment">// 移动文件</span><br><span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$filePath</span>, <span class="hljs-string">&quot;../img/&quot;</span>.<span class="hljs-variable">$fileName</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>默认情况下服务器对上传文件大小有限制,需要修改php.ini文件</p><p><code>file_uploads = on</code>              是否允许上传文件On/Of 默认是On<br><code>upload_max_filesize= 2048M</code>      上传文件的最大限制<br><code>post_max_size_2048M</code>            通过Post提交的最多数据<br><code>max_execution_time= 30000</code>       脚本最长的执行时间 单位为秒<br><code>max_Input_time- 30000</code>           接收提交的数据的时间限制 单位为秒<br><code>memory limit- 2048M</code>             最大的内存消耗</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><ul><li>同步: 必须等待前面的任务完成才能继续完成后面的</li><li>异步: 做当前任务时可以去做其他任务</li></ul><p>同步就好像先煮饭(20分钟)饭煮好了再去做菜,</p><p>异步就像在煮饭的同时可以做菜</p><p>网站中的异步更新体验更好, 加载更新部分内容的时候不用刷新整个网站</p><p>Ajax不是新技术, 而是对现有技术的结合, Ajax的核心对象是js对象:XMLHttpRequest</p><h3 id="发送Ajax请求的五个步骤"><a href="#发送Ajax请求的五个步骤" class="headerlink" title="发送Ajax请求的五个步骤:"></a>发送Ajax请求的五个步骤:</h3><p>一个完整的HTTP请求需要的是：</p><ul><li><p>请求的网址、请求方法get/post。</p></li><li><p>提交请求的内容数据、请求主体等。</p></li><li><p>接收响应回来的内容。</p></li></ul><p>发送 Ajax 请求的五个步骤：</p><p>（1）创建异步对象。即 XMLHttpRequest 对象。</p><p>（2）使用open方法设置请求的参数。open(method, url, async)。参数解释：请求的方法、请求的url、是否异步。</p><p>（3）发送请求send()。</p><p>（4）注册事件。 注册onreadystatechange事件，状态改变时就会调用。</p><p>如果要在数据完整请求回来的时候才调用，我们需要手动写一些判断的逻辑。</p><p>（5）获取返回的数据。</p><p>get举例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发送get请求<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 点击绑定事件</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 发送ajax请求需要5步</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 1.创建异步对象</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> ajaxObj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 2. 设置请求的参数, 包括:请求的方法,请求的url,同步异步(true异步,false同步)不写默认为true</span></span><br><span class="language-javascript">                ajaxObj.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;4-ajax-get.php&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 3. 发送请求</span></span><br><span class="language-javascript">                ajaxObj.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 4. 监听状态变化 onreadystatechange事件，状态改变时就会调用。</span></span><br><span class="language-javascript">                ajaxObj.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 数据完整请求回来才调用,需要判断2个值</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (ajaxObj.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; ajaxObj.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">// 如果能进入这个判断说明数据完整,请求的页面是存在的</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                        <span class="hljs-comment">// 5. 获取返回的值, 并修改页面的内容</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// console.log(&#x27;返回成功&#x27;);</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// 数据保存在异步对象属性中</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// console.log(ajaxObj.responseText);</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// 修改页面显示</span></span><br><span class="language-javascript">                        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;h1&#x27;</span>).<span class="hljs-property">innerHTML</span> = ajaxObj.<span class="hljs-property">responseText</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;php的返回&quot;</span>;<br></code></pre></td></tr></table></figure><p>post举例:</p><p>post多了一行代码: <code>xhr.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form&quot;);</code> 想要使用post提交数据就必须写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发送post请求<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 创建异步对象</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 设置请求参数</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;2-ajax-post.php&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// post必写</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 发送请求</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 监听变化</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 判断服务器是否正确响应</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;post php&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="XMLHttpRequest-对象详解"><a href="#XMLHttpRequest-对象详解" class="headerlink" title="XMLHttpRequest 对象详解"></a>XMLHttpRequest 对象详解</h2><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><p>发送请求的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">open</span>(method, url, <span class="hljs-keyword">async</span>);<br></code></pre></td></tr></table></figure><p>参数解释：</p><ul><li><p>method：请求的类型；GET 或 POST</p></li><li><p>url：文件在服务器上的位置</p></li><li><p>async：true（异步）或 false（同步）不写默认为true</p></li></ul><p>另外还有个方法：（仅用于 POST 请求）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">send</span>(string);<br></code></pre></td></tr></table></figure><h3 id="POST请求时注意"><a href="#POST请求时注意" class="headerlink" title="POST请求时注意"></a>POST请求时注意</h3><p>如果想让 像form 表单提交数据那样使用POST请求，就需要使用 XMLHttpRequest 对象的 setRequestHeader()方法 来添加 HTTP 头。然后在 send() 方法中添加想要发送的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;ajax_test.php&quot;</span>, <span class="hljs-literal">true</span>);<br><br>xmlhttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br><br>xmlhttp.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;name=smyhvae&amp;age=27&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h3><p>注册 onreadystatechange 事件后，每当 readyState 属性改变时，就会调用 onreadystatechange 函数。</p><p>readyState：（存有 XMLHttpRequest 的状态。从 0 到 4 发生变化）</p><ul><li><p>0: 请求未初始化</p></li><li><p>1: 服务器连接已建立</p></li><li><p>2: 请求已接收</p></li><li><p>3: 请求处理中</p></li><li><p>4: 请求已完成，且响应已就绪</p></li></ul><p>status：</p><ul><li><p>200: “OK”。</p></li><li><p>404: 未找到页面。</p></li></ul><p>在 onreadystatechange 事件中，<strong>当 readyState 等于 4，且状态码为200时，表示响应已就绪</strong>。</p><h3 id="服务器响应的内容"><a href="#服务器响应的内容" class="headerlink" title="服务器响应的内容"></a>服务器响应的内容</h3><ul><li><p>responseText：获得字符串形式的响应数据。</p></li><li><p>responseXML：获得 XML 形式的响应数据。</p></li></ul><p>如果响应的是普通字符串，就使用responseText；如果响应的是XML，使用responseXML。</p><h2 id="Ajax传输XML"><a href="#Ajax传输XML" class="headerlink" title="Ajax传输XML"></a>Ajax传输XML</h2><h3 id="xml声明"><a href="#xml声明" class="headerlink" title="xml声明"></a>xml声明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br></code></pre></td></tr></table></figure><p>第一行的声明，指定了XML版本(1.0)以及使用的编码。</p><h3 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h3><p>XML中没有默认的标签，所有的标签都是我们自己已定义的。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">fox</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">fox</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br></code></pre></td></tr></table></figure><p>XML中没有单标签，都是双标签。<br>XML中必须要有一个根节点，所有的子节点都放置在根节点下。<br>因为 XML 就是标签，所以我们可以直接用<strong>解析Dom元素</strong>的方法解析 XML。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fox</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">fox</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Ajax请求解析xml"><a href="#Ajax请求解析xml" class="headerlink" title="Ajax请求解析xml"></a>Ajax请求解析xml</h3><p>1-info.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">person</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">person</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2-ajax.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;ajax_tool.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取xml数据&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;./get_xml.php&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> res = xhr.<span class="hljs-property">responseXML</span>;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">innerHTML</span>);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;age&quot;</span>).<span class="hljs-property">innerHTML</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">status</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ajax_tool.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">objStr</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 兼容ie保证拿到最新的url地址</span><br>    data.<span class="hljs-property">t</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">var</span> res = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> data) &#123;<br>        <span class="hljs-comment">// 拼接字符串  属性名=属性值  url里面不能出现中文, 要把url里面的中文转码</span><br>        res.<span class="hljs-title function_">push</span>(<span class="hljs-built_in">encodeURIComponent</span>(k) + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data[k]));<br>    &#125;<br>    <span class="hljs-comment">// 中间用&amp;连接</span><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">option</span>) &#123;<br>    <span class="hljs-comment">// 对象转为字符串</span><br>    <span class="hljs-keyword">var</span> str = <span class="hljs-title function_">objStr</span>(option.<span class="hljs-property">data</span>);<br>    <span class="hljs-comment">// 兼容ie5,6 创建异步对象</span><br>    <span class="hljs-keyword">var</span> xml, timer;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>) &#123;<br>        xml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// code for IE6, IE5</span><br>        xml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断请求类型</span><br>    <span class="hljs-keyword">if</span> (option.<span class="hljs-property">type</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&quot;get&quot;</span>) &#123;<br>        xml.<span class="hljs-title function_">open</span>(option.<span class="hljs-property">type</span>, option.<span class="hljs-property">url</span> + <span class="hljs-string">&quot;?&quot;</span> + str);<br>        <span class="hljs-comment">// 发送请求</span><br>        xml.<span class="hljs-title function_">send</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        xml.<span class="hljs-title function_">open</span>(option.<span class="hljs-property">type</span>, option.<span class="hljs-property">url</span>);<br>        xml.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form&quot;</span>);<br>        xml.<span class="hljs-title function_">send</span>(str);<br>    &#125;<br><br>    xml.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (xml.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-built_in">clearInterval</span>(timer);<br>                <span class="hljs-keyword">if</span> (xml.<span class="hljs-property">status</span> === <span class="hljs-number">200</span> &amp;&amp; xml.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span> || xml.<span class="hljs-property">status</span> === <span class="hljs-number">304</span>) &#123;<br>                    <span class="hljs-comment">// console.log(&quot;接收&quot;);</span><br>                    option.<span class="hljs-title function_">success</span>(xml);<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// console.log(&quot;未接收&quot;);</span><br>                    option.<span class="hljs-title function_">error</span>(xml);<br><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 判断是否超时</span><br>    <span class="hljs-keyword">if</span> (option.<span class="hljs-property">timeout</span>) &#123;<br>        timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;中断请求&quot;</span>);<br>            xml.<span class="hljs-title function_">abort</span>();<br>            <span class="hljs-built_in">clearInterval</span>(timer);<br>        &#125;, option.<span class="hljs-property">timeout</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>get_xml.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// php需要返回xml数据,必须设置header    </span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/xml; charset= utf-8&#x27;</span>);<br><span class="hljs-comment">// 读取xml文件并返回</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;./1-info.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Ajax传输JSON"><a href="#Ajax传输JSON" class="headerlink" title="Ajax传输JSON"></a>Ajax传输JSON</h2><h3 id="JSON-语法"><a href="#JSON-语法" class="headerlink" title="JSON 语法"></a>JSON 语法</h3><p>JSON(JavaScript Object Notation)：是ECMAScript的子集。作用是进行数据的交换。语法更为简洁，网络传输、机器解析都更为迅速。</p><p>语法规则：</p><ul><li><p>数据在键值对中</p></li><li><p>数据由逗号分隔</p></li><li><p>花括号保存对象</p></li><li><p>方括号保存数组</p></li></ul><p>数据类型：</p><ul><li><p>数字（整数或浮点数）</p></li><li><p>字符串（在双引号中）</p></li><li><p>逻辑值（true 或 false）</p></li><li><p>数组（在方括号中）</p></li><li><p>对象（在花括号中）</p></li><li><p>null</p></li></ul><p>示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 对象</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;fox&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;18&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;car&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-keyword">null</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">// 数组</span><br><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小小胡&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小二胡&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript中：json-字符串-lt-–-gt-js-对象"><a href="#JavaScript中：json-字符串-lt-–-gt-js-对象" class="headerlink" title="JavaScript中：json 字符串 &lt;–&gt; js 对象"></a>JavaScript中：json 字符串 &lt;–&gt; js 对象</h3><p>基本上，所有的语言都有<strong>将 json 字符串转化为该语言对象</strong>的语法。</p><p>比如在 js中：</p><ul><li>JSON.parse()：将JSON字符串转化为 js 对象。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将 JSON 字符串格式化为 js 对象</span><br><span class="hljs-keyword">var</span> jsObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(ajax.<span class="hljs-property">responseText</span>);<br></code></pre></td></tr></table></figure><ul><li>JSON.stringify()：将 JS 对象转化为JSON字符串。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Obj</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;fox&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">skill</span>: <span class="hljs-string">&quot;撩妹&quot;</span><br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Obj</span>);<br><br><span class="hljs-comment">// 将 js 对象格式化为 JSON 字符串</span><br><span class="hljs-keyword">var</span> jsonStr = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title class_">Obj</span>);<br></code></pre></td></tr></table></figure><h3 id="PHP中：json-字符串-lt-–-gt-js-对象"><a href="#PHP中：json-字符串-lt-–-gt-js-对象" class="headerlink" title="PHP中：json 字符串 &lt;–&gt; js 对象"></a>PHP中：json 字符串 &lt;–&gt; js 对象</h3><ul><li><p>**json_decode()**方法：将<code>json</code>字符串转化为变量。</p></li><li><p>**json_encode()**方法：将变量转化为<code>json</code>字符串。</p></li></ul><p>代码举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br>    <span class="hljs-comment">// json字符串</span><br>    <span class="hljs-variable">$jsonStr</span> = <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;itcast&quot;,&quot;age&quot;:54,&quot;skill&quot;:&quot;歌神&quot;&#125;&#x27;</span>;<br>    <span class="hljs-comment">// 字符串转化为 php对象</span><br>      <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$jsonStr</span>));<br><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>      <span class="hljs-comment">// php数组</span><br>      <span class="hljs-variable">$arrayName</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;name&#x27;</span> =&gt;<span class="hljs-string">&#x27;littleFox&#x27;</span> ,<span class="hljs-string">&#x27;age&#x27;</span> =&gt; <span class="hljs-number">13</span> );<br>      <span class="hljs-comment">// php对象 转化为 json字符串</span><br>      <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$arrayName</span>));<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">stdClass Object ( [name] =&gt; itcast [age] =&gt; 54 [skill] =&gt; 歌神 )<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;littleFox&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:13&#125;<br><br></code></pre></td></tr></table></figure><h3 id="兼容ie"><a href="#兼容ie" class="headerlink" title="兼容ie"></a>兼容ie</h3><p>低版本浏览器中要下一个json2.js的文件才能用JSON.parse()方法</p><h3 id="Ajax请求解析json"><a href="#Ajax请求解析json" class="headerlink" title="Ajax请求解析json"></a>Ajax请求解析json</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>读取json数据<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;读取json&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnJson&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnJson&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> ajax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">            ajax.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;myJson.php&#x27;</span>);</span><br><span class="language-javascript">            ajax.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">            ajax.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (ajax.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; ajax.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ajax.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> jsObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(ajax.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsObj);</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">                    str += <span class="hljs-string">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class="language-javascript">                    str += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span> + jsObj.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="language-javascript">                    str += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span> + jsObj.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="language-javascript">                    str += <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = str;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 读取json文件并返回</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./person.json&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">$.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;01.php&#x27;</span>,<span class="hljs-comment">//请求地址</span><br>        <span class="hljs-attr">data</span>:<span class="hljs-string">&#x27;name=fox&amp;age=18&#x27;</span>,<span class="hljs-comment">//发送的数据</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-comment">//请求的方式</span><br>        <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">argument</span>) &#123;&#125;,<span class="hljs-comment">// 请求成功执行的方法</span><br>        <span class="hljs-attr">beforeSend</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">argument</span>) &#123;&#125;,<span class="hljs-comment">// 在发送请求之前调用,可以做一些验证之类的处理</span><br>        <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">argument</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(argument);&#125;,<span class="hljs-comment">//请求失败调用</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h2 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h2><h3 id="get调用"><a href="#get调用" class="headerlink" title="get调用"></a>get调用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/ajax-get.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;test_get.php&#x27;</span>, &#123;</span><br><span class="language-javascript">                <span class="hljs-string">&quot;userName&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;userPwd&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span></span><br><span class="language-javascript">            &#125;, <span class="hljs-number">3000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">            &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请求失败&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;userName&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;userPwd&quot;</span>];<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">objStr</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-comment">// 兼容ie保证拿到最新的url地址</span><br>    obj.<span class="hljs-property">t</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">var</span> res = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-comment">// 拼接字符串  属性名=属性值  url里面不能出现中文, 要把url里面的中文转码</span><br>        res.<span class="hljs-title function_">push</span>(<span class="hljs-built_in">encodeURIComponent</span>(k) + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(obj[k]));<br>    &#125;<br>    <span class="hljs-comment">// 中间用&amp;连接</span><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">url, obj, timeout, success, error</span>) &#123;<br>    <span class="hljs-comment">// 对象转为字符串</span><br>    <span class="hljs-keyword">var</span> str = <span class="hljs-title function_">objStr</span>(obj);<br>    <span class="hljs-comment">// 兼容ie5,6 创建异步对象</span><br>    <span class="hljs-keyword">var</span> xml, timer;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>) &#123;<br>        xml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// code for IE6, IE5</span><br>        xml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br><br>    xml.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, url + <span class="hljs-string">&quot;?&quot;</span> + str);<br>    xml.<span class="hljs-title function_">send</span>();<br>    xml.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (xml.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-built_in">clearInterval</span>(timer);<br>                <span class="hljs-keyword">if</span> (xml.<span class="hljs-property">status</span> === <span class="hljs-number">200</span> &amp;&amp; xml.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span> || xml.<span class="hljs-property">status</span> === <span class="hljs-number">304</span>) &#123;<br>                    <span class="hljs-comment">// console.log(&quot;接收&quot;);</span><br>                    <span class="hljs-title function_">success</span>(xml);<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// console.log(&quot;未接收&quot;);</span><br>                    <span class="hljs-title function_">error</span>(xml);<br><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 判断是否超时</span><br>    <span class="hljs-keyword">if</span> (timeout) &#123;<br>        timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;中断请求&quot;</span>);<br>            xml.<span class="hljs-title function_">abort</span>();<br>            <span class="hljs-built_in">clearInterval</span>(timer);<br>        &#125;, timeout);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="post调用"><a href="#post调用" class="headerlink" title="post调用"></a>post调用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/ajax_tool.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;发送&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;test_post.php&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;userName&quot;</span>: <span class="hljs-string">&quot;zs&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;userPwd&quot;</span>: <span class="hljs-string">&quot;123&quot;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">timeOut</span>: <span class="hljs-number">3000</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(data.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请求失败&quot;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;userName&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;userPwd&quot;</span>];<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">objStr</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 兼容ie保证拿到最新的url地址</span><br>    data.<span class="hljs-property">t</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">var</span> res = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> data) &#123;<br>        <span class="hljs-comment">// 拼接字符串  属性名=属性值  url里面不能出现中文, 要把url里面的中文转码</span><br>        res.<span class="hljs-title function_">push</span>(<span class="hljs-built_in">encodeURIComponent</span>(k) + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data[k]));<br>    &#125;<br>    <span class="hljs-comment">// 中间用&amp;连接</span><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">option</span>) &#123;<br>    <span class="hljs-comment">// 对象转为字符串</span><br>    <span class="hljs-keyword">var</span> str = <span class="hljs-title function_">objStr</span>(option.<span class="hljs-property">data</span>);<br>    <span class="hljs-comment">// 兼容ie5,6 创建异步对象</span><br>    <span class="hljs-keyword">var</span> xml, timer;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>) &#123;<br>        xml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// code for IE6, IE5</span><br>        xml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断请求类型</span><br>    <span class="hljs-keyword">if</span> (option.<span class="hljs-property">type</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&quot;get&quot;</span>) &#123;<br>        xml.<span class="hljs-title function_">open</span>(option.<span class="hljs-property">type</span>, option.<span class="hljs-property">url</span> + <span class="hljs-string">&quot;?&quot;</span> + str);<br>        <span class="hljs-comment">// 发送请求</span><br>        xml.<span class="hljs-title function_">send</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        xml.<span class="hljs-title function_">open</span>(option.<span class="hljs-property">type</span>, option.<span class="hljs-property">url</span>);<br>        xml.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form&quot;</span>);<br>        xml.<span class="hljs-title function_">send</span>(str);<br>    &#125;<br><br>    xml.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (xml.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-built_in">clearInterval</span>(timer);<br>                <span class="hljs-keyword">if</span> (xml.<span class="hljs-property">status</span> === <span class="hljs-number">200</span> &amp;&amp; xml.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span> || xml.<span class="hljs-property">status</span> === <span class="hljs-number">304</span>) &#123;<br>                    <span class="hljs-comment">// console.log(&quot;接收&quot;);</span><br>                    option.<span class="hljs-title function_">success</span>(xml);<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// console.log(&quot;未接收&quot;);</span><br>                    option.<span class="hljs-title function_">error</span>(xml);<br><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 判断是否超时</span><br>    <span class="hljs-keyword">if</span> (option.<span class="hljs-property">timeout</span>) &#123;<br>        timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;中断请求&quot;</span>);<br>            xml.<span class="hljs-title function_">abort</span>();<br>            <span class="hljs-built_in">clearInterval</span>(timer);<br>        &#125;, option.<span class="hljs-property">timeout</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>cookie: 会话跟踪技术 客户端<br>session: 会话跟踪技术 服务端</p><p><strong>cookie作用</strong>:<br>将网页中的数据保存在浏览器中 (默认不保存任何数据)</p><p><strong>生命周期</strong>:<br>默认情况下是一次会话(浏览器关闭后销毁)<br>如果通过expires=设置了过期时间, 并且过期时间,没有过期,那么关闭浏览器再打开还是存在<br>如果通过expires=设置了过期时间, 并且过期时间过期了,那么会立即删除数据</p><p><strong>注意点</strong>:<br>cookie不能一次性设置多条数据, 只能一条一条设置<br>cookie有大小和个数限制,大小:4kb, 个数:20~50</p><p><strong>作用范围</strong><br>同一浏览器同一路径<br><code>document.cookie = &quot;name=zs;path=/;domain=127.0.0.1;&quot;;</code><br><code>path=/; </code>保存到根路径, 这样所有的子路径都能访问<br><code>domain=127.0.0.1;</code> 指定根域名后,二级域名不同也能访问</p><h3 id="cookie封装"><a href="#cookie封装" class="headerlink" title="cookie封装"></a>cookie封装</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">addCookie</span>(<span class="hljs-string">&quot;gender&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-title function_">addCookie</span>(<span class="hljs-string">&quot;score&quot;</span>, <span class="hljs-string">&quot;99&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">addCookie</span>(<span class="hljs-params">key, value, day, path, domain</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1. 处理默认保存路径</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> index = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;/&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> currentPath = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, index);</span><br><span class="language-javascript">            path = path || currentPath;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 2. 处理默认保存的domain</span></span><br><span class="language-javascript">            domain = domain || <span class="hljs-variable language_">document</span>.<span class="hljs-property">domain</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 3. 处理默认过期时间</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (day) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">                date.<span class="hljs-title function_">setDate</span>(date.<span class="hljs-title function_">getDate</span>() + day);</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = key + <span class="hljs-string">&quot;=&quot;</span> + value + <span class="hljs-string">&quot;;expires=&quot;</span> + date.<span class="hljs-title function_">toUTCString</span>() + <span class="hljs-string">&quot;;path=&quot;</span> + path +</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;;domain=&quot;</span> + domain + <span class="hljs-string">&quot;;&quot;</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = key + <span class="hljs-string">&quot;=&quot;</span> + value + <span class="hljs-string">&quot;;path=&quot;</span> + path + <span class="hljs-string">&quot;;domain=&quot;</span> + domain + <span class="hljs-string">&quot;;&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/blog/2019/11/02/ES6/"/>
    <url>/blog/2019/11/02/ES6/</url>
    
    <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>ECMAScript 是 JS 的语言标准。而 ES6 是新的 JS 语法标准。</p><p>PS：严格来说，ECMAScript 还包括其他很多语言的语言标准。</p><p><strong>ES6是2015年6月之后版本的统称</strong></p><p>ES6中增加了很多功能上的不足。比如：<strong>常量、作用域、对象代理、异步处理、类、继承</strong>等。这些在ES5中想实现，比较复杂，但是ES6对它们进行了封装。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>es6中新增了let和const来定义变量:</p><ul><li><p><code>var</code>：ES5 和 ES6中，定义<strong>全局变量</strong>（是variable的简写）。</p></li><li><p><code>let</code>：定义<strong>局部变量</strong>，替代 var。</p></li><li><p><code>const</code>：定义<strong>常量</strong>（定义后，不可修改）。</p></li></ul><p>用 var 定义的全部变量，有时候会污染整个 js 的作用域。</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let声明的变量只在所处于的块级有效, 在一个大括号中使用let关键字声明的变量才具有块级作用域,  var关键字是不具备这个特点的</p><ol><li>防止内层变量覆盖外层变量</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    let a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>        let b = <span class="hljs-number">20</span>;<br>    &#125;<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);  <span class="hljs-comment">// 报错 b is not defined</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);  <span class="hljs-comment">// 报错 a is not defined</span><br></code></pre></td></tr></table></figure><ol start="2"><li>防止循环遍历变成全局变量</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123; <span class="hljs-comment">// let声明变量在&#123;&#125;外面访问不到</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i); <span class="hljs-comment">// var声明变量i在循环外能够访问到</span><br></code></pre></td></tr></table></figure><ol start="3"><li>let声明的变量不存在变量提升</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">console.log(a)<span class="hljs-comment">;</span><br>let a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">; // 报错, 必须先声明再使用</span><br></code></pre></td></tr></table></figure><ol start="4"><li>暂时性死区</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">num</span>); // 报错, 外面的<span class="hljs-built_in">num</span>跟里面的没有关系,不会去外面找<span class="hljs-built_in">num</span><br>    <span class="hljs-built_in">let</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">20</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>声明常量,常量就是值(内存地址)不能变化的量</p><ol><li>具有块级作用域</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    const a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>        const a = <span class="hljs-number">20</span>;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 20</span><br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 10</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用const声明的常量必须赋初始值</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">const</span> <span class="hljs-literal">PI</span>; <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><ol start="3"><li>常量赋值后, 值不能修改</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const PI <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-comment">; // 报错</span><br></code></pre></td></tr></table></figure><ol start="4"><li>复杂数据类型,可以修改数据内部的值, 但是不能直接修改数据</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const ary = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>];<br>ary[<span class="hljs-number">0</span>] = <span class="hljs-number">123</span>; <span class="hljs-comment">// [123, 200] 可以修改数据内部的值</span><br>ary = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-comment">// 报错 不能修改数据</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ary);<br></code></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>ES6新增原始数据类型,用于表示独一无二的值<br>js数据类型: <code>string</code>,<code>boolean</code>,<code>number</code>,<code>undefined</code>,<code>null</code>,<code>object</code>,<code>symbol</code></p><p><code>symbol</code>值通过<code>Symbol</code>函数生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>()<br><br><span class="hljs-keyword">typeof</span> s <span class="hljs-comment">// Symbol</span><br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="数据解构赋值"><a href="#数据解构赋值" class="headerlink" title="数据解构赋值"></a>数据解构赋值</h2><p>数组解构允许我们按对应的关系从数组中提取值, 然后将值赋值给变量</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let ary = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>let [a, b, c, d, e] = ary; <span class="hljs-comment">// 一一对应</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b); <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c); <span class="hljs-comment">// 3</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(d); <span class="hljs-comment">// 多余的为 undefined</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e); <span class="hljs-comment">// 多余的为 undefined</span><br></code></pre></td></tr></table></figure><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><p>按照一定模式，从数组中或对象中提取值，将提取出来的值赋值给另外的变量。<br>对象解构允许我们使用变量的名字匹配对象的属性,  匹配成功将对象属性的值赋值给变量</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lis&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;;<br>let &#123;<br>    name,<br>    age,<br>    sex<br>&#125; = person;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name); <span class="hljs-comment">// lis</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(age); <span class="hljs-comment">// 20</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sex); <span class="hljs-comment">// 男</span><br><br>let &#123;<br>    <span class="hljs-attr">name</span>: myName <span class="hljs-comment">// 左侧用于属性匹配，右侧是变量</span><br>&#125; = person;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myName); <span class="hljs-comment">// lis</span><br></code></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><code>() =&gt; &#123;&#125;</code> 通常赋值给变量, 变量名字就是函数名字: <code>const fn() =&gt; &#123;&#125;</code></p><p>箭头函数是用来简化函数定义语法的</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">const</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> = <span class="hljs-params">()</span> =&gt; </span>&#123;<br>    console.log(<span class="hljs-number">123</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fn</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>在箭头函数中,如果函数体中只有一句代码并且代码的执行结果就是函数的返回值,函数体大括号可以省略</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const <span class="hljs-built_in">sum</span> = <span class="hljs-function">(<span class="hljs-params">n1, n2</span>) =&gt;</span> n1 + n2;<br>const result = <span class="hljs-built_in">sum</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result); <span class="hljs-comment">// 30</span><br><br><span class="hljs-comment">// 如果形参只有一个, 可以省略小括号</span><br>const fn1 = <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>    alert(v);<br>&#125;<br>fn1(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h2 id="箭头函数中this指向"><a href="#箭头函数中this指向" class="headerlink" title="箭头函数中this指向"></a>箭头函数中this指向</h2><p>箭头函数不绑定this,它没有自己的this关键字, 箭头函数中this指向的是函数定义位置中的this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 指向obj</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 指向obj</span><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;;<br><span class="hljs-keyword">const</span> resFn = fn.<span class="hljs-title function_">call</span>(obj);<br><span class="hljs-title function_">resFn</span>();<br></code></pre></td></tr></table></figure><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>剩余参数语法允许我们将个不定数量的参数表示为个数组。<br><code>...args</code> 接受所有实参</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">sum</span> = (...<span class="hljs-keyword">args</span>) =&gt; &#123;<br>    let <span class="hljs-keyword">total</span> = 0;<br>    <span class="hljs-keyword">args</span>.<span class="hljs-keyword">forEach</span>(item =&gt; <span class="hljs-keyword">total</span> += item);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">total</span>;<br>&#125;;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>(10, 20)); <span class="hljs-comment">// 30</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>(10, 20, 30)); <span class="hljs-comment">// 60</span><br></code></pre></td></tr></table></figure><h2 id="剩余参数和数据解构"><a href="#剩余参数和数据解构" class="headerlink" title="剩余参数和数据解构"></a>剩余参数和数据解构</h2><p>数据解构一一对应,s2接收剩下的数据为一个数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let ary = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>];<br>let [s1, ...s2] = ary;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(s1); <span class="hljs-comment">// 张三</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(s2); <span class="hljs-comment">// [李四,王五]</span><br></code></pre></td></tr></table></figure><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列。<br>扩展运算符的格式为<code>...</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">let ary = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-regexp">//</span> ...ary  <span class="hljs-regexp">//</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>console.log(...ary); <span class="hljs-regexp">//</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> 没有逗号是因为,逗号被`console.log`当成参数分隔符了<br>console.log(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-regexp">//</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h2><p>扩展运算符应用于数组合并</p><p>方法一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> ary2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> ary3 = [...ary1, ...ary2];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ary3);<br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> ary1 = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>];<br><span class="hljs-built_in">let</span> ary2 = [<span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>];<br>ary1.<span class="hljs-built_in">push</span>(...ary2);<br>console.<span class="hljs-built_in">log</span>(ary1);<br></code></pre></td></tr></table></figure><h2 id="伪数组转真数组"><a href="#伪数组转真数组" class="headerlink" title="伪数组转真数组"></a>伪数组转真数组</h2><p>将伪数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs); <span class="hljs-comment">// 伪数组</span><br><span class="hljs-keyword">var</span> ary = [...divs];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ary); <span class="hljs-comment">//真数组</span><br>ary.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 转成真数组后可以调用数组下面的方法</span><br></code></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="from扩展"><a href="#from扩展" class="headerlink" title="from扩展"></a>from扩展</h3><p>Array扩展方法:<br>伪数组转真数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arrayLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;q&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;w&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;e&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;r&#x27;</span>,<br>    <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">var</span> ary = <span class="hljs-built_in">Array</span>.from(arrayLike);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ary);<br></code></pre></td></tr></table></figure><p>方法还可以接受第二个参数，作用类似于数组的<code>map</code>方法，</p><p>用来对每个元素进行处理，将处理后的值放入返回的数组。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arrayLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;3&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">var</span> ary = <span class="hljs-built_in">Array</span>.from(arrayLike, item =&gt; item * <span class="hljs-number">2</span>); <span class="hljs-comment">// 每个数组元素都*2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ary);<br></code></pre></td></tr></table></figure><h3 id="find查找成员"><a href="#find查找成员" class="headerlink" title="find查找成员"></a>find查找成员</h3><p>用于找出第一个符合条件的数组成员，如果没有找到返回 undefined</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> ary = [&#123;<br>   <span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span>,<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;张三&#x27;</span><br>&#125;, &#123;<br>   <span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span>,<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;李四&#x27;</span><br>&#125;];<br><span class="hljs-keyword">let</span> target = ary.find(<span class="hljs-type">item</span> =&gt; <span class="hljs-type">item</span><span class="hljs-built_in">.id</span> == <span class="hljs-number">2</span>);<br>console.log(target); // <span class="hljs-built_in">&#123;id</span>: <span class="hljs-number">2</span>,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&quot;李四&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="findIndex查找位置"><a href="#findIndex查找位置" class="headerlink" title="findIndex查找位置"></a>findIndex查找位置</h3><p>用于找出第一个符合条件的数组成员的位置，如果没有找到就返回-1</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> ary = <span class="hljs-literal">[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>]</span>;<br><span class="hljs-keyword">let</span> index = ary.find<span class="hljs-constructor">Index(<span class="hljs-params">item</span> =&gt; <span class="hljs-params">item</span> &gt; 10)</span>;<br>console.log(index); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="includes查找指定值"><a href="#includes查找指定值" class="headerlink" title="includes查找指定值"></a>includes查找指定值</h3><p>表示某个数组是否包含给定的值，返回布尔值,找到返回true, 没找到返回false</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let ary = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>];<br>let result = ary.<span class="hljs-built_in">includes</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result); <span class="hljs-comment">// false</span><br>let result1 = ary.<span class="hljs-built_in">includes</span>(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result1); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>ES6新增的创建字符串的方式，使用反引号定义 `</p><ol><li>模板字符串中可以解析变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">`张三`</span>;<br><span class="hljs-keyword">let</span> sayHi = <span class="hljs-string">`hi,我是<span class="hljs-subst">$&#123;name&#125;</span>`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sayHi); <span class="hljs-comment">// hi,我是张三</span><br></code></pre></td></tr></table></figure><ol start="2"><li>模板字符串中可以换行</li></ol><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> result = &#123;<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    age: <span class="hljs-number">20</span><br>&#125;;<br><span class="hljs-keyword">let</span> html = `<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>$</span><span class="language-xquery">&#123;result<span class="hljs-built_in">.name</span>&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>$</span><span class="language-xquery">&#123;result.age&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>`;<br>console.log(html);<br></code></pre></td></tr></table></figure><ol start="3"><li>在模板字符串中可以调用函数。</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const fn = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是fn函数&#x27;</span>;<br>&#125;<br>let htm = <span class="hljs-string">`我是模板字符串 <span class="hljs-subst">$&#123;fn()&#125;</span>`</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(htm);<br></code></pre></td></tr></table></figure><img src='https://i.loli.net/2019/11/02/96rzfk8psHd2mRh.png' title='Snipaste_2019-11-02_15-46-11.png' /><h2 id="String扩展方法"><a href="#String扩展方法" class="headerlink" title="String扩展方法"></a>String扩展方法</h2><p><code>startsWith()</code>：表示参数字符串是否在原字符串的头部，返回布尔值<br><code>endsWith()</code>：表示参数字符串是否在原字符串的尾部，返回布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-keyword">let</span> r1 = str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;hel&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1); <span class="hljs-comment">// true</span><br><span class="hljs-keyword">let</span> r2 = str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;ld&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r2); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><code>repeat()</code>: 表示将原字符串重复n次，返回一个新字符串。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;y&#x27;</span>.repeat(<span class="hljs-number">5</span>)); <span class="hljs-comment">// yyyyy</span><br></code></pre></td></tr></table></figure><h2 id="创建set数据结构"><a href="#创建set数据结构" class="headerlink" title="创建set数据结构"></a>创建set数据结构</h2><p>ES6提供了新的数据节构set.  它类似于数组，但是成员的都是唯一的，没有重复的值。</p><ol><li>可以用来做搜索历史关键字</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>console.<span class="hljs-built_in">log</span>(s.size); <span class="hljs-comment">// 0</span><br><span class="hljs-type">const</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]);<br>console.<span class="hljs-built_in">log</span>(s1.size); <span class="hljs-comment">// 2 代表存了2个值</span><br></code></pre></td></tr></table></figure><ol start="2"><li>数组去重</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">const</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]);<br>console.<span class="hljs-built_in">log</span>(s2.size); <span class="hljs-comment">// 2  会自动去掉重复的</span><br><span class="hljs-type">const</span> ary = [...s2];<br>console.<span class="hljs-built_in">log</span>(ary); <span class="hljs-comment">// 去重  [&quot;a&quot;, &quot;b&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="set对象实例方法"><a href="#set对象实例方法" class="headerlink" title="set对象实例方法"></a>set对象实例方法</h2><p><code>add(value)</code>：添加某个值，返回Set结构本身<br><code>delete(value)</code>：删除某个值，返回个布尔值，表示删删除是否成功<br><code>has(value)</code>：返回个布尔值，表示该值是否为Set的成员<br><code>clear()</code>：清除所有成员，没有返回值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">const s = new Set();<br><span class="hljs-regexp">//</span> 添加<br>s.add(<span class="hljs-string">&#x27;a&#x27;</span>).add(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-regexp">//</span> 删除<br>s.<span class="hljs-keyword">delete</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-regexp">//</span> 查询否为Set的成员<br>console.log(s.has(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-regexp">//</span> false<br><span class="hljs-regexp">//</span> 清除<br>s.clear();<br>console.log(s.size); <span class="hljs-regexp">//</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="遍历set"><a href="#遍历set" class="headerlink" title="遍历set"></a>遍历set</h2><p>set结构的实例与数组一样，也拥有 <code>forEach</code>方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const s = <span class="hljs-keyword">new</span> Set([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]);<br>s.forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(value);<br></code></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>js中Object本质上是键值对的集合,传统上只能用字符串当作键<br>为了解决这个问题es6提供了Map,类似对象也是键值对,但键的范围不限于字符串任何类型的值都可以作键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-keyword">const</span> o = &#123; <span class="hljs-attr">p</span>: <span class="hljs-string">&#x27;hello world&#x27;</span> &#125;<br><br>m.<span class="hljs-title function_">set</span>(o, <span class="hljs-string">&#x27;content&#x27;</span>)<br>m.<span class="hljs-title function_">get</span>(o)<br></code></pre></td></tr></table></figure><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy可以在目标对象之前加上一次’拦截’,外界对该对象的访问,都必须先通过这层拦截,这时可以对外界的访问进行过滤和改写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// target: 拦截目标对象</span><br><span class="hljs-comment">// handler: 拦截行为对象</span><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target,handler)<br><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;,&#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target,propKey</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">35</span><br>  &#125;<br>&#125;)<br>proxy.<span class="hljs-property">time</span> <span class="hljs-comment">// 35</span><br>proxy.<span class="hljs-property">name</span> <span class="hljs-comment">// 35</span><br>proxy.<span class="hljs-property">title</span> <span class="hljs-comment">// 35</span><br></code></pre></td></tr></table></figure><p><code>get()</code>方法用于拦截某个属性的读取操作,接收三个参数(目标对象,属性名,proxy实例本身[可选])<br><code>set()</code>方法用来拦截某个属性的赋值操作,接收四个参数(目标对象,属性名,属性值,proxy实例本身[可选])</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>异步编程的一种解决方案,比传统的回调函数更合理更强大</p><p>promise是一个容器,里面保存着未来才会有结果的事件,promise是一个对象,可以获取异步操作的消息</p><p>对象的状态不受外界影响,有三种状态:pending(进行中) fulfilled(已成功) rejected(已失败)</p><p>状态一旦改变就不会再变,改变了再对<code>Promise</code>对象添加回调函数,也会立即得到这个结果,和事件(event)不同的是,错过事件再去监听是得不到结果的</p><p><code>Promise</code>无法取消,一旦新建就好立即执行,如果不设置回调函数,内部抛出的错误不会反应到外部,pending状态时是无法得知到了哪一阶段的(刚开始还是即将完成)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// promise对象是一个构造函数</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>) &#123;<br>  <span class="hljs-comment">// promise新建后会立即执行 这里的代码会立即执行,属于同步代码</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(res) <span class="hljs-comment">// 异步</span><br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(err) <span class="hljs-comment">// 异步</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>resolve是成功调用,reject失败调用</p><p>promise实例生成后可以通过<code>then</code>指定成功失败状态的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 两个回调函数作参数 不建议使用</span><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-comment">// success</span><br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>  <span class="hljs-comment">// failure</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><code>then</code>方法接收两个回调函数作为参数,第一个成功调用,第二个失败调用,都是可选的,一般不用<code>then()</code>里面的第二个参数,用<code>catch</code>捕获错误<br><code>catch</code>可以捕获前面<code>then</code>方法执行的错误,类似于<code>try/catch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 建议使用</span><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-comment">// </span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>  <span class="hljs-comment">// </span><br>&#125;)<br></code></pre></td></tr></table></figure><p><code>finally()</code>方法用于不管Promise对象最后的状态如何,都会执行的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;)<br>       .<span class="hljs-title function_">catch</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;)<br>       .<span class="hljs-title function_">finally</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><p><code>finally</code>方法的回调函数不接受任何参数,也就意味着不知道前面promise的状态,这表明<code>finally</code>里面与状态无关</p><p><strong>Promise.all()</strong></p><p>用于将多个promise实例包装成一个新的Promise实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1,p2,p3])<br></code></pre></td></tr></table></figure><p>接受一个数组作为参数,p1,p2,p3都是promise实例,如果不是会先调用<code>Promise.resolve</code>方法,将参数转为Promise实例</p><p>p的状态由p1,p2,p3的状态决定</p><ol><li>p1,p2,p3的状态都变成fulfilled,p的状态才会变成fulfilled,此时它们的返回值组成一个数组,传递给p的回调函数</li><li>只要p1,p2,p3之中有一个被rejected,p的状态就变成rejected,第一个被reject的实例的返回值,会传递给p的回调函数</li></ol><p><strong>Promise.resolve()</strong></p><p>将现有的对象转为Promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span>=&gt;</span><span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;foo&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><p>他是Generator函数的语法糖</p><p>async表示函数里面有异步操作,await表示紧跟后面的表达式需要等待结果<br>async函数返回的是Promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve,ms)<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncPrint</span>(<span class="hljs-params">value,ms</span>) &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">timeout</span>(ms)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;<br><span class="hljs-title function_">asyncPrint</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>,<span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><p>使用<code>try/catch</code>包裹来捕获错误</p>]]></content>
    
    
    <categories>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/blog/2019/11/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/blog/2019/11/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><p>正则表达式（ Regular Expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如</p><ul><li><p>验证表单：用户名表单只能输入英文字母、数字或者下划线，昵称输入框中可以输入中文（<strong>匹配</strong>）.</p></li><li><p>过滤页面内容中的一些敏感词（<strong>替換</strong>），</p></li><li><p>从字符串中获取我们想要的特定部分(<strong>提取</strong>)等。</p></li></ul><h2 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h2><ol><li><p>灵活性、逻辑性和功能性非常的强。</p></li><li><p>可以迅速地用极简单的方式达到字符串的复杂控制。</p></li><li><p>对于刚接触的人来说，比较晦涩难懂。</p></li><li><p>实际开发一般都是直接复制写好的正则表达式,但是要求会使用正则表达式并且根据实际情况修改正则表达式</p></li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li>通过调用RegExp对象的构造函数创建:</li></ol><p>var 变量名 = new RegExp(/表达式/);</p><ol start="2"><li>通过字面量创建:</li></ol><p>var 变量名 = /表达式/;</p><ol start="3"><li>测试正则表达式test():</li></ol><p><code>regexObj.test(str)</code></p><ul><li>regexObj 是写的正则表达式</li><li>str 我们要测试的文本</li><li>就是检测str文本是否符合我们写的正则表达式规范, 符合返回true,不符合返回false</li></ul><h2 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h2><p><code>^</code> 开始<br><code>$</code> 结尾</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^abc/</span>; <span class="hljs-comment">// 开头是abc的返回的都是true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>)); <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> rg1 = <span class="hljs-regexp">/^abc$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>)); <span class="hljs-comment">// false 精确匹配,只能是abc</span><br><br></code></pre></td></tr></table></figure><p><code>|</code> 或者符号</p><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p><code>[]</code> 表示一系列可供选择, 匹配其中一个就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/[abc]/</span>; <span class="hljs-comment">// 包含a或b或c都返回true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> rg1 = <span class="hljs-regexp">/^[abc]$/</span>; <span class="hljs-comment">// 三选一, 只有是a或b或c才返回true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aa&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>); <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><p><code>-</code> []内部范围符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^[a-z]$/</span>; <span class="hljs-comment">// 26个英文字母任何一个字母, 返回true 表示a到z的范围</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;A&#x27;</span>); <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><h2 id="字符组合"><a href="#字符组合" class="headerlink" title="字符组合"></a>字符组合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^[a-zA-Z0-9_-]$/</span>; <span class="hljs-comment">// 26个英文字母(大小写都可以)加0到9的数字,以及下划线和横杠, 任何一个返回true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;A&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>[]里面的^为取反, 不能包括</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^[^a-zA-Z0-9_-]$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;A&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><h2 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h2><p>量词符: 用来设定某个模式出现的次数</p><p><code>*</code> 相当于 &gt;=0 可以出现0次或很多次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^a*$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaa&#x27;</span>); <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><p><code>+</code> 相当于 &gt;=1 可以出现1次或很多次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^a+$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaa&#x27;</span>); <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><p><code>?</code> 相当于 1||0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^a?$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaa&#x27;</span>); <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><p><code>&#123;n&#125;</code> 重复n次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^a&#123;2&#125;$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aa&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaa&#x27;</span>); <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><p><code>&#123;n,&#125;</code> 大于等于n次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^a&#123;2,&#125;$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aa&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaa&#x27;</span>); <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><p><code>&#123;n,i&#125;</code> 大于等于n 并且小于等于i 次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^a&#123;3,6&#125;$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaa&#x27;</span>); <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><h2 id="括号总结"><a href="#括号总结" class="headerlink" title="括号总结"></a>括号总结</h2><p><code>[]</code> 匹配括号内任意字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[abc]$/</span>; <span class="hljs-comment">// a或b或c</span><br></code></pre></td></tr></table></figure><p><code>&#123;&#125;</code> 表示重复的次数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc&#123;3&#125;$/</span>; <span class="hljs-comment">// 没有[],只让&#123;&#125;前面的重复3次 abccc</span><br></code></pre></td></tr></table></figure><p><code>()</code> 表示优先级</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^(abc)&#123;3&#125;$/</span>; <span class="hljs-comment">// abc重复3次 abcabcabc</span><br></code></pre></td></tr></table></figure><h2 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h2><p><code>\d</code> 匹配0-9之间的任一数字，相当于[0-9]<br><code>\D</code> 匹配所有0-9以外的字符，相当于[^0-9]<br><code>\w</code> 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]<br><code>\W</code> 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]<br><code>\s</code> 匹配空格(包括换行符、制表符、空格符等),相等于[\t\r\n\v\f]<br><code>\S</code> 匹配非空格的字符，相当于[^\t\r\n\v\f]</p><h2 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h2><p>替换: replace<br><code>replace(/被替换的/[switch], &#39;替换后的&#39;)</code><br>switch参数:<br><code>g</code>: 全局匹配<br><code>i</code>: 忽略大小写<br><code>gi</code>: 全局匹配+忽略大小写</p><p>比如把某些词替换成*号</p><p><code>text.value.replace(/智障|沙雕/g, &#39;**&#39;);</code></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数进阶</title>
    <link href="/blog/2019/11/02/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    <url>/blog/2019/11/02/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数的定义方式:</p><ol><li>自定义函数(命名函数)</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fu</span><span class="hljs-params">()</span> &#123;&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>函数表达式(匿名函数)</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> = <span class="hljs-title">function</span><span class="hljs-params">()</span></span> &#123;&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>利用 <code>new Function(&#39;参数1&#39;, &#39;参数2&#39;, &quot;函数体&#39;);</code> 麻烦, 不常用,仅作于了解</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Function</span>(<span class="hljs-params"><span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;console.log(x+y)&#x27;</span></span>);<br><span class="hljs-title function_">f</span>(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">2</span></span>);<br></code></pre></td></tr></table></figure><ol start="4"><li>所有的函数都是Function的实例(对象), 函数也属于对象</li></ol><h2 id="函数的调用方式和this指向"><a href="#函数的调用方式和this指向" class="headerlink" title="函数的调用方式和this指向"></a>函数的调用方式和this指向</h2><ol><li>普通函数 this指向window</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">fn</span>() &#123;<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-number">233</span>);<br>&#125;;<br><span class="hljs-built_in">fn</span>(); <span class="hljs-comment">// fn.call();</span><br></code></pre></td></tr></table></figure><ol start="2"><li>对象的方法 this指向的是对象 o</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>    &#125;<br>&#125;;<br>o.sayHi();<br></code></pre></td></tr></table></figure><ol start="3"><li>构造函数 this指向的是zz这个实例对象, 原型对象里this指向的也是zz</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">233</span>);<br>&#125;;<br><span class="hljs-keyword">var</span> zz = <span class="hljs-keyword">new</span> Star();<br></code></pre></td></tr></table></figure><ol start="4"><li>绑定事件函数 this指向的是函数的调用者btn按钮对象</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">btn.onclick = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 点击按钮就调用</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">233</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="5"><li>定时器函数 this指向window</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">setInterval(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 1秒后调用一次</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">233</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><ol start="6"><li>立即执行函数 this指向window</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 自动调用</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">233</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="改变函数内部的this指向"><a href="#改变函数内部的this指向" class="headerlink" title="改变函数内部的this指向"></a>改变函数内部的this指向</h2><p>改变函数内部this指向: <code>call()  apply()  bind()</code></p><ol><li>call() 调用函数,改变this指向<br>语法: <code>fun.call(thisArg, arg1, arg2,...);</code><br><code>thisArg</code>: 当前调用函数this的指向对象<br><code>arg1, arg2</code>: 传递的其他参数<br>主要作用可以实现继承</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a + b);<br>&#125;;<br>fn.call(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// fn的this指向o</span><br></code></pre></td></tr></table></figure><ol start="2"><li>apply() 调用函数,改变this指向<br>语法: <code>fun.apply(thisArg,[argsArray]);</code><br><code>thisArg</code>：在fun函数运行时指定的this值<br><code>argsArray</code>：传递的值，必须包含在数组(伪数组)里面<br>主要用于数组相关, 比如求数组中最大值</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">33</span>, <span class="hljs-number">45</span>, <span class="hljs-number">657</span>, <span class="hljs-number">23</span>, <span class="hljs-number">53767</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = Math.<span class="hljs-built_in">max</span>.apply(Math, arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">max</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>bind() 只改变this指向<br>语法: <code>fun.bind(thisArg, arg1, arg2,...)</code><br><code>thisArg</code>：在fun函数运行时指定的this值<br><code>arg1，arg2</code>：传递的其他参数<br>返回由指定的this值和初始化参数改造的原函数拷贝</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> f = fn.bind(o, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-attribute">f</span>();<br></code></pre></td></tr></table></figure><p>不会调用原函数, 可以改变函数内部的this指向<br>返回的是原函数this之后产生的新函数</p><h2 id="call-apply-bind总结"><a href="#call-apply-bind总结" class="headerlink" title="call apply bind总结"></a>call apply bind总结</h2><p><strong>相同点:</strong></p><ul><li>都可以改变函数内部的this指向</li></ul><p><strong>区别点：</strong></p><ol><li>call和apply会调用函数并且改变函数内部this指向</li><li>call和apply传递的参数不一样call传递参数arg1，arg2…形式, apply必须数组形式[arg]</li><li>bind不会调用函数, 可以改变函数内部this指向</li></ol><p><strong>主要应用场景：</strong></p><ol><li>call经常做继承</li><li>apply经常跟数组有关系。比如借助于数学对象实现数组最大值最小值</li><li>bind不调用函数, 但是还想改变this指向,比如改变定时器内部的this指向</li></ol><h2 id="ES5严格模式"><a href="#ES5严格模式" class="headerlink" title="ES5严格模式"></a>ES5严格模式</h2><h3 id="什么是严格模式"><a href="#什么是严格模式" class="headerlink" title="什么是严格模式"></a>什么是严格模式</h3><p>JavaScript除了提供正常模式外(混杂模式)，还提供了<strong>严格模式(strict mode)</strong>.ES5的严格模式是釆用具有限制性JavaScript变体的种方式，即在严格的条件下运行JS代码。</p><p>严格模式在ie10以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><p>严格模式对正常的 JavaScript语义做了一些更改：</p><ul><li>消除了 Javascript语法的一些不合理、不严谨之处，减少了一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全。</li><li>提高编译器效率，增加运行速度</li><li>禁用了在 ECMAScript的未来版本中可能会定义的一些语法，为未来新版本的 Javascript做好铺垫。比如一些保留字如： class, enum, export, extends, import, super不能做变量名</li></ul><p>严格模式可以应用到<em>整个脚本</em>或<em>个别函数</em>中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p><ol><li><strong>为脚本开启严格模式</strong><br>为整个脚本文件开启严格模式，需要在所有语句之前放一个特定语句<code>&quot; use strict&quot;；</code>（或<code>&#39; use strict&#39;；</code>）.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-string">&quot;use strict&quot;</span>; <span class="hljs-comment">// 以下代码执行严格模式</span><br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>为脚本开启严格模式</strong></li></ol><p>有的 script基本是严格模式，有的 script脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建个作用域而不影响其他script脚本文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-string">&quot;use strict&quot;</span>; <span class="hljs-comment">// 这个函数内执行严格模式</span><br>        <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fu</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    &#125;) ();<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>为函数开启严格模式</strong></li></ol><p>要给某个函数开启严格模式，需要把<code>&quot;use strict&quot;；</code>（或<code>&#39;use strict;</code>）声明放在函数体所有语句之前。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br>     <span class="hljs-comment">// 这个函数内代码执行严格模式</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-comment">// 这个函数内代码还是普通模式</span><br>&#125;<br>&lt;/script&gt;  <br><br></code></pre></td></tr></table></figure><h3 id="严格模式下this指向问题"><a href="#严格模式下this指向问题" class="headerlink" title="严格模式下this指向问题"></a>严格模式下this指向问题</h3><ul><li><p>以前在全局作用域函数中的this指向 window对象。</p></li><li><p>严格模式下全局作用域中函数中的this是 undefined</p></li><li><p>以前构造函数时不加new也可以调用当普通函数，this指向全局对象</p></li><li><p>严格模式下如果构造函数不加new调用，this指向的是undefined,给他赋值会报错。</p></li><li><p>new实例化的构造函数指向创建的对象实例</p></li><li><p>定时器ths还是指向 window</p></li><li><p>事件、对象还是指向调用者。</p></li></ul><h3 id="函数变化"><a href="#函数变化" class="headerlink" title="函数变化"></a>函数变化</h3><ul><li>函数不能有重名的参数</li><li>函数必须声明在顶层, 新版本的JavaScript会引入”块级作用域”（ES6中已引入）.为了与新版本接轨不允许在非函数的代码块内声明函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> () &#123;<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 不合法, for里面声明函数也不合法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h2><p>1、js对象(数组) –&gt; json对象(数组)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj/arr)<br></code></pre></td></tr></table></figure><p>2、json对象(数组) –&gt; js对象(数组)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(json)<br></code></pre></td></tr></table></figure><p>上面这两个方法是ES5中提供的。</p><p>通常说的“json字符串”，只有两种：<strong>json对象、json数组</strong>。</p><p><code>typeof json字符串</code>的返回结果是string。</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数是对其他函数进行操作的函数, 以下2种fn为高阶函数</p><p>接收函数作为参数  最典型的是回调函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">fn</span>(callback) &#123;<br>    callback &amp;&amp; <span class="hljs-built_in">callback</span>();<br>&#125;<br><span class="hljs-built_in">fn</span>(function() &#123;<br>    <span class="hljs-built_in">alert</span>(&#x27;hi&#x27;)<br>&#125;);<br></code></pre></td></tr></table></figure><p>将函数作为返回值输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包指有权访问另一个函数作用域中变量的函数,(闭包是函数)</p><p>简单理解就是: 一个作用域可以访问另一个函数内部的局部变量, 被访问的是闭包函数</p><p>闭包的主要作用: 延伸了变量的作用范围 </p><ol><li>内部访问:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num); <span class="hljs-comment">// 10</span><br>    &#125;<br>    <span class="hljs-title function_">fun</span>();<br>&#125;<br><span class="hljs-title function_">fn</span>(); <br><br></code></pre></td></tr></table></figure><ol start="2"><li>外部访问:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 直接返回整个函数给 f</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> f = <span class="hljs-title function_">fn</span>(); <br><span class="hljs-title function_">f</span>(); <span class="hljs-comment">// 打印10</span><br><br></code></pre></td></tr></table></figure><p>立即执行函数称为小闭包, 因为它里面的任何函数都可以使用形参这个变量</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>如果一个函数在内部可以调用其本身, 那么这个函数就是递归函数</p><p>简单理解：函数内部自己调用自己这个函数就是递归函数<br>递归函数的作用和循环效果一样<br>由于递归很容易发生“栈溢出”错误(stack overflow)，所以必须要加退出条件 return</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-title function_">fn</span>();<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><p>浅拷贝只是拷贝一层, 更深层次对象级别的只拷贝引用(地址)<br>深拷贝拷贝多层, 每一级别的数据都会拷贝</p><p>es6新增浅拷贝的语法糖 推荐使用:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Object.assign(o, obj); <span class="hljs-regexp">//</span> 对象obj拷贝给对象o<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构造函数和原型</title>
    <link href="/blog/2019/11/02/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B/"/>
    <url>/blog/2019/11/02/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h2><p>ES6之前js中没有引入类的概念, 对象不是基于类创建的,而是用构造函数来定义对象和它们的特征</p><ol><li>利用 new Object()创建对象</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure><ol start="2"><li>利用对象字面量创建对象</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var obj2 <span class="hljs-operator">=</span> &#123;&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>利用构造函数创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;唱歌&#x27;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>构造函数是一种特殊的函数， 主要用来初始化对象， 即为对象成员变量赋初始值， 它总与new一起使用。 </p><p>我们可以把对象中一些公共的属性和方法抽取出来， 然后封装到这个函数里面。</p><p>new在执行时会做四件事情：<br>①在内存中创建一个新的空对象<br>②让this指向这个新的对象<br>③执行构造函数里面的代码，给这个新对象添加属性和方法。<br>④返回这个新对象（所以构造函数里面不需要 return）.</p><h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;唱歌&#x27;</span>);<br><br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> ly = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;LY&#x27;</span>, <span class="hljs-number">19</span>);<br></code></pre></td></tr></table></figure><ol><li>实例成员就是构造函数内部通过this添加的成员 <code>uname age sing</code> 就是实例成员<br>实例成员只能通过实例化的对象来访问</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ly.sing()<span class="hljs-comment">;</span><br>// console.log(Star.uname)<span class="hljs-comment">;   不可以通过构造函数来访问实例成员</span><br></code></pre></td></tr></table></figure><ol start="2"><li>静态成员 在构造函数本身上添加的成员 </li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">Star.sex = <span class="hljs-string">&#x27;女&#x27;</span>; <span class="hljs-regexp">//</span> 添加静态成员<br><span class="hljs-regexp">//</span>  静态成员只能通过构造函数来访问<br>console.log(Star.sex);<br><span class="hljs-regexp">//</span> console.log(ly.sex); 不能通过对象来访问<br></code></pre></td></tr></table></figure><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>构造函数方法会浪费内存, 每个实例对象的方法都会开辟内存空间来存放同一个函数.<br>构造函数通过原型分配的函数是所有对象共享的</p><p>JavaScript规定，每一个构造函数都有一个 prototype属性，指向另一个对象。这个 prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有</p><p>我们可以把那些不变的方法，直接定义在 prototype对象上，这样所有对象的实例就可以共享这些方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br><br>          <span class="hljs-comment">// 公共属性定义到构造函数里面, 公共方法放到原型对象上</span><br>          <span class="hljs-comment">// 原型是:对象</span><br>          <span class="hljs-comment">// 原型的作用是:方法共享</span><br>          <span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;唱歌&#x27;</span>);<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> ly = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;LY&#x27;</span>, <span class="hljs-number">23</span>);<br>      <span class="hljs-keyword">var</span> hs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;HS&#x27;</span>, <span class="hljs-number">20</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ly.<span class="hljs-property">sing</span> === hs.<span class="hljs-property">sing</span>); <span class="hljs-comment">// true ,地址是一样的,指向同一个方法</span><br>      ly.<span class="hljs-title function_">sing</span>();<br>      hs.<span class="hljs-title function_">sing</span>();<br></code></pre></td></tr></table></figure><h2 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h2><p><strong>为什么对象可以使用构造函数原型对象里面的属性和方法?</strong></p><p>对象都会有一个属性__proto__指向构造函数的 prototype原型对象，之所以我们对象可以使用构造函数prototype原型对象的属性和方法，就是因为对象有 __proto__原型的存在</p><p>__proto__对象原型和原型对象 prototype是等价的<br>__proto__对象原型的意义就在于为对象的查找机制提供个方向，或者说一条路线，但是它是一个非标准属性, 因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ly = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;LY&#x27;</span>, <span class="hljs-number">23</span>);S<br><span class="hljs-keyword">var</span> hs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;HS&#x27;</span>, <span class="hljs-number">20</span>);<br>ly.<span class="hljs-title function_">sing</span>();<br>hs.<span class="hljs-title function_">sing</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ly); <span class="hljs-comment">// 对象身上系统自己添加一个__proto__指向构造函数的原型对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ly.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br></code></pre></td></tr></table></figure><p>方法的查找规则:<br>首先看ly 对象身上是否有sing方法，如果有就执行这个对象上的sing<br>如果没有sing这个方法，因为有__proto__的存在，就去构造函数原型对象 prototype身上去查找sing这个方法</p><h2 id="原型constructor构造函数"><a href="#原型constructor构造函数" class="headerlink" title="原型constructor构造函数"></a>原型constructor构造函数</h2><p>如果我们修改了原来的原型对象, 给原型对象赋值的是一个对象,会覆盖原来的constructor属性,则必须手动利用constructor指回原来的构造函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>          this.uname = uname;<br>          this.age = age;<br>      &#125;<br>      Star.prototype = &#123;<br>          <span class="hljs-attr">constructor</span>: Star,<br>          <span class="hljs-attr">sing</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;唱歌&#x27;</span>);<br>          &#125;,<br>          <span class="hljs-attr">movie</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;电影&#x27;</span>);<br><br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> ly = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;LY&#x27;</span>, <span class="hljs-number">23</span>);<br>      <span class="hljs-keyword">var</span> hs = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;HS&#x27;</span>, <span class="hljs-number">20</span>);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Star.prototype);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ly.__proto__);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Star.prototype.constructor);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ly.__proto__.constructor);<br></code></pre></td></tr></table></figure><p>Star构造函数通过<code>Star.prototype</code>指向Star原型对象<br>Star原型对象通过<code>Star.prototype.constructor</code> 指回Star构造函数<br>可以通过构造函数创建实例对象ly ,实例对象ly可以通过<code>ly.__proto__</code>指向Star原型对象,也可以通过<code>ly.__proto__.constructor</code>指回Star构造函数</p><h2 id="JavaScript的成员查找机制（规则）"><a href="#JavaScript的成员查找机制（规则）" class="headerlink" title="JavaScript的成员查找机制（规则）"></a>JavaScript的成员查找机制（规则）</h2><p><img src="https://i.loli.net/2019/11/02/HPXJiCFtsuAmVgk.png" alt="原型链.png"></p><ul><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性</li><li>如果没有就查找它的原型（也就是__proto__指向的 prototype原型对象）.</li><li>如果还没有就查找原型对象的原型（ Object的原型对象）</li><li>依此类推一直找到 Object为止(null)</li><li>__proto__对象原型的意义就在于为对象成员查找机制提供个方向，或者说一条路线。</li></ul><p>这就是原型链</p><h2 id="原型对象中this指向"><a href="#原型对象中this指向" class="headerlink" title="原型对象中this指向"></a>原型对象中this指向</h2><ol><li><p>构造函数里面this指向的是对象实例 </p></li><li><p>原型对象函数里面的this指向的是实例对象</p></li></ol><h2 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h2><p>通过原型对象, 对原来的内置对象进行扩展自定义的方法<br>比如给数组增加自定义求和功能</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">sum</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; this.<span class="hljs-built_in">length</span>; i++) &#123;<br>              <span class="hljs-built_in">sum</span> += this[i];<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>;<br>      &#125;<br>      <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">sum</span>()); <span class="hljs-comment">// 6</span><br>      <span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1.<span class="hljs-built_in">sum</span>()); <span class="hljs-comment">// 66</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：数组和字符串内置对象不能给原型象覆盖操作 <code>Array.prototype=&#123;&#125;</code>，<br>只能是<code> Array.prototype.xxx= function()&#123;&#125;</code>的方式</p><h2 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h2><p>ES6之前并没有给我们提供 extends继承。我们可以通过构造函数+原型对象模拟实现继承，被称为组合继承。</p><p>调用这个函数, 并且修改函数运行时this指向</p><p><code>fun.call(thisArg, arg1, arg2,...);</code><br><code>thisArg</code>: 当前调用函数this的指向对象<br><code>arg1, arg2</code>: 传递的其他参数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fu</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;阿斯顿&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x + y);<br>&#125;<br><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span><br>&#125;;<br><span class="hljs-comment">// fu(); 原来指向的时window</span><br>fu.call(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// call改变了函数的指向,现在指向o这个对象</span><br></code></pre></td></tr></table></figure><h2 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h2><p>如果函数不需要立即调用, 但是又想改变这个函数内部的this指向时用<code>bind()</code></p><p>点击按钮后禁用按钮, 3秒后解禁<br>不能立即调用函数, 要让定时器自动调用函数, 所以只需要改变this指向,<br>因为setTimeout指向的是window, window没有disabled属性<br>所以要在定时器外面用bind将this指向btn按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// this指向btn按钮</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// this指向btn按钮</span><br>        &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">3000</span>); <span class="hljs-comment">// 在定时器外面将this指向btn按钮</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="借用父构造函数继承属性"><a href="#借用父构造函数继承属性" class="headerlink" title="借用父构造函数继承属性"></a>借用父构造函数继承属性</h2><p>ES6之前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父构造函数</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params">uname, age</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>      &#125;<br><br>      <span class="hljs-comment">// 子构造函数</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">uname, age</span>) &#123;<br>          <span class="hljs-comment">// this 指向的是子构造函数的对象实例</span><br>          <span class="hljs-title class_">Father</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, uname, age); <span class="hljs-comment">// 把father里面的this指向son里面的this</span><br>      &#125;<br>      <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-string">&#x27;零&#x27;</span>, <span class="hljs-number">15</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son);<br></code></pre></td></tr></table></figure><h2 id="利用原型对象继承方法"><a href="#利用原型对象继承方法" class="headerlink" title="利用原型对象继承方法"></a>利用原型对象继承方法</h2><p>ES6之前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">Father</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">money</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">100000</span>);<br><br>&#125;;<br><span class="hljs-comment">// 子构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-comment">// this 指向的是子构造函数的对象实例</span><br>    <span class="hljs-title class_">Father</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, uname, age); <span class="hljs-comment">// 把father里面的this指向son里面的this</span><br>&#125;<br><span class="hljs-comment">// Son.prototype = Father.prototype; 直接赋值,修改子原型对象,父原型对象也会变,(指向的是同一个地址)</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(); <span class="hljs-comment">// 会覆盖Son里面的prototype</span><br><span class="hljs-comment">// 指回原来的构造函数</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Son</span>;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-string">&#x27;零&#x27;</span>, <span class="hljs-number">15</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Father</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>);<br></code></pre></td></tr></table></figure><h2 id="类的本质"><a href="#类的本质" class="headerlink" title="类的本质"></a>类的本质</h2><p>类的本质就是一个函数, 可以认为类是构造函数的另一种写法<br>ES6之前通过构造函数 + 原型实现面向对象编程</p><p>(1)构造函数有原型对象 prototype<br>(2)构造函数原型对象 prototype里面有 constructor指向构造函数本身<br>(3)构造函数可以通过原型对象添加方法<br>(4)构造函数创建的实例对象有__proto__原型指向构造函数的原型对象<br>ES6通过类实现面向对象编程(类就是语法糖)</p><p>语法糖就是一种便捷写法，简单理解，有两种方法可以实现同样的功能但是一种写法更加清晰、方便，那么这个方法就是语法糖</p><h2 id="遍历数组forEach"><a href="#遍历数组forEach" class="headerlink" title="遍历数组forEach"></a>遍历数组forEach</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>arr.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, array</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;每个数组元素&#x27;</span> + value);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;每个数组元素的索引号&#x27;</span> + index);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;数组本身&#x27;</span> + <span class="hljs-built_in">array</span>);<br>    <span class="hljs-built_in">sum</span> += value;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>);<br></code></pre></td></tr></table></figure><h2 id="筛选数组filter"><a href="#筛选数组filter" class="headerlink" title="筛选数组filter"></a>筛选数组filter</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 筛选出偶数</span><br>      <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br>      <span class="hljs-keyword">var</span> newArr = arr.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, index</span>) &#123;<br>          <span class="hljs-keyword">return</span> value % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>      &#125;);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newArr);<br></code></pre></td></tr></table></figure><h2 id="查找数组some"><a href="#查找数组some" class="headerlink" title="查找数组some"></a>查找数组some</h2><p>查找数组中是否有满足条件的元素<br><code>some()</code>方法用于检测数组中的元素是否满足指定条件。通俗点查找数组中是否有满足条件的元素</p><p>注意它返回值是布尔值,如果查找到这个元素,就返回true，如果查找不到就返回 false<br>如果找到第一个满足条件的元素则终止循环,不再继续查找<br>参数:<br><code>currentValue</code>：数组当前项的值<br><code>index</code>：数组当前项的索引<br><code>arr</code>: 数组对象本身</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">6</span>, <span class="hljs-number">53</span>];<br>       <span class="hljs-keyword">var</span> flag = arr.some(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, index</span>) &#123;<br>           <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">20</span>;<br>       &#125;);<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(flag);<br></code></pre></td></tr></table></figure><ol><li><code>fi1ter</code>是查找满足条件的元素, 返回的是一个数组, 而且是把所有满足条件的元素返回回来</li><li><code>some</code>也是查找满足条件的元素是否存在, 返回的是一个布尔值,而且是把所有满足条件的元素返回回来</li></ol><h2 id="去除两侧空格"><a href="#去除两侧空格" class="headerlink" title="去除两侧空格"></a>去除两侧空格</h2><p>用来去除用户输入的空格, 避免用户输入空格提交</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;  h t m l  &#x27;</span>;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str);<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.<span class="hljs-built_in">trim</span>()); <span class="hljs-comment">// 去除两侧空格</span><br></code></pre></td></tr></table></figure><h2 id="Object修改属性"><a href="#Object修改属性" class="headerlink" title="Object修改属性"></a>Object修改属性</h2><p><code>Object.defineProperty()</code>定义对象中新属性或修改原有的属性。</p><p>语法: <code>Object.defineProperty（obj，prop，descriptor）</code><br>参数:<br><code>obj</code>：必需。目标对象<br><code>prop</code>：必需。需定义或修改的属性的名字<br><code>descriptor</code>：必需。目标属性所拥有的[特性]</p><p><code>descriptor</code>说明：以对象形式{ }书写<br>参数:<br><code>value</code>：设置属性的值默认为 undefined<br><code>writable</code>：值是否可以重写(修改)。 true | false 默认为 false<br><code>enumerable</code>：目标属性是否可以被枚举(遍历)。tue | false默认为 false<br><code>configurable</code>：目标属性是否可以被删除或是否可以再次修改[特性] true | false默认为false</p><p>案例:</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> obj = &#123;<br>           <span class="hljs-attribute">id:</span><span class="hljs-string"> 1,</span><br><span class="hljs-string">           pname</span>: <span class="hljs-string">&#x27;MI&#x27;</span>,<br>           <span class="hljs-attribute">price</span>: <span class="hljs-number">1299</span><br>       &#125;;<br>       <span class="hljs-comment">// 以前的对象添加修改属性的方式：</span><br>       <span class="hljs-comment">// obj.num = 1000;</span><br><br>       <span class="hljs-comment">// 新方法</span><br>       <span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;num&#x27;</span>, &#123;<br>           <span class="hljs-attribute">value</span>: <span class="hljs-number">1000</span><br>       &#125;);<br>       <span class="hljs-built_in">console</span>.log(obj);<br><br></code></pre></td></tr></table></figure><h2 id="Object遍历对象属性"><a href="#Object遍历对象属性" class="headerlink" title="Object遍历对象属性"></a>Object遍历对象属性</h2><p>用于获得对象自身所有的属性<br>返回一个由属性名组成的数组</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attribute">id:</span><span class="hljs-string"> 1,</span><br><span class="hljs-string">    pname</span>: <span class="hljs-string">&#x27;MI&#x27;</span>,<br>    <span class="hljs-attribute">price</span>: <span class="hljs-number">1299</span><br>&#125;;<br><span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">Object</span>.keys(obj);<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [&quot;id&quot;, &quot;pname&quot;, &quot;price&quot;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript面向对象</title>
    <link href="/blog/2019/11/02/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/blog/2019/11/02/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p><strong>面向过程:</strong><br>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</p><p><strong>面向对象:</strong><br>是把事物分解成为一个个对象，然后由对象之间分工与合作。</p><p>面向对象是以对象功能来划分问题,而不是步骤, 在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工</p><p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p><p><strong>面向对象的特性:</strong></p><ol><li>封装性</li><li>继承性</li><li>多态性</li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>面向过程优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。<br>缺点： 没有面向对象易维护、 易复用、 易扩展</p><p>面向对象优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统， 使系统更加灵活、 更加易于维护<br>缺点：性能比面向过程低</p><h2 id="类和方法"><a href="#类和方法" class="headerlink" title="类和方法"></a>类和方法</h2><p>在 JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等</p><p>对象是由属性和方法组成的</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><p>类抽象了对象的公共部分，它泛指某一大类（class） 比如 手机</p><p>对象特指某一个，通过类实例化一个具体的对象     比如 小米8</p><p>面向对象的思维特点：</p><ol><li>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板)</li><li>对类进行实例化获取类的对象</li></ol><h2 id="ES6中的类和对象"><a href="#ES6中的类和对象" class="headerlink" title="ES6中的类和对象"></a>ES6中的类和对象</h2><h3 id="创建类与添加方法"><a href="#创建类与添加方法" class="headerlink" title="创建类与添加方法"></a>创建类与添加方法</h3><p>语法:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>    <span class="hljs-comment">// 类主体</span><br>&#125;<br></code></pre></td></tr></table></figure><p>创建实例:<br><code>var xx = new name();</code><br>类必须使用new实例化对象</p><p><code>constructor()</code>方法是类的构造函数(默认方法)，用于传递参数,返回实例对象，通过new命令生成对象实例时,自动调用该方法。如果没有显示定义,类内部会自动给我们创建个 <code>constructor()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> &#123;<br>          <span class="hljs-title function_">constructor</span>(<span class="hljs-params">uname, age</span>) &#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>          &#125;<br>          <span class="hljs-title function_">sing</span>(<span class="hljs-params">song</span>) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> + song);<br><br>          &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">var</span> ee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;22&#x27;</span>, <span class="hljs-number">16</span>);<br>      <span class="hljs-keyword">var</span> ss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;33&#x27;</span>, <span class="hljs-number">17</span>);<br></code></pre></td></tr></table></figure><p>注意:</p><ol><li>类里面的所有函数不需要写function</li><li>多个函数之间不需要添加逗号分隔</li></ol><p>（1）通过class关键字创建类，类名我们还是习惯性定义首字母大写<br>（2）类里面有个 constructor函数，可以接受传递过来的参数，同时返回实例对象<br>（3） constructor函数只要new生成实例时，就会自动调用这个函数，如果我们不写这个函数，类也会自动生成这个函数<br>（4）生成实例new不能省略<br>（5）最后注意语法规范，创建类类名后面不要加小括号，生成实例类名后面加小括号，构造函数不需要加function</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>子类可以继承父类的一些属性和方法</p><p>属性:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123; <span class="hljs-comment">// 父类</span><br>    constructor() &#123;<br>    &#125;<br>    money() &#123;<br>        console.log(<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123; <span class="hljs-comment">// 子类继承父类</span><br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-type">Son</span>();<br>son.money(); <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><p>方法:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>          constructor(x, y) &#123;<br>              <span class="hljs-keyword">this</span>.x = x;<br>              <span class="hljs-keyword">this</span>.y = y;<br>          &#125;<br>          sum() &#123;<br>              console.log(<span class="hljs-keyword">this</span>.x + <span class="hljs-keyword">this</span>.y);<br>          &#125;<br>      &#125;<br>      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123; <span class="hljs-comment">// 子类继承父类</span><br>          constructor(x, y) &#123;<br>              <span class="hljs-keyword">super</span>(x, y); <span class="hljs-comment">// 调用父类里面的构造函数</span><br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-type">Son</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>      son.sum(); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h3 id="super关键字调用"><a href="#super关键字调用" class="headerlink" title="super关键字调用"></a>super关键字调用</h3><p>继承中的属性或者方法按照就近原则查找<br>子类有就按照子类的来,子类没有就去父类找</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>            say() &#123;<br>                <span class="hljs-keyword">return</span> &#x27;我是父类方法&#x27;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>            say() &#123;<br>                console.log(&#x27;子类的方法&#x27;); <span class="hljs-comment">// 输出: 子类的方法</span><br>                console.log(<span class="hljs-keyword">super</span>.say()); <span class="hljs-comment">// 输出: 我是父类方法</span><br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-type">Son</span>();<br>        son.say();<br></code></pre></td></tr></table></figure><h3 id="继承父类保留自己的方法"><a href="#继承父类保留自己的方法" class="headerlink" title="继承父类保留自己的方法"></a>继承父类保留自己的方法</h3><p>子类继承父类方法同时扩展自己的方法:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>          constructor(x, y) &#123;<br>              <span class="hljs-keyword">this</span>.x = x;<br>              <span class="hljs-keyword">this</span>.y = y;<br>          &#125;<br>          sum() &#123;<br>              console.log(<span class="hljs-keyword">this</span>.x + <span class="hljs-keyword">this</span>.y);<br><br>          &#125;<br>      &#125;<br>      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>          constructor(x, y) &#123;<br>              <span class="hljs-comment">// 利用super调用父类的构造函数</span><br>              <span class="hljs-comment">// super必须在子类this之前调用</span><br>              <span class="hljs-keyword">super</span>(x, y);<br>              <span class="hljs-keyword">this</span>.x = x;<br>              <span class="hljs-keyword">this</span>.y = y;<br>          &#125;<br><br>          subtract() &#123;<br>              console.log(<span class="hljs-keyword">this</span>.x - <span class="hljs-keyword">this</span>.y);<br><br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-type">Son</span>(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>      son.sum(); <span class="hljs-comment">// 8</span><br>      son.subtract(); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="使用类的注意事项"><a href="#使用类的注意事项" class="headerlink" title="使用类的注意事项"></a>使用类的注意事项</h3><ol><li>在ES6中类没有变量提升, 所以必须先定义类, 才能通过类实例化对象</li><li>类里面的共有的属性和方法一定要加this使用</li><li>constructor里面的this指向实例对象, 方法里面的this指向这个方法的调用者</li><li>当某些情况下某些方法里面的this指向的不再是constructor里面的this, 又想使用constructor里面的this时,可以先定义一个全局变量, 然后把constructor里面的this保存给全局变量,然后使用这个全局变量</li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery</title>
    <link href="/blog/2019/11/01/jQuery/"/>
    <url>/blog/2019/11/01/jQuery/</url>
    
    <content type="html"><![CDATA[<p>本篇记录jQuery的使用,</p><span id="more"></span><h2 id="什么是-jQuery"><a href="#什么是-jQuery" class="headerlink" title="什么是 jQuery"></a>什么是 jQuery</h2><p>jQuery 是 js 的一个库，封装了我们开发过程中常用的一些功能，方便我们调用，提高开发效率。</p><p>js库是把我们常用的功能放到一个单独的文件中，我们用的时候，直接引用到页面里即可。</p><h3 id="jQuery-的两大特点"><a href="#jQuery-的两大特点" class="headerlink" title="jQuery 的两大特点"></a>jQuery 的两大特点</h3><p>（1）<strong>链式编程</strong>：比如<code>.show()</code>和<code>.html()</code>可以连写成<code>.show().html()</code>。节省代码量,编程更优雅</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 意思是我的背景颜色为红色,我兄弟的颜色为空,也就是不变颜色</span><br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;#f00&#x27;</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>链式编程原理：return this。</p><p>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 this。</p><p>（2）<strong>隐式迭代</strong>：隐式 对应的是 显式。遍历内部DOM元素（伪数组形式存储）的过程就叫做隐式迭代, 简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</p><p>如果获取的是多元素的值，大部分情况下返回的是第一个元素的值。</p><h2 id="jQuery基本使用"><a href="#jQuery基本使用" class="headerlink" title="jQuery基本使用"></a>jQuery基本使用</h2><p>（1）引包</p><p>（2）入口函数</p><p>（3）功能实现代码（事件处理）</p><p>引包: 要写在js代码最上层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>入口函数: </p><p>原生 js 的入口函数指的是：<code>window.onload = function() &#123;&#125;;</code> 页面上所有内容加载完毕，才执行。不仅要等文本加载完毕，而且要等图片也要加载完毕，才执行函数。</p><p>jQuery的入口函数:</p><p>写法一:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.文档加载完毕，图片不加载的时候，就可以执行这个函数。</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-comment">// 功能实现代码（事件处理）</span><br>     &#125;)<br></code></pre></td></tr></table></figure><p>写法二:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//2.文档加载完毕，图片不加载的时候，就可以执行这个函数。</span><br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 功能实现代码（事件处理）</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>写法三:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//3.文档加载完毕，图片也加载完毕的时候，在执行这个函数。</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-comment">// 功能实现代码（事件处理）</span><br>       &#125;)<br></code></pre></td></tr></table></figure><h2 id="jq顶级对象"><a href="#jq顶级对象" class="headerlink" title="jq顶级对象"></a>jq顶级对象</h2><ol><li><p>$是 jQuery的别称(另外的名字)，在代码中可以使用 jQuery代替$，但一般为了方便，通常都直接使用$.</p></li><li><p>$是 jQuery的顶级对象，相当于原生 javaScript中的 window.把元素利用$包装成 Query对象，就可以调用jQuery的方法。</p></li></ol><p><code>$(function() &#123;&#125;) == jQuery(function() &#123;&#125;)</code><br><code>$(&#39;div&#39;).hide(); == jQuery(&#39;div&#39;).hide();</code></p><h2 id="jq对象与DOM对象"><a href="#jq对象与DOM对象" class="headerlink" title="jq对象与DOM对象"></a>jq对象与DOM对象</h2><ol><li>DOM对象: 用原生js获取过来的就是DOM对象</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> myDiv = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> mySpan = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>console.dir(myDiv);<br></code></pre></td></tr></table></figure><ol start="2"><li>jQuery对象: 用jQuery方式获取过来的对象就是jQuery对象</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 本质: 通过$把DOM元素进行包装后产生的对象(伪数组形式存储)</span><br>$(<span class="hljs-string">&#x27;div&#x27;</span>);<br>$(<span class="hljs-string">&#x27;span&#x27;</span>);<br><span class="hljs-built_in">console</span>.dir($(<span class="hljs-string">&#x27;div&#x27;</span>));<br></code></pre></td></tr></table></figure><p>jQuery对象只能用jQuery方法, DOM对象使用原生Js的属性和方法</p><h2 id="jq对象和DOM对象转换"><a href="#jq对象和DOM对象转换" class="headerlink" title="jq对象和DOM对象转换"></a>jq对象和DOM对象转换</h2><ol><li>DOM对象转jQuery对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;video src=<span class="hljs-string">&quot;mov.mp4&quot;</span>&gt;&lt;/video&gt;<br>      <span class="hljs-comment">// (1) 直接获取,得到的就是jQuery对象</span><br>      $(<span class="hljs-string">&#x27;video&#x27;</span>);<br>      <span class="hljs-comment">// (2) 已经使用原生js 获取过来DOM对象</span><br>      <span class="hljs-keyword">var</span> myVideo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;video&#x27;</span>);<br>      $(myVideo);<br></code></pre></td></tr></table></figure><ol start="2"><li>jQuery对象转DOM对象</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">$(myVideo)<span class="hljs-selector-attr">[index]</span>    <br>$(myVideo)<span class="hljs-selector-class">.get</span>(index) <br>$(&#x27;video&#x27;)<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.play</span>(); <span class="hljs-comment">// 转化为DOM对象了,可以使用DOM对象方法</span><br>$(&#x27;video&#x27;)<span class="hljs-selector-class">.get</span>(<span class="hljs-number">0</span>)<span class="hljs-selector-class">.play</span>;<br></code></pre></td></tr></table></figure><h2 id="jq选择器"><a href="#jq选择器" class="headerlink" title="jq选择器"></a>jq选择器</h2><p>$(“选择器”) 里面选择器直接写css选择器即可,但是要加引号, 比如:</p><p><code>$(&quot;#demo&quot;)</code> id选择器<br><code>$(&quot;div&quot;)</code> 标签选择器<br><code>$(&quot;.nav&quot;)</code> 类选择器</p><h2 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;ul li:first&#x27;</span>).css(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#f00&#x27;</span>); <span class="hljs-comment">// 第一个</span><br>$(<span class="hljs-string">&#x27;ul li:last&#x27;</span>).css(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;#ff0&#x27;</span>); <span class="hljs-comment">// 最后一个</span><br>$(<span class="hljs-string">&#x27;ul li:eq(2)&#x27;</span>).css(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#0ff&#x27;</span>); <span class="hljs-comment">// 索引号,第2个</span><br>$(<span class="hljs-string">&#x27;ol li:odd&#x27;</span>).css(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#f0f&#x27;</span>); <span class="hljs-comment">// 第奇数个</span><br>$(<span class="hljs-string">&#x27;ol li:even&#x27;</span>).css(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#00f&#x27;</span>); <span class="hljs-comment">// 第偶数个</span><br></code></pre></td></tr></table></figure><h2 id="父子筛选方法"><a href="#父子筛选方法" class="headerlink" title="父子筛选方法"></a>父子筛选方法</h2><ol><li>父<br><code>parent()</code> 返回最近一个父级</li></ol><p><code>parents()</code>返回所有的父级元素,加上参数可以返回指定的祖先元素</p><ol start="2"><li>子</li></ol><p>(1)  亲儿子 <code>children(</code>) 类似子代选择器 <code>ul&gt;li</code></p><p>(2)  所有孩子 <code>find()</code> 类似后代选择器 <code>ul li</code></p><h2 id="其他筛选方法"><a href="#其他筛选方法" class="headerlink" title="其他筛选方法"></a>其他筛选方法</h2><p>兄弟元素: <code>siblings</code> 除了自身以外的所有亲兄弟</p><p><code>nextAll()</code> 查找当前元素之后的所有同级元素<br><code>prevAll()</code> 查找当前元素之前的所有同级元素</p><p><code>eq(index)</code> 索引号对应的元素<br><code>$(&#39;li&#39;).eq(2);</code>相当于<code>$(&#39;li:eq(2)&#39;);</code> index是索引号<br>推荐第一种,方便直接写变量,第二种括号里要用(‘+ 变量 +’)连起来</p><p><code>hasClass()</code>检查当前元素是否含有某个特定的类,如果有,则返回true</p><h2 id="jq排他思想"><a href="#jq排他思想" class="headerlink" title="jq排他思想"></a>jq排他思想</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮6<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 隐式迭代 给所有按钮绑定点击事件</span></span><br><span class="language-javascript">       $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// 隐式迭代 给所有按钮添加背景颜色</span></span><br><span class="language-javascript">           $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;#f0f&#x27;</span>);</span><br><span class="language-javascript">           <span class="hljs-comment">// 隐式迭代 其余兄弟元素去掉背景颜色</span></span><br><span class="language-javascript">           $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="操作css样式"><a href="#操作css样式" class="headerlink" title="操作css样式"></a>操作css样式</h2><ol><li>参数只写属性名, 返回属性值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>修改属性值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-string">&#x27;300px&#x27;</span>);<br><span class="hljs-comment">// 属性值为数字时可以不加单位和引号</span><br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-number">300</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>以对象形式修改属性时,可以设置多组样式,且不用加引号</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs processing">$(<span class="hljs-variable">this</span>).<span class="hljs-property">css</span>(&#123;<br>    <span class="hljs-built_in">width</span>: <span class="hljs-number">400</span>,<br>    <span class="hljs-built_in">height</span>: <span class="hljs-number">300</span>,<br>    <span class="hljs-comment">// 复合属性要用驼峰命名法,非数字属性值要加引号</span><br>    backgroundColor: <span class="hljs-string">&#x27;#f00&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="操作类"><a href="#操作类" class="headerlink" title="操作类"></a>操作类</h2><p><code>addClass</code> 添加类</p><pre><code class="hljs">$(this).addClass(&#39;current&#39;);</code></pre><p><code>removeClass</code> 删除类</p><pre><code class="hljs">$(this).removeClass(&#39;current&#39;);</code></pre><p><code>toggleClass</code> 切换类,2个类之间来回切换</p><pre><code class="hljs">$(this).toggleClass(&#39;current&#39;);</code></pre><h3 id="jq类操作与className的区别"><a href="#jq类操作与className的区别" class="headerlink" title="jq类操作与className的区别"></a>jq类操作与className的区别</h3><p>原生js className会覆盖原先的类</p><p>jq里面的addClass  是追加类名,不影响原先的类,删除跟切换都只是对当前操作的类起作用,不影响其他的类</p><h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><h3 id="显示与隐藏与切换"><a href="#显示与隐藏与切换" class="headerlink" title="显示与隐藏与切换"></a>显示与隐藏与切换</h3><p>显示, 隐藏, 切换</p><p><code>show([speed,[easing],[fn]])</code><br><code>hide([speed,[easing],[fn]])</code><br><code>toggle([speed,[easing],[fn]])</code></p><p>参数可以省略, 省略后无动画,直接显示</p><p>参数详情:<br><code>speed</code>: 三种预定速度之一的字符串: <code>slow</code>(慢),<code> normal</code>(正常), <code>fast</code>(快),或者表示动画时长的毫秒数值<br><code>easing</code>: 用来指定切换效果, 默认 <code>swing</code>(摇摆) ,可用参数<code> linear</code>(线性)<br><code>fn</code>: 回调函数,在动画完成时执行的函数,每个元素执行一次</p><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><p><code>fadeIn()</code> 淡入<br><code>fadeOut()</code> 淡出<br><code>fadeToggle()</code> 切换</p><p>修改透明度<code>fadeTo([speed, opacity, [easing], [fn]])</code><br><code>opacity:</code> 透明度,取值0~1之间</p><h3 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h3><p><code>slideDown()</code> 下拉滑动<br><code>slideUp()</code> 上拉滑动<br><code>slideToggle()</code> 切换</p><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><p>自定义动画: <code>animate(params,[speed,[easing],[fn])</code><br><code>params：</code>想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号，如果是复合属性则需要采取驼峰命名法,其余参数都可以省略。</p><h3 id="事件切换和停止动画排队"><a href="#事件切换和停止动画排队" class="headerlink" title="事件切换和停止动画排队"></a>事件切换和停止动画排队</h3><ol><li>事件切换 <code>hover(over,[out])</code> 鼠标移入和移出</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.nav&gt;li&#x27;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">slideDown</span>();<br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">slideUp</span>();<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>如果只写一个函数,移入移出都会触发这个函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.nav&gt;li&#x27;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">slideToggle</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。<br><code>stop()</code>方法用于停止动画或效果<br>注意：<code>stop()</code>写到动画或者效果的前面，相当于停止,结束上一次的动画。</p><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><ol><li><p><code>element.prop(&quot;属性名&quot;)</code> 获取元素固有属性值<br><code>element.prop(&quot;属性名&quot;, &quot;属性值&quot;)</code> 修改属性值</p></li><li><p><code>attr(&quot;属性&quot;)</code> 获取自定义属性值<br><code>attr(&quot;属性&quot;, &quot;属性值&quot;)</code> 修改属性值<br>获取h5自定义属性 返回的数值是字符型<br><code>attr(&quot;data-index&quot;)</code></p></li><li><p>数据缓存 <code>data()</code> 里面的数据是存放到元素的内存里面<br>获取h5自定义属性<code>data-index</code>,不用写<code>data-</code> 而且返回的是数字型<br><code>data(&quot;index&quot;)</code></p></li></ol><h2 id="元素文本内容"><a href="#元素文本内容" class="headerlink" title="元素文本内容"></a>元素文本内容</h2><ol><li><p>获取,设置元素内容 <code>html()</code> 识别标签。</p></li><li><p>获取,设置元素文本内容 <code>text()</code> 不识别标签。</p></li><li><p>获取,设置表单值 <code>val()</code></p></li></ol><p>要设置的内容写在()里面,要加引号</p><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><p>同一类元素做不同操作,需要用到遍历元素(类似for,比for强大)</p><p><code>each()</code> 方法遍历元素,用于遍历DOM对象,标签<br><code>$.each()</code> 方法遍历元素,主要用于遍历数据,处理数据,遍历对象,数组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;#f00&quot;</span>, <span class="hljs-string">&quot;#0f0&quot;</span>, <span class="hljs-string">&quot;#00f&quot;</span>];</span><br><span class="language-javascript">        <span class="hljs-comment">// 回调函数第一个参数是每个元素的索引号,第二个参数是DOM元素对象,都可以自己命名</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i, domEle</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 转换为jq对象</span></span><br><span class="language-javascript">            $(domEle).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, arr[i]);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        $.<span class="hljs-title function_">each</span>($(<span class="hljs-string">&quot;div&quot;</span>), <span class="hljs-keyword">function</span>(<span class="hljs-params">i, ele</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ele);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        $.<span class="hljs-title function_">each</span>(arr, <span class="hljs-keyword">function</span>(<span class="hljs-params">i, ele</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ele);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建添加删除元素"><a href="#创建添加删除元素" class="headerlink" title="创建添加删除元素"></a>创建添加删除元素</h2><ol><li>创建元素</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;&lt;li&gt;创建的元素&lt;/li&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>添加元素</li></ol><p>(1) 内部添加 作为<strong>子元素</strong><br><code>append(li)</code>; 内部添加并放到最后面<br><code>prepend(li)</code>; 内部添加并放到最前面</p><p>(2) 外部添加 作为<strong>兄弟元素</strong><br><code>after(div)</code>;  外部添加并放到最后面<br><code>before(div)</code>; // 外部添加并放到最前面</p><ol start="3"><li>删除元素</li></ol><p><code>$(&quot;ul&quot;).remove();</code>  删除匹配的元素  ul及子元素都被删了</p><p><code>$(&quot;ul&quot;).empty();</code>  删除匹配的元素的子节点  只删除了ul的子节点  清空<br><code>$(&quot;ul&quot;).html(&quot;&quot;);</code>  删除匹配的元素的子节点  只删除了ul的子节点  内容修改为空</p><ol start="4"><li>复制元素</li></ol><p>复制的新元素 =<code>$(selector).clone();</code><br>复制$(selector)这个元素。是深层复制。</p><h2 id="元素大小"><a href="#元素大小" class="headerlink" title="元素大小"></a>元素大小</h2><p>参数为空,获取值是数字型的<br>参数为数字则是修改相应的值,不用写单位</p><p><code>width() / height()</code> 取得匹配元素宽度和高度值  只算<code>width / height</code> 大小</p><p><code>innerWidth() / innerHeight()</code> 取得匹配元素宽度和高度值包含 <code>padding</code></p><p><code>outerWidth()/ outerHeight()</code> 取得匹配元素宽度和高度值包含 <code>padding、 border</code></p><p><code>outerWidth(true) / outerHeight(true)</code> 取得匹配元素宽度和高度值包含 <code>padding、 bode、 margin</code></p><h2 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h2><ol><li>获取设置距离文档的位置 offset</li></ol><p><code>offset();</code> 所有属性都在对象里<br><code>offset().top</code> 获取单个属性值</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// 修改属性值</span><br>.offset(<span class="hljs-punctuation">&#123;</span> <br><span class="hljs-symbol">            top:</span> <span class="hljs-number">200</span>,<br><span class="hljs-symbol">            left:</span> <span class="hljs-number">100</span><br>        <span class="hljs-punctuation">&#125;</span>)<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>获取被选元素相对于带有定位的父级偏移坐标,如果父级没有定位,以文档为准</li></ol><p><code>position();</code>  只能获取.不能设置</p><h2 id="被卷去的头部"><a href="#被卷去的头部" class="headerlink" title="被卷去的头部"></a>被卷去的头部</h2><p>被卷去的头部 <code>scrollTop()</code><br>被卷去的左侧 <code>scrollLeft()</code></p><h2 id="jq事件机制"><a href="#jq事件机制" class="headerlink" title="jq事件机制"></a>jq事件机制</h2><h3 id="常见的事件绑定"><a href="#常见的事件绑定" class="headerlink" title="常见的事件绑定"></a>常见的事件绑定</h3><ul><li><p>click(handler)                 单击事件。</p></li><li><p>blur(handler)                 失去焦点事件。</p></li><li><p>mouseenter(handler)         鼠标进入事件。</p></li><li><p>mouseleave(handler)            鼠标离开事件。</p></li><li><p>dbclick(handler)             双击事件。</p></li><li><p>change(handler)  改变事件，如：文本框值改变，下拉列表值改变等。</p></li><li><p>focus(handler)                 获得焦点事件。</p></li><li><p>keydown(handler)             键盘按下事件。</p></li></ul><h3 id="on绑定事件和委派"><a href="#on绑定事件和委派" class="headerlink" title="on绑定事件和委派"></a>on绑定事件和委派</h3><p>单个事件注册, 多个不同事件需要分开写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;backgroundColor&quot;</span>, <span class="hljs-string">&quot;#f00&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>多事件处理 <code>on</code> 以对象格式添加多个不同的事件,可以一次处理多个事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">on</span>(&#123;  <br>    <span class="hljs-attr">mouseenter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;backgroundColor&quot;</span>, <span class="hljs-string">&quot;#f00&quot;</span>);<br>    &#125;,<br>    <span class="hljs-attr">click</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;backgroundColor&quot;</span>, <span class="hljs-string">&quot;#0f0&quot;</span>);<br>    &#125;,<br>    <span class="hljs-attr">mouseleave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;backgroundColor&quot;</span>, <span class="hljs-string">&quot;#00f&quot;</span>);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>事件处理程序是一样的可以用这种方法: 用空格隔开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;mouseenter mouseleave&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&quot;current&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>on</code> 实现事件委派<br><code>click</code>绑定在<code>ul</code>上,但是触发事件的是<code>ul</code>中的<code>li</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&quot;ul&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this); <span class="hljs-comment">// 指向的是li</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.target); <span class="hljs-comment">// 指向的是li</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><code>on</code>给未来动态创建的元素绑定事件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&quot;ol&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>alert(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;&lt;li&gt;动态创建&lt;/li&gt;&quot;</span>);<br>$(<span class="hljs-string">&quot;ol&quot;</span>).append(li);<br></code></pre></td></tr></table></figure><h3 id="off解绑事件"><a href="#off解绑事件" class="headerlink" title="off解绑事件"></a>off解绑事件</h3><p><code>$(&quot;div&quot;).off();</code> 解绑div元素所有事件处理程序</p><p><code>$(&quot;div&quot;).off(&quot;click&quot;);</code>  解绑div元素点击事件<br><code>$(&quot;ul&quot;).off(&quot;click&quot;, &quot;li&quot;);</code>   解绑事件委托</p><p>只能触发一次 <code>one()</code><br><code>$(&quot;p&quot;).one(&quot;click&quot;, function() &#123;     </code>alert(‘点击一次后就无效了’);<br>})</p><h2 id="自然触发事件"><a href="#自然触发事件" class="headerlink" title="自然触发事件"></a>自然触发事件</h2><p><code>$(&quot;div&quot;).click();</code> 自动触发事件  元素.事件()<br><code>$(&quot;div&quot;).trigger(&quot;click&quot;);</code> 自动触发  元素.trigger(“事件”)<br><code>$(&quot;div&quot;).triggerHandler(&quot;click&quot;);</code>  自动触发  元素.triggerHandler(“事件”) , 不会触发元素默认行为</p><p>元素默认行为:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">$(<span class="hljs-string">&quot;input&quot;</span>)</span>.on(<span class="hljs-string">&quot;focus&quot;</span>, <span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;<br>            <span class="hljs-constructor">$(<span class="hljs-params">this</span>)</span>.<span class="hljs-keyword">val</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br>        &#125;);<br>        <span class="hljs-constructor">$(<span class="hljs-string">&quot;input&quot;</span>)</span>.trigger<span class="hljs-constructor">Handler(<span class="hljs-string">&quot;focus&quot;</span>)</span>; <span class="hljs-comment">// 没有光标闪烁 没有触发元素默认行为</span><br></code></pre></td></tr></table></figure><h2 id="jQuery的事件对象"><a href="#jQuery的事件对象" class="headerlink" title="jQuery的事件对象"></a>jQuery的事件对象</h2><p>event.data                  传递给事件处理程序的额外数据</p><p>event.currentTarget             等同于this，当前DOM对象</p><p>event.pageX                     鼠标相对于文档左部边缘的位置</p><p>event.target                    触发事件源，不一定===this</p><p>event.stopPropagation()；    阻止事件冒泡</p><p>event.preventDefault();     阻止默认行为</p><p>event.type                  事件类型：click，dbclick…</p><p>event.which                     鼠标的按键类型：左1 中2 右3</p><p>event.keyCode               键盘按键代码</p><h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><p>点击div盒子时,不会打印 “点击了document”</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(document).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;点击了document&quot;</span>);<br><br>        &#125;);<br>        $(<span class="hljs-string">&quot;div&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>            <span class="hljs-comment">// console.log(event);</span><br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;点击了div&quot;</span>);<br>            <span class="hljs-comment">// event.stopPropagation(); // 阻止冒泡</span><br><br>        &#125;);<br></code></pre></td></tr></table></figure><h2 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var targetObj</span> = &#123;&#125;;<br><span class="hljs-attribute">         var obj</span> = &#123;<br>             id: 1,<br>             name: <span class="hljs-string">&quot;andy&quot;</span><br>         &#125;;<br></code></pre></td></tr></table></figure><p>obj里面的内容拷贝到targetObj,  targetObj原来有的数据会被覆盖掉</p><ol><li><p>浅拷贝(为空或者false)把原来对象里面的复杂数据类型地址拷贝给目标对象<br>修改了拷贝后对象的值,原来对象的值也会跟着改变<br><code>$.extend(targetObj, obj);</code></p></li><li><p>深拷贝(前面加true)把里面的数据完全复制一份给目标对象 如果里面有不冲突的属性,会合并到一起<br><code>$.extend(true, targetObj, obj);</code></p></li></ol><p>修改了拷贝后对象的值,不会影响原来对象的值</p><h2 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h2><p>jQuery使用$作为标示符，随着 jQuery的流行其他js库也会用这$作为标识符，这样起使用会引起冲突. 需要一个解决方案，让 jQuery和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</p><p>解决方案: </p><ol><li>把里面的$符号统改为 jQuery.比如 <code>jQuery(&quot;div&quot;)</code></li><li>jQuery变量规定新的名称：<code>$.noConflict()</code> 比如 <code>var x = $.noConflict()</code></li></ol><h2 id="jq插件"><a href="#jq插件" class="headerlink" title="jq插件"></a>jq插件</h2><ol><li>引入相关文件(jq文件和插件文件) </li><li>复制相关html,css,js(调用插件)</li></ol>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地存储</title>
    <link href="/blog/2019/10/17/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    <url>/blog/2019/10/17/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<p>本篇为pc端网页特效笔记,记录下来主要用于复习,巩固。包括以下内容：本地存储数据，记住用户名。</p><span id="more"></span><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>1、数据存储在用户浏览器中<br>2、设置、读取方便,甚至页面刷新不丢失数据<br>3、容量较大， sessionStorage约5M、 localStorage约20M<br>4、只能存储字符串，可以将对象JSON.stringify()编码后存储 </p><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p>1、生命周期为关闭浏览器窗口<br>2、在同一个窗囗（页面）下数据可以共享<br>3、以键值对的形式存储使用</p><p>存储数据：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">sessionStorage.set<span class="hljs-constructor">Item(<span class="hljs-params">key</span>, <span class="hljs-params">value</span>)</span>;<br></code></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">sessionStorage.get<span class="hljs-constructor">Item(<span class="hljs-params">key</span>)</span>;<br></code></pre></td></tr></table></figure><p>修改数据：</p><p>重新存储即可，会覆盖掉</p><p>删除数据：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">sessionStorage.remove<span class="hljs-constructor">Item(<span class="hljs-params">key</span>)</span>;<br></code></pre></td></tr></table></figure><p>删除所有数据：</p><p>删除全部数据,慎用!!!</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">sessionStorage.clear()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>1.生命周期永久生效，除非手动删除否则关闭页面也会存在<br>2.可以多窗口（页面）共享（同一浏览器可以共享）<br>3.以键值对的形式存储使用</p><p>存储数据：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">localStorage.set<span class="hljs-constructor">Item(<span class="hljs-params">key</span>, <span class="hljs-params">value</span>)</span>;<br></code></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">localStorage.get<span class="hljs-constructor">Item(<span class="hljs-params">key</span>)</span>;<br></code></pre></td></tr></table></figure><p>修改数据：</p><p>重新存储即可，会覆盖掉</p><p>删除数据：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">localStorage.remove<span class="hljs-constructor">Item(<span class="hljs-params">key</span>)</span>;<br></code></pre></td></tr></table></figure><p>删除所有数据：</p><p>删除全部数据,慎用!!!</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">localStorage.clear()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="记住用户名"><a href="#记住用户名" class="headerlink" title="记住用户名"></a>记住用户名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> 记住用户名<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#username&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> remember = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#remember&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取数据,如果有数据就给文本框并把复选框选中</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>)) &#123;</span><br><span class="language-javascript">            username.<span class="hljs-property">value</span> = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>);</span><br><span class="language-javascript">            remember.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 复选框</span></span><br><span class="language-javascript">        remember.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 选中就存储</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>, username.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 不选中就删除</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>本地存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端网页特效</title>
    <link href="/blog/2019/10/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/"/>
    <url>/blog/2019/10/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>本篇为移动端网页特效笔记,记录下来主要用于复习,巩固。包括以下内容：touch事件、触摸事件对象、移动端拖拽元素、classList的使用、插件的使用、click300ms延迟。</p><span id="more"></span><h2 id="touch事件"><a href="#touch事件" class="headerlink" title="touch事件"></a>touch事件</h2><p>触摸：<code>touchstart</code></p><p>移动：<code>touchmove</code></p><p>离开：<code>touchend</code></p><h2 id="触摸事件对象"><a href="#触摸事件对象" class="headerlink" title="触摸事件对象"></a>触摸事件对象</h2><p><code>touches</code>: 正在触摸屏幕的所有手指的列表</p><p><code>targetTouches</code>: 正在触摸当前DOM元素的手指列表(常用)</p><p>如果监听的是一个DOM元素,上面两个是一样的</p><p><code>targetTouches[0]</code> 可以得到正在触摸DOM元素的第一个手指的相关信息,比如坐标</p><p><code>changedTouche</code>: 手指状态发生了改变的列表 从无到有, 或者 从有到无</p><h2 id="移动端拖拽元素"><a href="#移动端拖拽元素" class="headerlink" title="移动端拖拽元素"></a>移动端拖拽元素</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 手指初始坐标</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> startX = <span class="hljs-number">0</span>,</span><br><span class="language-javascript">            startY = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 盒子初始坐标</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>,</span><br><span class="language-javascript">            y = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            startX = e.<span class="hljs-property">targetTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageX</span>;</span><br><span class="language-javascript">            startY = e.<span class="hljs-property">targetTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageY</span>;</span><br><span class="language-javascript">            x = <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetLeft</span>;</span><br><span class="language-javascript">            y = <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetTop</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 计算手指移动距离,手指平移坐标-初始坐标</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> moveX = e.<span class="hljs-property">targetTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageX</span> - startX;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> moveY = e.<span class="hljs-property">targetTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageY</span> - startY;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = x + moveX + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = x + moveY + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// 阻止屏幕滚动的默认行为</span></span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="classList使用"><a href="#classList使用" class="headerlink" title="classList使用"></a>classList使用</h2><p>添加类名 追加类名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">div.classList.<span class="hljs-built_in">add</span>(<span class="hljs-string">&#x27;box2&#x27;</span>);<br></code></pre></td></tr></table></figure><p>删除类名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">div.classList.<span class="hljs-built_in">remove</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br></code></pre></td></tr></table></figure><p>切换类</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">document.<span class="hljs-keyword">body</span>.classList.toggle(<span class="hljs-symbol">&#x27;bg</span>&#x27;);<br><br></code></pre></td></tr></table></figure><p>开关灯案例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.bg</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>开关灯<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;bg&#x27;</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h2><ol><li><p>确认插件实现的功能</p></li><li><p>去官网查看使用说明</p></li><li><p>下载插件</p></li><li><p>打开demo实例文件，查看需要引入的相关文件，并且引入</p></li><li><p>复制demo实例文件中的结构html，样式css及js代码 </p></li></ol><h2 id="click300ms延迟"><a href="#click300ms延迟" class="headerlink" title="click300ms延迟"></a>click300ms延迟</h2><p>fastclick: 取消300延迟插件</p><p>user-scalable=no 禁止缩放</p><p>封装一个函数</p><p><img src="https://i.loli.net/2020/06/24/ZLI8pQrdPuFoGaj.png"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>移动端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pc端网页特效</title>
    <link href="/blog/2019/10/17/pc%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/"/>
    <url>/blog/2019/10/17/pc%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>本篇为pc端网页特效笔记,记录下来主要用于复习,巩固。包括以下内容：三大系列、鼠标经过的区别、匀速动画、缓速动画、动画函数的封装、多个值之间移动、节流阀。</p><span id="more"></span><h2 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h2><blockquote><p>offset的中文是：偏移，补偿，位移。</p></blockquote><p>js中有一套方便的<strong>获取元素尺寸</strong>的办法就是offset家族。offset家族包括：</p><ul><li><p><code>offsetWidth</code></p></li><li><p><code>offsetHight</code></p></li><li><p><code>offsetLeft</code></p></li><li><p><code>offsetTop</code></p></li><li><p><code>offsetParent</code></p></li></ul><p><code>offsetWidth</code>: 得到元素的大小,宽度 是包含padding + border + width的<br><code>offsetHight</code>:得到元素的大小,高度 是包含padding + border + height的</p><p>这两个属性，他们绑定在了所有的节点元素上。获取之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。</p><p><code>offsetLeft</code>:</p><p>返回距离上级盒子（带有定位）如果没有父元素,或者父元素没有定位, 则以 body 为准, (数值不带单位),  从父亲的 padding 开始算，父亲的 border 不算。(数值不带单位)<br><code>offsetTop</code>: 可以得到元素的偏移位置的数值</p><p><code>offsetParent</code>:  </p><p>检测父系盒子中带有定位的<strong>父盒子节点</strong>。返回结果是该对象的父级（带有定位）。</p><ul><li><p>如果当前元素的父级元素，<strong>没有CSS定位</strong>（position为absolute、relative、fixed），那么offsetParent的返回结果为<strong>body</strong>。</p></li><li><p>如果当前元素的父级元素，<strong>有CSS定位</strong>（position为absolute、relative、fixed），那么offsetParent的返回结果为<strong>最近的</strong>那个父级元素。</p></li></ul><p><code>parentNode</code>: 返回的是最近一级的父级元素,不管父级元素带不带定位</p><h2 id="offset与style的区别"><a href="#offset与style的区别" class="headerlink" title="offset与style的区别"></a>offset与style的区别</h2><p><strong>offset:</strong><br>可以得到<strong>任意样式表</strong>中的样式值,且没有单位<br>包含padding border width<br>只读,不能赋值</p><p><strong>style:</strong><br>只能得到<strong>行类样式表</strong>中的样式值,带有单位<br>不包含padding和border的值<br>可读写</p><p>一般的做法是：<strong>用offsetLeft 和 offsetTop 获取值，用style.left 和 style.top 赋值</strong>（比较方便）</p><ul><li><p>style.left：只能获取行内式，获取的值可能为空，容易出现NaN。</p></li><li><p>offsetLeft：获取值特别方便，而且是现成的number，方便计算。它是只读的，不能赋值。</p></li></ul><h2 id="client系列"><a href="#client系列" class="headerlink" title="client系列"></a>client系列</h2><ol><li><code>clientWidth</code> 和 <code>clientHeight</code></li></ol><p>和<code>offsetWidth</code>最大区别就是<strong>不包含边框</strong><br>包含padding以及内容,不包含边框宽度,数值不带单位</p><p>盒子调用时：</p><ul><li><p>clientWidth：获取盒子区域宽度（padding + width）。</p></li><li><p>clientHeight：获取盒子区域高度（padding + height）。</p></li></ul><p>body/html调用时：</p><ul><li><p>clientWidth：获取网页可视区域宽度。</p></li><li><p>clientHeight：获取网页可视区域高度。</p></li></ul><h3 id="clientX-和-clientY"><a href="#clientX-和-clientY" class="headerlink" title="clientX 和 clientY"></a>clientX 和 clientY</h3><p>event调用：</p><ul><li><p>clientX：鼠标距离可视区域左侧距离。</p></li><li><p>clientY：鼠标距离可视区域上侧距离。</p></li></ul><ol start="2"><li><code>clientTop</code> 和 <code>clientLeft</code></li></ol><ul><li><p>clientTop：盒子的上border。</p></li><li><p>clientLeft：盒子的左border。</p></li></ul><h2 id="scroll系列"><a href="#scroll系列" class="headerlink" title="scroll系列"></a>scroll系列</h2><ol><li><code>ScrollWidth</code> 和<code>scrollHeight</code></li></ol><p>获取盒子的宽高。调用者为节点元素。不包括 border和margin。如下：</p><ul><li><p>scrollWidth = width + padding;</p></li><li><p>scrollHeight = height + padding;</p></li></ul><p>scrollHeight有一个特点：如果文字超出了盒子，高度为内容的高（包括超出的内容）；不超出，则是盒子本身高度。</p><ol start="2"><li><code>scrollTop</code> 和 <code>scrollLeft</code></li></ol><p>网页被卷去的头部和左边的部分。</p><p>比如说，一个网页往上滚动的时候，上面的部分自然被浏览器遮挡了，遮挡的高度就是<code>scrollTop</code>。</p><p><code>scrollTop</code> 这个属性的写法要注意兼容性:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">window</span>.pageYOffset || <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-built_in">document</span>.documentElement.scrollTop;<br></code></pre></td></tr></table></figure><h2 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h2><ol><li>offset系列用于获取元素位置</li></ol><p><code>offsetWidth</code>: 返回自身包括padding, 边框, 内容区的宽度, 不带单位</p><ul><li>offsetWidth  = width  + padding + border</li></ul><ol start="2"><li>client系列用于获取元素大小</li></ol><p><code>clientWidth</code>: 返回自身包括padding, 内容区的宽度, 不含边框, 不带单位</p><ul><li>clientWidth  = width  + padding</li></ul><ol start="3"><li>scroll系列用于获取滚动距离, 页面的滚动距离用window.pageXOffset获得</li></ol><p><code>scrollWidth</code>: 返回自身实际的宽度, 不含边框, 返回值不带单位</p><ul><li>scrollWidth   = 内容宽度（不包含border）</li></ul><h2 id="mouseover和mouseenter的区别-鼠标经过"><a href="#mouseover和mouseenter的区别-鼠标经过" class="headerlink" title="mouseover和mouseenter的区别(鼠标经过)"></a>mouseover和mouseenter的区别(鼠标经过)</h2><p><code>mouseover</code>鼠标经过自身盒子会触发,经过子盒子还会触发</p><p><code>mouseenter</code>只会经过自身盒子触发,不会冒泡,搭配<code>mouseleave</code>鼠标离开 ,也不会冒泡</p><h2 id="匀速动画"><a href="#匀速动画" class="headerlink" title="匀速动画"></a>匀速动画</h2><p>动画原理:</p><ol><li>获得盒子当前位置</li><li>让盒子在当前位置加上1个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位， 才能使用 element.style.left</li></ol><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-keyword">var</span> <span class="hljs-keyword">div</span> = document.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> timer = setInterval(<span class="hljs-keyword">function</span>() &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">div</span>.offsetLeft &gt;= <span class="hljs-number">400</span>) &#123;<br>        clearInterval(timer); <span class="hljs-comment">// 停止定时器</span><br>    &#125;<br>    <span class="hljs-keyword">div</span>.style.left = <span class="hljs-keyword">div</span>.offsetLeft + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>; <span class="hljs-comment">// 边偏移加1像素</span><br>&#125;, <span class="hljs-number">10</span>); <span class="hljs-comment">// 每+1像素的间隔时间</span><br></code></pre></td></tr></table></figure><h2 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><p>简单动画函数封装 obj: 目标对象, target: 目标位置</p><p>缺点: 性能不好,每次调用,var就会生成新的timer空间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> &gt;= target) &#123;<br>            <span class="hljs-built_in">clearInterval</span>(timer); <span class="hljs-comment">// 停止定时器</span><br>        &#125;<br>        obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    &#125;, <span class="hljs-number">10</span>); <br>&#125;<br><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-comment">// 调用函数</span><br><span class="hljs-title function_">animate</span>(div, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p><strong>性能优化:</strong></p><p>给不同的元素指定了不同的定时器,利用对象添加属性的方法:<br>var obj = {};<br>obj.name = ‘andy’;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;<br><span class="hljs-comment">// 让元素只有一个定时器,每点一次先清除以前的定时器,保留当前的定时器</span><br><span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);<br>obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> == target) &#123;<br><span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>); <span class="hljs-comment">// 停止定时器</span><br>&#125;<br>obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>; <span class="hljs-comment">// 边偏移加1像素</span><br>&#125;, <span class="hljs-number">10</span>); <span class="hljs-comment">// 每+1像素的间隔时间</span><br>&#125;<br><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-comment">// 调用函数</span><br><span class="hljs-title function_">animate</span>(div, <span class="hljs-number">300</span>);<br></code></pre></td></tr></table></figure><h2 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h2><p>思路：</p><ol><li>让盒子每次移动的距离慢慢变小， 速度就会慢慢落下来。</li><li>核心算法：(目标值 - 现在的位置) / 10 做为每次移动的距离 步长</li><li>停止的条件是： 让当前盒子位置等于目标位置就停止定时器</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;<br>    <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span><br>    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);<br>    obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 步长值写到定时器的里面</span><br>        <span class="hljs-keyword">var</span> step = (target - obj.<span class="hljs-property">offsetLeft</span>) / <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> == target) &#123;<br>            <span class="hljs-comment">// 停止动画 本质是停止定时器</span><br>            <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);<br>        &#125;<br>        <span class="hljs-comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span><br>        obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    &#125;, <span class="hljs-number">15</span>);<br>&#125;<br><span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);<br>        <span class="hljs-comment">// 调用函数</span><br>        <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">500</span>);<br></code></pre></td></tr></table></figure><p>匀速动画就是 盒子是当前的位置 +  固定的值<br>缓动动画就是  盒子当前的位置 + 变化的值(目标值 - 现在的位置) / 10）</p><h2 id="多个值之间移动"><a href="#多个值之间移动" class="headerlink" title="多个值之间移动"></a>多个值之间移动</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn500&quot;</span>&gt;</span>移动到500<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn1000&quot;</span>&gt;</span>移动到1000<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 动画一定要加定位!!!!</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);</span><br><span class="language-javascript">            obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 步长值写到定时器里面,步长值向上取整</span></span><br><span class="language-javascript">                <span class="hljs-comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> step = (target - obj.<span class="hljs-property">offsetLeft</span>) / <span class="hljs-number">10</span>;</span><br><span class="language-javascript">                step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(step) : <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(step);</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> == target) &#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>); <span class="hljs-comment">// 停止定时器</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 把每次移动的值改为步长公式</span></span><br><span class="language-javascript">                obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">15</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn500 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn500&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn1000 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn1000&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn500.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(div, <span class="hljs-number">500</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        btn1000.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(div, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-BOM篇</title>
    <link href="/blog/2019/10/16/js-BOM%E7%AF%87/"/>
    <url>/blog/2019/10/16/js-BOM%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>本篇为BOM笔记,记录下来主要用于复习,巩固。包括以下内容：BOM概述、页面加载事件、回调函数、2种定时器和停止定时器、this指向问题、单线程机制、location对象、navigator对象、history对象。</p><span id="more"></span><h2 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h2><p>BOM是浏览器对象模型,它提供独立于内容而与浏览器窗口进行交互的对象,其核心对象是window.</p><p>BOM由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p><p>BOM缺乏标准， JavaScript语法的标准化组织是ECMA，DOM的标准化组织是W3C，BOM最初是 Netscape浏览器标准的一部分。</p><table><thead><tr><th>DOM</th><th>BOM</th></tr></thead><tbody><tr><td>文档对象模型</td><td>浏览器对象模型</td></tr><tr><td>把「文档」当做一个「对象」来看待</td><td>把「浏览器」当做一个「对象」来看待</td></tr><tr><td>DOM的顶级对象是 document</td><td>BOM的顶级对象是 window</td></tr><tr><td>DOM主要学习的是操作页面元素</td><td>BOM学习的是浏览器窗口交互的一些对象</td></tr><tr><td>DOM是W3C标准规范</td><td>BOM是浏览器厂商在各自浏览器上定义的，兼容性较差</td></tr></tbody></table><h2 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h2><p>window.onload是窗口（页面）加载事件,当文档内容完全加载完成会触发该事件（包括图像、脚本文件、CSS文件等），就调用的处理函数。</p><p>注意：</p><ol><li><p>有了 window.onload就可以把jS代码写到页面元素的上方，因为 onload是等页面内容全部加载完毕再去执行处理函数。</p></li><li><p>window. onload传统注册事件方式只能写一次，如果有多个，会以最后一个 window. onload为准。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>           btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>               <span class="hljs-title function_">alert</span>(<span class="hljs-number">233</span>);<br>           &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>如果使用 addEventListener则没有限制。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>, <span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-number">22</span>);<br>       &#125;)<br></code></pre></td></tr></table></figure><p><code>load</code> 等页面加载完毕运行,包含页面DOM元素 图片 flash css等等</p><p><code>DOMContentLoaded</code> 是DOM加载完毕就运行,不包含图片 flash css等等就可以执行,加载速度比load快一些</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-number">33</span>);<br>       &#125;)<br></code></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p><code>setTimeout()</code>这个调用函数我们也称为回调函数 callback</p><p>普通函数是按照代码顺序直接调用</p><p>而这个函数，需要等待时间，时间到了才去调用这个函数，因此称为回调函数。</p><p>简单理解：回调，就是回头调用的意思。上一件事千完，再回头再调用这个函数</p><p><code>element.onclick= function()&#123;&#125;</code>或者<code> element.addEventListener(&quot;click&quot;，fn)</code>里面的函数也是回调函数</p><h2 id="serTimeout定时器"><a href="#serTimeout定时器" class="headerlink" title="serTimeout定时器"></a>serTimeout定时器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">serTimeout</span>(调用函数,[延时毫秒数]); <span class="hljs-comment">// 单位是毫秒,可以省略,省略为0</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>调用函数可以直接写函数,还可以写 <strong>函数名</strong> 或者** ‘函数名()’**</p><p>页面中可能有很多定时器,一般给定时器加标识符(名字)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;时间到&#x27;</span>);<br><br>       &#125;<br>       <span class="hljs-keyword">var</span> time1 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">3000</span>);<br>       <span class="hljs-keyword">var</span> time2 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">5000</span>);<br>       <span class="hljs-comment">// setTimeout(&#x27;callback()&#x27;,3000);  不提倡加引号这个写法</span><br></code></pre></td></tr></table></figure><h2 id="setInterval定时器"><a href="#setInterval定时器" class="headerlink" title="setInterval定时器"></a>setInterval定时器</h2><p>语法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(调用函数,延时时间);<br></code></pre></td></tr></table></figure><p><code>setTimeout</code> 延时到了,就去调用这个回调函数,只调用一次,就结束<br><code>setInterval</code> 每隔这个延时时间,就去调用这个回调函数,会调用很多次,反复调用这个函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">setInterval(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;继续输出&#x27;</span>);<br>        &#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h2 id="停止定时器"><a href="#停止定时器" class="headerlink" title="停止定时器"></a>停止定时器</h2><p>window 可以省略,里面的参实就是定时器的标识符</p><p><strong>clearTimeout</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearTimeout</span>(timeoutID)<br><br></code></pre></td></tr></table></figure><p>代码案例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>       <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;boom!&#x27;</span>);<br><br>       &#125;, <span class="hljs-number">5000</span>)<br>       btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">// 点击按钮停止定时器</span><br>       &#125;);<br></code></pre></td></tr></table></figure><p><strong>clearInterval</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timeoutID)<br></code></pre></td></tr></table></figure><p>代码案例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;begin&quot;</span>&gt;</span>开启定时器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span>停止定时器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> begin = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.begin&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> stop = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.stop&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 全局变量</span></span><br><span class="language-javascript">        begin.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        stop.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(timer); <span class="hljs-comment">// 停止定时器</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h2><ol><li>在全局作用域或者以函数的形式调用时， this永远都是window。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// window</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// window</span><br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">fn</span>(); <span class="hljs-comment">// window可省略</span><br><br><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// window可省略</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>以方法的形式调用时， this是调用方法的那个对象 </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 指向 o 这个对象</span><br>    &#125;<br>&#125;<br>o.<span class="hljs-title function_">sayHi</span>();<br><br><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 指向btn这个按钮对象</span><br>&#125;<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 指向btn这个按钮对象</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>以构造函数的形式调用时， this是新创建的那个对象 </li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function Fun() &#123;<br>    console.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// 指向fun 实例对象</span><br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> = new <span class="hljs-title">Fun</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><ol start="4"><li>使用call和apply调用时， this是指定的那个对象</li></ol><h2 id="单线程机制"><a href="#单线程机制" class="headerlink" title="单线程机制"></a>单线程机制</h2><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript这门脚本语言诞生的使命所致— JavaScript是为处理页面中用户的交互，以及操作DOM而诞生的。</p><p>比如我们对某个DOM元素进行添加和删除操作，不能同时进行。应该先进行添加，之后再删除<br>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是：如果jS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。<br>为了解决这个问题，利用多核CPU的计算能力，HTM5提出 Web Worker标准，允许 JavaScript脚本创建多个线程。于是，jS中出现了<strong>同步</strong>和<strong>异步</strong></p><p><strong>同步：</strong></p><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><p><strong>异步：</strong></p><p>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><p>js的异步是通过回调函数实现的,一般有以下三种类型:</p><ul><li>普通事件:<code>click</code> <code>resize</code></li><li>资源加载:<code>load</code> <code>error</code></li><li>定时器</li></ul><p><strong>js执行机制：</strong></p><ol><li>先执行执行栈中的同步任务。</li><li>异步任务（回调函数）放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li></ol><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>window对象给我们提供了一个 location属性用于获取或设置窗体的URL，并且可以用于解析URL.因为这个属性返回的是一个对象，所以我们将这个属性也称为 location对象</p><p><strong>URL:</strong><br>统一资源定位符(Uniform Resource locator，URL)是互联网上标准资源的地址。互联网上的每个文件都有<br>一个唯的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><h3 id="获取URL参数"><a href="#获取URL参数" class="headerlink" title="获取URL参数"></a>获取URL参数</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> action=<span class="hljs-string">&quot;index.html&quot;</span>&gt;<br>        用户名: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;uname&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><ol><li>传过来的是: ?uname=输入的字符,先去掉问号<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var params = <span class="hljs-keyword">location</span>.<span class="hljs-keyword">search</span>.substr(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li>利用 = 把字符分割成数组<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> arr = params.split(<span class="hljs-string">&#x27;=&#x27;</span>);<br><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li>把数据写入div中<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">div.innerHTML</span> = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;欢迎你&#x27;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="location对象的属性"><a href="#location对象的属性" class="headerlink" title="location对象的属性"></a>location对象的属性</h3><ul><li><p><strong>href</strong>：跳转</p></li><li><p>hash   返回url中#后面的内容，包含#</p></li><li><p>host    主机名，包括端口</p></li><li><p>hostname   主机名</p></li><li><p>pathname     url中的路径部分</p></li><li><p>protocol    协议 一般是http、https</p></li><li><p>search         查询字符串</p></li></ul><p>代码案例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击跳转到B站<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">    btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;https://www.bilibili.com/&#x27;</span>;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// 5秒后自动跳转到百度</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> timer = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">jump</span>(); <span class="hljs-comment">// 先调用一次,避免页面刷新后的1秒不显示</span></span><br><span class="language-javascript">    <span class="hljs-built_in">setInterval</span>(jump, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">jump</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (timer == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">            location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;您将在&#x27;</span> + timer + <span class="hljs-string">&#x27;秒后跳转到百度&#x27;</span>;</span><br><span class="language-javascript">            timer--;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="location常见方法"><a href="#location常见方法" class="headerlink" title="location常见方法"></a>location常见方法</h3><ul><li><code>location.assign()</code>：改变浏览器地址栏的地址，并记录到历史中</li></ul><p>设置<code>location.href</code>  就会调用assign()。一般使用<code>location.href</code> 进行页面之间的跳转。</p><ul><li><p><code>location.replace()</code>：替换浏览器地址栏的地址，不会记录到历史中</p></li><li><p><code>location.reload()</code>：重新加载</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">    btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 记录浏览历史,可以实现后退功能</span></span><br><span class="language-javascript">        <span class="hljs-comment">// location.assign(&#x27;http://www.baidu.com&#x27;);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 不记录浏览历史,不可以实现后退功能            </span></span><br><span class="language-javascript">        <span class="hljs-comment">// location.replace(&#x27;http://www.baidu.com&#x27;);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 刷新 参数为true则强制刷新</span></span><br><span class="language-javascript">        location.<span class="hljs-title function_">reload</span>(<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coq">// 判断用户使用哪个终端打开页面,实现跳转 <br>      // 一般服务端来做这个功能<br>      <span class="hljs-keyword">if</span> ((navigator.userAgent.<span class="hljs-keyword">match</span>(/(phone | <span class="hljs-type">pad</span> | <span class="hljs-type">pod</span> | <span class="hljs-type">iPhone</span> | <span class="hljs-type">iPod</span> | <span class="hljs-type">ios</span> | <span class="hljs-type">iPad</span> | <span class="hljs-type">Android</span> | <span class="hljs-type">Mobile</span> | <span class="hljs-type">BlackBerry</span> | <span class="hljs-type">IEMobile</span> | <span class="hljs-type">MogBrowser</span> | <span class="hljs-type">JUC</span> | <span class="hljs-type">Fennec</span> | <span class="hljs-type">wOSBrowser</span> | <span class="hljs-type">BrowserNG</span> | <span class="hljs-type">WebOS</span> | <span class="hljs-type">Symbian</span> | <span class="hljs-type">Windows</span> | <span class="hljs-type">Phone</span>) /i))) &#123;<br><br>          window.location.href = <span class="hljs-string">&quot;&quot;</span>; //手机 引号里面写手机端网页<br><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          window.location.href = <span class="hljs-string">&quot;&quot;</span>; //电脑 引号里面写pc端网页<br>      &#125;<br></code></pre></td></tr></table></figure><p><code>window.navigator</code> 的一些属性可以获取客户端的一些信息。</p><ul><li><p><code>userAgent</code>：系统，浏览器</p></li><li><p><code>platform</code>：浏览器支持的系统，win/mac/linux</p></li></ul><p>举例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(navigator.userAgent);<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(navigator.platform);<br></code></pre></td></tr></table></figure><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>1、历史记录管理</p><p>2、后退：</p><ul><li><p><code>history.back()</code></p></li><li><p><code>history.go(-1)</code>：0是刷新</p></li></ul><p>3、前进：</p><ul><li><p><code>history.forward()</code></p></li><li><p><code>history.go(1)</code></p></li></ul><p>用的不多，一般用于写OA系统,普通页面用不着，因为浏览器中已经自带了这些功能的按钮。</p><p>代码案例:</p><p>index:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;list.html&quot;</span>&gt;</span>点我去分页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>前进<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 前进功能</span></span><br><span class="language-javascript">            <span class="hljs-comment">// history.forward();</span></span><br><span class="language-javascript">            <span class="hljs-comment">//前进后退功能,1前进一个页面,-1后退一个页面</span></span><br><span class="language-javascript">            history.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>list:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span>点我去首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>后退<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 后退功能</span></span><br><span class="language-javascript">            <span class="hljs-comment">// history.back();</span></span><br><span class="language-javascript">            <span class="hljs-comment">//前进后退功能,1前进一个页面,-1后退一个页面</span></span><br><span class="language-javascript">            history.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="callback-amp-amp-callback"><a href="#callback-amp-amp-callback" class="headerlink" title="callback &amp;&amp; callback()"></a>callback &amp;&amp; callback()</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">if (callback) &#123;<br><span class="hljs-built_in">callback</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以写成</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">callback</span> &amp;&amp; <span class="hljs-function"><span class="hljs-title">callback</span>()</span><br></code></pre></td></tr></table></figure><p>短路运算,高级运算:如果callback存在，则执行callback()函数。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>BOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-DOM篇-事件高级</title>
    <link href="/blog/2019/10/15/js-DOM%E7%AF%87-%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/"/>
    <url>/blog/2019/10/15/js-DOM%E7%AF%87-%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<p>本篇为jsDOM笔记,记录下来主要用于复习,巩固。包括以下内容：注册事件、删除事件、事件对象、this和target的区别、事件对象阻止默认行为、DOM事件流、事件委托、鼠标事件、鼠标事件对象、图片跟随鼠标移动、键盘事件、键盘事件对象。</p><span id="more"></span><h2 id="注册事件-绑定事件"><a href="#注册事件-绑定事件" class="headerlink" title="注册事件(绑定事件)"></a>注册事件(绑定事件)</h2><h3 id="注册事件概述"><a href="#注册事件概述" class="headerlink" title="注册事件概述"></a>注册事件概述</h3><p>给元素添加事件，称为主册事件或者绑定事件。</p><p>注册事件有两种方式：传统方式和方法监听主册方式</p><h3 id="传统注册方式"><a href="#传统注册方式" class="headerlink" title="传统注册方式"></a>传统注册方式</h3><p>利用on开头的事件 onclick:</p><p>语法：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">element.onclick = <span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;第一个&#x27;</span>);<br>        &#125;<br>        btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;第二个&#x27;</span>); <span class="hljs-comment">// 会覆盖第一个</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>特点：注册事件的唯一性</p><p>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数 </p><h3 id="方法监听注册方式"><a href="#方法监听注册方式" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h3><ul><li>w3c标准推荐方式</li><li><code>addEventListener()</code>，它是一个方法</li><li>IE9之前的IE不支持此方法，可使用 <code>attachEvent()</code>代替</li><li>特点：同一个元素同一个事件可以注册多个监听器</li><li>按注册顺序依次执行</li></ul><p>语法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">eventTarget.add<span class="hljs-constructor">EventListener(<span class="hljs-params">type</span>, <span class="hljs-params">listener</span>,[<span class="hljs-params">useCapture</span>])</span> <span class="hljs-comment">// []表示可选</span><br></code></pre></td></tr></table></figure><p><code>evenTarget.addEventListener（）</code>方法将指定的监听器注册到 <code>eventTarget</code>（目标对<br>象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p>该方法接收三个参数:</p><ul><li><p><code>type</code>：事件类型字符串，比如 click、 mouseover，注意这里不要带on</p></li><li><p><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</p></li><li><p><code>useCapture</code>：可选参数，是一个布尔值，<strong>true表示捕获阶段触发，false表示冒泡阶段触发（默认）</strong></p></li></ul><p>例子：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">btns<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123; <br><span class="hljs-comment">// 注意这里click不要带on</span><br>               <span class="hljs-built_in">alert</span>(<span class="hljs-number">22</span>);<br>           &#125;)<br><span class="hljs-comment">// 同一个元素同一个事件可以添加多个侦听器（事件处理程序)</span><br>btns<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123; <br><span class="hljs-comment">// 注意这里click不要带on</span><br>           <span class="hljs-built_in">alert</span>(<span class="hljs-number">33</span>);<br>       &#125;)<br></code></pre></td></tr></table></figure><h2 id="删除事件-解绑事件"><a href="#删除事件-解绑事件" class="headerlink" title="删除事件(解绑事件)"></a>删除事件(解绑事件)</h2><p><strong>传统方式删除事件：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">divs[<span class="hljs-number">0</span>].onclick <span class="hljs-operator">=</span> null<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong><code>removeEventListener</code> 删除事件</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">divs<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>.remove<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">click</span>&#x27;, <span class="hljs-params">fn</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>ie9以下删除事件</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">divs<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>.dispatch<span class="hljs-constructor">Event(&#x27;<span class="hljs-params">onclick</span>&#x27;, <span class="hljs-params">fn1</span>)</span><br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>在触发DOM上的某个事件时，会产生一个事件对象event。</p><ol><li>event就是一个事件对象 写到我们侦听函数的小括号里面当形参来看</li><li>事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</li><li>事件对象是我们事件的一系列相关数据的集合,跟事件相关的,比如:鼠标点击里面就包含了鼠标的相关信息，鼠标坐标啊，如果是键盘事件里面就包含的键盘事件的信息,比如:判断用户按下了那个键。</li></ol><p>所有浏览器都支持event对象，但支持的方式不同。如下。</p><p>（1）普通浏览器支持 event<br>（2）ie 678 支持 window.event。</p><p>传统写法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">div.onclick = <span class="hljs-keyword">function</span>(e) &#123;&#125;<br><span class="hljs-regexp">//</span> e = e || window.event; <span class="hljs-regexp">//</span> 兼容写法,不常用<br></code></pre></td></tr></table></figure><p>事件对象可以自己命名,比如:<code>event</code>,<code> evt</code>, <code>e</code></p><p>常用写法：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">div</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span> <span class="hljs-comment">&#123;&#125;</span></span><br></code></pre></td></tr></table></figure><h2 id="this与target的区别"><a href="#this与target的区别" class="headerlink" title="this与target的区别"></a>this与target的区别</h2><p><code>e.target</code>返回的是触发事件的对象(元素)， this 返回的是绑定事件的对象(元素)</p><p><code>currentTarget</code>跟this很像,但是有兼容性问题,ie678不认识</p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ul&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>qqq<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 给ul绑定了事件,那么this,就指向ul</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>); <span class="hljs-comment">// 指向点击的对象,点击哪个li就指向li</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>ie678兼容性写法</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">div, onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span></span> &#123;<br>e = e || window.event;<br>var <span class="hljs-keyword">target</span> = e.<span class="hljs-keyword">target</span> || e.srcElement;<br></code></pre></td></tr></table></figure><h2 id="事件对象阻止默认行为"><a href="#事件对象阻止默认行为" class="headerlink" title="事件对象阻止默认行为"></a>事件对象阻止默认行为</h2><p>阻止默认行为(事件) ：让链接不跳转,或者让提交按钮不提交</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">e.preventDefault() <span class="hljs-regexp">//</span> 方法 dom标准写法 适用于普通浏览器<br></code></pre></td></tr></table></figure><p>传统注册方式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">a.onclick = <span class="hljs-keyword">function</span>() &#123;<br><span class="hljs-regexp">//</span> 适用于低版本浏览器 ie678<br>e.returnValue; <span class="hljs-regexp">//</span> 属性<br></code></pre></td></tr></table></figure><p><code>return false</code>也能阻止默认行为,没有兼容性问题,<br>但是return后面的代码不执行了,且仅限于传统注册方式</p><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>事件流描述的是从页面中接收事件的顺序<br>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流。<br>比如我们给一个div注册了点击事件:<br>DOM事件流分为3个阶段:</p><p>1.捕获阶段<br>2.当前目标阶段<br>3.冒泡阶段<br>事件冒泡：ie最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程<br>事件捕获：网景最早提出，由DOM最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</p><h3 id="捕获阶段"><a href="#捕获阶段" class="headerlink" title="捕获阶段"></a>捕获阶段</h3><p>事件依次传递的顺序是：window –&gt; document –&gt; html–&gt; body –&gt; 父元素、子元素、目标元素。</p><h3 id="冒泡阶段"><a href="#冒泡阶段" class="headerlink" title="冒泡阶段"></a>冒泡阶段</h3><p><strong>事件冒泡</strong>: 当一个元素上的事件被触发的时候（比如说鼠标点击了一个按钮），同样的事件将会在那个元素的所有<strong>祖先元素</strong>中被触发。这一过程被称为事件冒泡；这个事件从原始元素开始一直冒泡到DOM树的最上层。</p><p><strong>子元素的事件被触发时，父盒子的同样的事件也会被触发</strong>。取消冒泡就是取消这种机制。</p><p>事件依次传递的顺序是：div -&gt; body -&gt; html -&gt; document -&gt; window</p><p><strong>注意：</strong></p><p>1.JS代码中只能执行捕获或者冒泡其中的一个阶段。</p><p>2.<code>onclick</code>和 <code>attachEvent</code>只能得到冒泡阶段。</p><ol start="3"><li><code>addEventListener（type，listener[， useCapture]）</code>第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是 false（不写默认就是false），表示在事件冒泡阶段调用事件处理程序</li></ol><p>4.实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</p><p>5.有些事件是没有冒泡的，比如<code>onblur</code>、 <code>onfocus</code>、 <code>onmouseenter</code>、 <code>onmouseleave</code></p><p>6.事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件。 </p><p>通过<code>event.bubbles</code>来检查元素是否会冒泡，如果返回值为true，说明该事件会冒泡；反之则相反。</p><h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">e.stopPropagation(); <span class="hljs-regexp">//</span> 标准 阻止冒泡<br>e.cancelBubble = true; <span class="hljs-regexp">//</span> 非标准 取消冒泡 ie678使用<br></code></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>重点: 不是每个子节点单独设置事件监听器， 而是事件监听器设置在其父节点上， 然后利用冒泡原<br>理影响设置每个子节点。</p><p>给ul注册点击事件，然后利用事件对象的 target来找到当前点击的li，因为点击li，事件会冒泡到ul上,<br>ul有注册事件，就会触发事件监听器。</p><p>事件委托的作用:</p><p>我们只操作了一次DOM，提高了程序的性能。</p><p>代码验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 点击哪个li，哪个li背景颜色就变红色</span><br>&lt;ul&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>e.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;#f00&#x27;</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><p>禁用鼠标右键菜单</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>document.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">contextmenu</span>&#x27;, <span class="hljs-params">function</span>(<span class="hljs-params">e</span>)</span> &#123;<br>e.prevent<span class="hljs-constructor">Default()</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><p>禁止选中文字</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">document.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">selectstart</span>&#x27;, <span class="hljs-params">function</span>(<span class="hljs-params">e</span>)</span> &#123;<br>e.prevent<span class="hljs-constructor">Default()</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h2><ol><li>鼠标在可视区的 x 和 y 坐标<br><code>e.clientX</code><br><code>e.clientY</code></li><li>鼠标相对于文档页面的 x y 坐标 ie9+支持 (重点)<br><code>e.pageX)</code><br><code>e.pageY)</code></li><li>鼠标在电脑屏幕的 x y 坐标<br><code>e.screenX</code><br><code>e.screenY</code></li></ol><h2 id="图片跟随鼠标移动"><a href="#图片跟随鼠标移动" class="headerlink" title="图片跟随鼠标移动"></a>图片跟随鼠标移动</h2><p><code>mousemove</code>:鼠标移动事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> pic = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span>;<br><span class="hljs-keyword">var</span> y = e.<span class="hljs-property">pageY</span>;<br><span class="hljs-comment">// 要加 px 单位</span><br>pic.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = x - <span class="hljs-number">30</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>pic.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = y - <span class="hljs-number">40</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>常用的键盘事件</p><p>传统方式：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.onkeyup = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;弹起&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 弹起 keyup</span><br>document.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;弹起了&#x27;</span>);<br></code></pre></td></tr></table></figure><p>弹起 <code>keyup</code><br>按下 <code>keydown</code><br>按下 (不能识别功能键) <code>keypress</code></p><p>注意:<br>使用<code>addEventListener</code>不需要加 on<br>三个事件执行顺序: <code>keydown -&gt; keypress -&gt; keyup</code></p><h2 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h2><p>键盘事件对象中<code>keyCode</code>属性可以得到对应的ASCII码值<br><code>keyup</code>和<code>keydown</code> 不区分大小写, a 和 A都是65 识别所有的键<br><code>keypress</code> 区分大小写 a 是97, A 是 65 不识别功能键</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.keyCode);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>DOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用border做个小三角</title>
    <link href="/blog/2019/10/09/CSS%E4%B8%89%E8%A7%92/"/>
    <url>/blog/2019/10/09/CSS%E4%B8%89%E8%A7%92/</url>
    
    <content type="html"><![CDATA[<p>利用伪元素<code>before</code>和<code>border</code>属性做个小三角,可以用来做角标</p><span id="more"></span><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.con</span><span class="hljs-selector-pseudo">::before</span> &#123;<br><span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">8px</span> solid;<br><span class="hljs-attribute">border-color</span>: <span class="hljs-number">#fff</span> transparent transparent;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/01/6sZdGc1Bhnlt93V.png"></p>]]></content>
    
    
    <categories>
      
      <category>小技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-DOM篇-节点操作</title>
    <link href="/blog/2019/10/07/js-DOM%E7%AF%87-%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/"/>
    <url>/blog/2019/10/07/js-DOM%E7%AF%87-%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>本篇为jsDOM笔记,记录下来主要用于复习,巩固。包括以下内容：节点概述、父节点、子节点、获取子节点的第一个和最后一个节点、兄弟节点、创建节点、删除节点、复制节点、设置节点属性、DOM总结。</p><span id="more"></span><h2 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h2><ul><li><p>节点类型:nodeType</p></li><li><p>节点名称:nodeType</p></li><li><p>节点值:nodeValue </p></li><li><p>元素节点 nodeType为 1</p></li><li><p>属性节点 nodeType为 2</p></li><li><p>文本节点 nodeType为 3 (包含文字,空格,换行等)</p></li></ul><h2 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h2><p>父节点 parentNode</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;er&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 父节点 parentNode</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> er = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.er&#x27;</span>);</span><br><span class="language-javascript">       <span class="hljs-comment">// var box = document.querySelector(&#x27;.box&#x27;)</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 得到的是离元素最近的父级节点,如果找不到父级节点就返回 null</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(er.<span class="hljs-property">parentNode</span>); <span class="hljs-comment">// box</span></span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h2><p>DOM提供的获取(API)方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br><span class="hljs-keyword">var</span> lis = ul.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br></code></pre></td></tr></table></figure><ol><li>子节点 <code>childNodes</code></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ul.childNodes);<span class="hljs-comment">// 包括所有的子节点</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ul.childNodes[<span class="hljs-number">0</span>].nodeType); <span class="hljs-comment">// 3 文本节点</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ul.childNodes[<span class="hljs-number">1</span>].nodeType); <span class="hljs-comment">// 1 元素节点</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>children</code> (<strong>重点</strong>常用的获取所有子元素节点,不包括文本节点)</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ul.children);<br></code></pre></td></tr></table></figure><h2 id="获取子元素第一个和最后一个节点"><a href="#获取子元素第一个和最后一个节点" class="headerlink" title="获取子元素第一个和最后一个节点"></a>获取子元素第一个和最后一个节点</h2><p><code>firstChild</code> 第一个子节点,不管是文本节点还是元素节点</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ol.firstChild);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ol.lastChild);<br></code></pre></td></tr></table></figure><p><code>firstElementChild</code> 返回第一个元素节点    ie9以上支持</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ol.firstElementChild);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ol.lastElementChild);<br></code></pre></td></tr></table></figure><p>实际开发写法 没有兼容性问题</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ol.children[<span class="hljs-number">0</span>]);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ol.children[ol.children.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h2 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h2><p>查找下一个兄弟节点,包含元素节点,文本节点等</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> div = document.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.nextSibling); <span class="hljs-comment">// 下一个</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.previousSibling); <span class="hljs-comment">// 上一个</span><br></code></pre></td></tr></table></figure><p>得到下一个兄弟元素节点 ie9以上支持</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.nextElementSibling); <span class="hljs-comment">// 下一个</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.previousElementSibling); <span class="hljs-comment">// 上一个</span><br></code></pre></td></tr></table></figure><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.创建元素节点</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">新的标签(元素节点) = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;标签名&quot;</span>);<br><span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br></code></pre></td></tr></table></figure><p>2.后面添加节点 <code>node.appendChild(child)</code>  node父级  child 子级 在后面添加 类似数组中push</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>ul.appendChild(li);<br></code></pre></td></tr></table></figure><p>3.前面添加节点 <code>node.insertBefore(child,指定元素)</code> 指定元素前面</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var lili = document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">li</span>&#x27;)</span>;<br>ul.insert<span class="hljs-constructor">Before(<span class="hljs-params">lili</span>, <span class="hljs-params">ul</span>.<span class="hljs-params">children</span>[0])</span>;<br></code></pre></td></tr></table></figure><p>总结:<br>想要添加一个新的元素:1. 创建元素 2. 添加元素</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">父节点.removeChild(子节点)<span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><h2 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h2><p><code>ode.cloneNode()</code>: 复制节点 括号里面为空或者为false,是浅拷贝,只复制节点本身,不复制里面的子节点</p><p><code>node.cloneNode(true)</code>: 括号里面为<code>true</code>是深拷贝,复制标签里面的内容</p><h2 id="设置节点属性"><a href="#设置节点属性" class="headerlink" title="设置节点属性"></a>设置节点属性</h2><h3 id="获取节点属性值"><a href="#获取节点属性值" class="headerlink" title="获取节点属性值"></a>获取节点属性值</h3><p>方式1:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">元素节点.属性名<span class="hljs-comment">;</span><br>元素节点[属性名]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>方式2:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">元素节点.getAttribute(<span class="hljs-string">&quot;属性名称&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="设置节点属性值"><a href="#设置节点属性值" class="headerlink" title="设置节点属性值"></a>设置节点属性值</h3><p>方法1:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">元素节点.属性 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;值&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>方法2:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">元素节点.setAttribute<span class="hljs-comment">(属性名, 新的属性值)</span>;<br></code></pre></td></tr></table></figure><h3 id="删除节点属性"><a href="#删除节点属性" class="headerlink" title="删除节点属性"></a>删除节点属性</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">元素节点.removeAttribute(属性名)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>获取节点的属性值和设置节点的属性值，都有两种方式，但这两种方式是有区别的。</p><ul><li><p>方式一的<code>元素节点.属性</code>和<code>元素节点[属性]</code>:绑定的属性值不会出现在标签上。</p></li><li><p>方式二的<code>get/set/removeAttribut</code>: 绑定的属性值会出现在标签上。</p></li></ul><p>方式一操作的是属性而已，方式二操作的是标签本身。<br><strong>这两种方式不能交换使用</strong>，get值和set值必须使用用一种方法。</p><h2 id="DOM总结"><a href="#DOM总结" class="headerlink" title="DOM总结"></a>DOM总结</h2><p>文档对象模型简称: DOM.是w3c组织推荐的可扩展标记语言(html或xml) 的标准编程接口<br>我们获取的DOM元素是一个对象(Object)</p><p>创建</p><ol><li><code>document.write</code></li><li><code>innerHTML</code></li><li><code>createElement</code></li></ol><p>增</p><ol><li><code>appendChild</code></li><li><code>insertBefore</code></li></ol><p>删</p><ol><li><code>removeChild</code></li></ol><p>改<br>主要修改DOM的元素属性, dom的元素内容, 属性, 表单的值和样式</p><ol><li>修改元素属性: <code>src, href, title</code>等</li><li>修改普通元素内容:<code> innerHTML, innerText</code></li><li>修改表单元素: <code>value, type, disabled</code>等</li><li>修改元素样式: <code>style, className</code></li></ol><p>查<br>主要获取dom的元素</p><ol><li>DOM提供的API方法: <code>getElementById, getElementByTagName</code>古老用法, 不推荐</li><li>H5提供的新方法: <code>queueSelector, querySelectorAll</code> 推荐用法</li><li>利用节点操作获取元素: 父(<code>parentNode</code>), 子(<code>children</code>), 兄(<code>previousElementSibling</code>, <code>nextElementSibling</code>) 推荐</li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>DOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-DOM篇-操作元素</title>
    <link href="/blog/2019/10/06/js-DOM%E7%AF%87-%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0/"/>
    <url>/blog/2019/10/06/js-DOM%E7%AF%87-%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>本篇为jsDOM笔记,记录下来主要用于复习,巩固。包括以下内容：事件、获取事件源的方式、innerHTML和innerText的区别、style属性的获取和修改、className属性的获取和修改。</p><span id="more"></span><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><strong>事件的三要素：事件源、事件类型、事件驱动程序</strong>。</p><p>点击按钮,弹出对话框:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>唐伯虎<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1. 事件源: 事件被触发的对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 2. 事件类型: 如何触发,比如鼠标点击,鼠标经过,键盘按下</span></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 3. 事件处理程序 通过一个函数赋值的方式完成</span></span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;点秋香&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常见事件:</p><table><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获取鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h2 id="获取事件源的方式"><a href="#获取事件源的方式" class="headerlink" title="获取事件源的方式"></a>获取事件源的方式</h2><ol><li>文档页面从上往下加载,所以先得有标签,所以script写到标签下面</li><li>get 获得element 元素 by 通过 驼峰命名法</li><li>参数 id时大小写敏感的字符串</li><li>返回的是一个元素对象</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> div1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box1&quot;</span>);      <span class="hljs-comment">//方式一：通过id获取单个标签</span><br><br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>);     <span class="hljs-comment">//方式二：通过 标签名 获得 标签数组，所以有s</span><br><br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;hehe&quot;</span>);  <span class="hljs-comment">//方式三：通过 类名 获得 标签数组，所以有s</span><br></code></pre></td></tr></table></figure><p>返回指定选择器的第一个元素对象 切记 里面的选择器需要加符号 .box #nav</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> firstBox = document.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(firstBox);<br><br><span class="hljs-keyword">var</span> nav = document.querySelector(<span class="hljs-string">&#x27;#nav&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(nav);<br><br><span class="hljs-keyword">var</span> li = document.querySelector(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(li);<br></code></pre></td></tr></table></figure><p>返回指定选择器的所有元素对象集合</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> allBox = document.querySelectorAll(<span class="hljs-string">&#x27;.box&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(allBox);<br><br><span class="hljs-keyword">var</span> lis = document.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(lis);<br></code></pre></td></tr></table></figure><ol><li>获取body 元素</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var bodyEle <span class="hljs-operator">=</span> document.body<span class="hljs-comment">;</span><br>console.log(bodyEle)<span class="hljs-comment">;</span><br>console.dir(bodyEle)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>获取html 元素</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var htmlEle <span class="hljs-operator">=</span> document.documentElement<span class="hljs-comment">;</span><br>console.log(htmlEle)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="innerHTML和innerText的区别"><a href="#innerHTML和innerText的区别" class="headerlink" title="innerHTML和innerText的区别"></a>innerHTML和innerText的区别</h2><p><code>element.innerHTMl</code>和<code>element.innerText</code> 可以修改元素里面的内容</p><ol><li>innerText 不识别html标签 会去除空格和换行 非标准</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-keyword">div</span> = document.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">div</span>.innerText = <span class="hljs-string">&#x27;今天是:&lt;strong&gt;星期天&lt;/strong&gt;&#x27;</span>; <span class="hljs-comment">// strong标签会打印出来</span><br></code></pre></td></tr></table></figure><ol start="2"><li>innerHTML 识别html标签 保留空格和换行 w3c标准</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">div.innerHTML</span> = <span class="hljs-string">&#x27;今天是:&lt;strong&gt;星期天&lt;/strong&gt;&#x27;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>这两个属性是可读写的, 可以获取元素里面的内容</li></ol><h2 id="style属性的获取和修改"><a href="#style属性的获取和修改" class="headerlink" title="style属性的获取和修改"></a>style属性的获取和修改</h2><p>在DOM当中，如果想设置样式，有两种形式：</p><ul><li>className（针对内嵌样式）</li><li>style（针对行内样式）</li></ul><p>style是一个对象，只能获取<strong>行内样式</strong>，不能获取内嵌的样式和外链的样式</p><ul><li>this.style里面的属性要用 驼峰命名法</li><li>js修改style样式产生的是行内样式,css权重高</li></ul><p>鼠标点击改变div大小颜色:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">         <span class="hljs-comment">//this 指向的是事件函数的调用者 div</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;#00f&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;300px&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="通过-js-读取元素的样式"><a href="#通过-js-读取元素的样式" class="headerlink" title="通过 js 读取元素的样式"></a>通过 js 读取元素的样式</h3><p>1.通过style属性读取的样式都是<strong>行内样式</strong>:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">元素<span class="hljs-string">.style.</span>样式名<br></code></pre></td></tr></table></figure><p>2.可以给属性传递参数:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">元素.style[<span class="hljs-string">&quot;属性&quot;</span>];  <span class="hljs-regexp">//</span>格式<br><br>   box.style[<span class="hljs-string">&quot;width&quot;</span>];  <span class="hljs-regexp">//</span>举例<br></code></pre></td></tr></table></figure><h3 id="通过-js-修改元素的样式"><a href="#通过-js-修改元素的样式" class="headerlink" title="通过 js 修改元素的样式"></a>通过 js 修改元素的样式</h3><p>要采用驼峰命名法</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">元素.style.样式名 <span class="hljs-operator">=</span> 样式值<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="通过-js-获取元素当前显示的样式"><a href="#通过-js-获取元素当前显示的样式" class="headerlink" title="通过 js 获取元素当前显示的样式"></a>通过 js 获取元素当前显示的样式</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">window</span>.getComputedStyle(<span class="hljs-string">&quot;要获取样式的元素&quot;</span>, <span class="hljs-string">&quot;伪元素&quot;</span>);<br></code></pre></td></tr></table></figure><p>两个参数都是必须要有的。参数二中，如果没有伪元素就用 null 代替（一般都传null）。</p><h2 id="className属性的获取和修改"><a href="#className属性的获取和修改" class="headerlink" title="className属性的获取和修改"></a>className属性的获取和修改</h2><ol><li><p>修改样式较少,功能简单用element.style</p></li><li><p>修改样式多,功能复杂,先定义好想要的样式,然后通过修改元素className更改元素样式</p></li><li><p>className会覆盖原来的类名,如果要保留原先的类名,可以用多类名选择器</p></li></ol><p>例子: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.change</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span>文本<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> test = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        test.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;cl change&#x27;</span>; <span class="hljs-comment">// 多类名选择器</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="排他算法"><a href="#排他算法" class="headerlink" title="排他算法"></a>排他算法</h2><p>切换按钮颜色:</p><p>// 排他算法: 先排除他人,然后设置自己的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 排他算法: 先排除他人,然后设置自己的样式</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 获取所有按钮元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.<span class="hljs-property">length</span>; i++) &#123; <span class="hljs-comment">// btns得到的是伪数组 每一个元素是 btns[i]</span></span><br><span class="language-javascript">        btns[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 先把所有按钮颜色都去掉</span></span><br><span class="language-javascript">                btns[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 然后才让当前的元素变颜色</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;#f0f&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>添加自定义属性:</p><pre><code class="hljs">element.getAttribute(&#39;属性&#39;)</code></pre><p>设置自定义属性:</p><pre><code class="hljs">element.setAttribute(&#39;属性&#39;, &#39;值&#39;))</code></pre><p>移除属性:</p><pre><code class="hljs">removeAttribute(&#39;属性&#39;)</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">       <span class="hljs-comment">// 获取元素属性值</span></span><br><span class="language-javascript">       <span class="hljs-comment">// (1) element.属性</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">id</span>);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 设置元素属性</span></span><br><span class="language-javascript">       <span class="hljs-comment">// (1) element.属性 = &#x27;值&#x27;</span></span><br><span class="language-javascript">       div.<span class="hljs-property">id</span> = <span class="hljs-string">&#x27;text&#x27;</span>;</span><br><span class="language-javascript">       div.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;navs&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       div.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-number">2</span>);</span><br><span class="language-javascript">       div.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;footer&#x27;</span>); <span class="hljs-comment">// 可以修改属性,把navs 改成footer</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// ;</span></span><br><span class="language-javascript">       div.<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h2><p>H5规定自定义属性以 <code>data-</code> 开头作为属性名并赋值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var div = document.query<span class="hljs-constructor">Selector(&#x27;<span class="hljs-params">div</span>&#x27;)</span>;<br>      <span class="hljs-comment">// getAttribute 兼容性更好</span><br>      console.log(div.get<span class="hljs-constructor">Attribute(&#x27;<span class="hljs-params">data</span>-<span class="hljs-params">index</span>&#x27;)</span>);<br>      div.set<span class="hljs-constructor">Attribute(&#x27;<span class="hljs-params">data</span>-<span class="hljs-params">time</span>&#x27;, 20)</span>;<br>      console.log(div.get<span class="hljs-constructor">Attribute(&#x27;<span class="hljs-params">data</span>-<span class="hljs-params">list</span>-<span class="hljs-params">name</span>&#x27;)</span>);<br>      console.log(div.get<span class="hljs-constructor">Attribute(&#x27;<span class="hljs-params">data</span>-<span class="hljs-params">time</span>&#x27;)</span>);<br></code></pre></td></tr></table></figure><p>H5新增获取自定义属性的方法,只能获取<code>data-</code>开头的 ie11以下不兼容<br><code>dataset</code> 是一个集合 里面存放了所有以<code>data</code>开头的自定义属性</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.dataset);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.dataset.index);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.dataset[<span class="hljs-string">&#x27;index&#x27;</span>]);<br>      <span class="hljs-comment">// 如果自定义属性里面有多个-链接的单词.我们获取的时候采用 驼峰命名法</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.dataset.listName);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.dataset[<span class="hljs-string">&#x27;listName&#x27;</span>]);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>DOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js基础篇三</title>
    <link href="/blog/2019/10/05/js%E7%AF%87%E4%B8%89/"/>
    <url>/blog/2019/10/05/js%E7%AF%87%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<p>本篇为js基础笔记,记录下来主要用于复习,巩固。包括以下内容：数组添加删除元素、数组遍、函数、方法、作用域、预解析、作用域链</p><span id="more"></span><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>简介：</p><p><strong>对象的作用是：封装信息</strong>。</p><p>对象具有<strong>特征</strong>（属性）和<strong>行为</strong>（方法）。</p><p>面向对象：可以创建自定义的类型，很好的支持继承和多态。</p><p>面向对象的特征：封装、继承、多态。</p><h3 id="对象简介"><a href="#对象简介" class="headerlink" title="对象简介"></a>对象简介</h3><h4 id="基本数据类型和引用数据类型的对比"><a href="#基本数据类型和引用数据类型的对比" class="headerlink" title="基本数据类型和引用数据类型的对比"></a>基本数据类型和引用数据类型的对比</h4><ul><li><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。</li><li><strong>引用数据类型（引用类型）</strong>：Object 对象。</li></ul><p><strong>基本数据类型</strong>：</p><p>基本数据类型的值直接保存在<strong>栈内存</strong>中，值与值之间是独立存在，修改一个变量不会影响其他的变量。</p><p><strong>对象</strong>：</p><p>只要不是那五种基本数据类型，就全都是对象。</p><p>如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。</p><p>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p><p>对象是保存到<strong>堆内存</strong>中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间。变量保存的是对象的内存地址（对象的引用）。</p><p>换而言之，对象的值是保存在<strong>堆内存</strong>中的，而对象的引用（即变量）是保存在<strong>栈内存</strong>中的。</p><p><strong>如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响</strong>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var obj <span class="hljs-operator">=</span> new Object()<span class="hljs-comment">;</span><br>obj.name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;22&quot;</span><span class="hljs-comment">;</span><br><br>var obj2 <span class="hljs-operator">=</span> obj<span class="hljs-comment">;</span><br><br>//修改obj的name属性<br>obj.name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;33&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>上面的代码中，当我修改obj的name属性后，会发现，obj2的name属性也会被修改。因为obj和obj2指向的是堆内存中的同一个地址。</p><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><p>1.内置对象：</p><ul><li>由ES标准中定义的对象，在任何的ES的实现中都可以使用</li><li>比如：Math、String、Number、Boolean、Function、Object….</li></ul><p>2.宿主对象：</p><ul><li>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象。</li><li>比如 BOM DOM。比如<code>console</code>、<code>document</code>。</li></ul><p>3.自定义对象：</p><ul><li>由开发人员自己创建的对象</li></ul><h3 id="利用new创建对象"><a href="#利用new创建对象" class="headerlink" title="利用new创建对象"></a>利用new创建对象</h3><p>用new关键字调用的函数，是构造函数constructor。<strong>构造函数是专门用来创建对象的函数</strong>。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <span class="hljs-comment">// 创建了一个空的对象</span><br></code></pre></td></tr></table></figure><p>另外，使用<code>typeof</code>检查一个对象时，会返回<code>object</code>。</p><p><strong>向对象中添加属性</strong></p><p>对象的属性值可以是任何的数据类型，也可以是个<strong>函数</strong>：（也称之为方法）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">对象.属性名 <span class="hljs-operator">=</span> 属性值<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="获取对象中的属性"><a href="#获取对象中的属性" class="headerlink" title="获取对象中的属性"></a>获取对象中的属性</h3><p>方式1:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对象.属性名<br></code></pre></td></tr></table></figure><p>例子:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// new Object 创建对象</span><br>      <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Object(); <span class="hljs-comment">// 创建了一个空的对象</span><br>      obj.name = <span class="hljs-string">&#x27;张三&#x27;</span>; <span class="hljs-comment">// 利用等号 = 赋值的方法添加对象的属性和方法</span><br>      obj.age = <span class="hljs-number">18</span>; <span class="hljs-comment">// 属性和方法之间用 &#x27;;&#x27; 结束</span><br>      obj.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>      obj.sayHi = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>); <span class="hljs-comment">// 3.你好 函数不调用不执行,最后调用的</span><br>      &#125;<br>      <span class="hljs-comment">// 获取对象中的属性，并打印出来</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.name); <span class="hljs-comment">// 1.张三</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj[<span class="hljs-string">&#x27;age&#x27;</span>]); <span class="hljs-comment">// 2.18</span><br>      obj.sayHi();<br></code></pre></td></tr></table></figure><p>方式2:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">对象[<span class="hljs-string">&quot;属性名&quot;</span>] <span class="hljs-operator">=</span> 属性值<br><br> obj[<span class="hljs-string">&quot;123&quot;</span>] <span class="hljs-operator">=</span> <span class="hljs-number">456</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="修改对象的属性值"><a href="#修改对象的属性值" class="headerlink" title="修改对象的属性值"></a>修改对象的属性值</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">对象.属性名 <span class="hljs-operator">=</span> 新值<br><br>obj.name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tom&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">delete</span> obj.name;<br></code></pre></td></tr></table></figure><h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3><p>通过该运算符可以检查一个对象中是否含有指定的属性。如果有则返回true，没有则返回false。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">&quot;属性名&quot;</span> in 对象<br><br><span class="hljs-comment">//检查obj中是否含有name属性</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;name&quot;</span> in obj);<br></code></pre></td></tr></table></figure><h3 id="遍历对象中的属性"><a href="#遍历对象中的属性" class="headerlink" title="遍历对象中的属性"></a>遍历对象中的属性</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> 变量 <span class="hljs-keyword">in</span> 对象) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>解释：对象中有几个属性，循环体就会执行几次。每次执行时，会将对象中的<strong>每个属性的 属性名 赋值给变量</strong>。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;19&#x27;</span>,<br><span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span>,<br><span class="hljs-attr">fn</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>&#125;<br>&#125;<br><span class="hljs-comment">//for in 里面的变量一般用k 或者 key</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in obj) &#123;<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k); <span class="hljs-comment">// k 输出的时属性名</span><br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj[k]); <span class="hljs-comment">// obj[k]输出的时属性值</span><br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="创建自定义对象"><a href="#创建自定义对象" class="headerlink" title="创建自定义对象"></a>创建自定义对象</h2><h3 id="利用字面量创建对象"><a href="#利用字面量创建对象" class="headerlink" title="利用字面量创建对象"></a>利用字面量创建对象</h3><p>创建了个空的对象</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var obj <span class="hljs-operator">=</span> &#123;&#125;  <br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-comment">// 属性和方法采用键值对的形式: 属性名 : 值</span><br>age: <span class="hljs-string">&#x27;18&#x27;</span>, <span class="hljs-comment">// 多个属性或方法之间用逗号隔开</span><br>sex: <span class="hljs-string">&#x27;男&#x27;</span><br>sayHi: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 冒号使用的是一个匿名函数</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你好!&#x27;</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性名和属性值是一组一组的键值对结构，键和值之间使用<code>:</code>连接，多个值对之间使用<code>,</code>隔开。如果一个属性之后没有其他的属性了，就不要写<code>,</code>，因为它是对象的最后一个属性。</p><h3 id="利用工厂模式创建对象"><a href="#利用工厂模式创建对象" class="headerlink" title="利用工厂模式创建对象"></a>利用工厂模式创建对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name, age, gender</span>) &#123;<br><span class="hljs-comment">//创建一个新的对象</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-comment">//向对象中添加属性</span><br>obj.<span class="hljs-property">name</span> = name;<br>obj.<span class="hljs-property">age</span> = age;<br>obj.<span class="hljs-property">gender</span> = gender;<br>obj.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><span class="hljs-comment">//将新的对象返回</span><br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><span class="hljs-keyword">var</span> obj3 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;女&quot;</span>);<br><span class="hljs-keyword">var</span> obj4 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;男&quot;</span>);<br></code></pre></td></tr></table></figure><p>使用工厂方法创建的对象，使用的构造函数都是Object。<strong>所以创建的对象都是Object这个类型，就导致我们无法区分出多种不同类型的对象</strong>。</p><h3 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h3><p>构造函数语法格式:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>构造函数必须使用 new<br><br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span> 构造函数名() &#123;<br><span class="hljs-regexp">//</span>     this.属性 = 值;<br><span class="hljs-regexp">//</span>     this.方法 = <span class="hljs-keyword">function</span>() &#123;&#125;<br><span class="hljs-regexp">//</span> &#125;<br><span class="hljs-regexp">//</span> new 构造函数名();<br></code></pre></td></tr></table></figure><p>例子:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// Star泛指某一大类(像class) 抽象了对象的公共部分封装到了函数里面</span><br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">name, age, sex</span>) &#123; <span class="hljs-comment">//构造函数首字母要大写 </span><br>          this.name = name;<br>          this.age = age;<br>          this.sex = sex; <span class="hljs-comment">// 构造函数不需要return就可以返回结果</span><br>          this.sing = <span class="hljs-keyword">function</span>(<span class="hljs-params">song</span>) &#123; <span class="hljs-comment">// 属性和方法前面必须加 this</span><br>              <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(song);<br><br>          &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// new 在执行时会做4件事</span><br>      <span class="hljs-comment">// 1.在内存中创建一个新的空对象</span><br>      <span class="hljs-comment">// 2.让this 指向这个新对象</span><br>      <span class="hljs-comment">// 3.执行构造函数里面的代码,给这个新对象添加属性和方法</span><br>      <span class="hljs-comment">// 4.返回这个新对象(所以构造函数里面不需要return)</span><br>      <span class="hljs-keyword">var</span> zs = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;男&#x27;</span>); <span class="hljs-comment">// 调用函数返回的是个对象 zs是对象,是具体事物</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(zs.name);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(zs[<span class="hljs-string">&#x27;age&#x27;</span>]);<br>      zs.sing(<span class="hljs-string">&#x27;你好&#x27;</span>);<br><br>      <span class="hljs-keyword">var</span> ls = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;女&#x27;</span>); <span class="hljs-comment">// 可以创建多个对象,只要new Star() 调用函数就创建一个对象</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ls.name);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ls.sex);<br>      <span class="hljs-comment">// 通过new 关键字创建对象的过程称为对象实例化</span><br><br></code></pre></td></tr></table></figure><h4 id="构造函数和普通函数的区别"><a href="#构造函数和普通函数的区别" class="headerlink" title="构造函数和普通函数的区别"></a>构造函数和普通函数的区别</h4><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别，不同的是构造函数习惯上首字母大写。</p><p>构造函数和普通函数的区别就是<strong>调用方式</strong>的不同：普通函数是直接调用，而构造函数需要使用new关键字来调用。</p><p><strong>this的指向也有所不同</strong>：</p><ul><li>1.以函数的形式调用时，this永远都是window。比如<code>fun();</code>相当于<code>window.fun();</code></li><li>2.以方法的形式调用时，this是调用方法的那个对象</li><li>3.以构造函数的形式调用时，this是新创建的那个对象</li></ul><h3 id="类、实例"><a href="#类、实例" class="headerlink" title="类、实例"></a>类、实例</h3><p>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个<strong>类</strong>。</p><p>通过一个构造函数创建的对象，称为该类的<strong>实例</strong>。 通过new 关键字创建对象的过程称为<strong>对象实例化</strong></p><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>使用 instanceof 可以检查<strong>一个对象是否为一个类的实例</strong>。</p><p><strong>语法如下</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">对象 <span class="hljs-keyword">instanceof</span> 构造函数<br></code></pre></td></tr></table></figure><p>如果是，则返回true；否则返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br><span class="hljs-keyword">var</span> dog1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>); <span class="hljs-comment">// 打印结果： true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>); <span class="hljs-comment">// 打印结果：false</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>); <span class="hljs-comment">// 所有的对象都是Object的后代。因此，打印结果为：true</span><br></code></pre></td></tr></table></figure><p><strong>所有的对象都是Object的后代，因此 <code>任何对象 instanceof Object</code> 的返回结果都是true</strong>。</p><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><h3 id="原型的引入"><a href="#原型的引入" class="headerlink" title="原型的引入"></a>原型的引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, gender</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>    <span class="hljs-comment">//向对象中添加一个方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建一个Person的实例</span><br><span class="hljs-keyword">var</span> per = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><span class="hljs-keyword">var</span> per2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>per.<span class="hljs-title function_">sayName</span>();<br>per2.<span class="hljs-title function_">sayName</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per.<span class="hljs-property">sayName</span> == per2.<span class="hljs-property">sayName</span>);  <span class="hljs-comment">//打印结果为false</span><br></code></pre></td></tr></table></figure><p><strong>分析如下</strong>：</p><p>上方代码中，我们的sayName方法是写在构造函数 Person 内部的，然后在两个实例中进行了调用。造成的结果是，<strong>构造函数每执行一次，就会给每个实例创建一个新的 sayName 方法</strong>。也就是说，每个实例的sayName都是唯一的。因此，最后一行代码的打印结果为false。</p><p>按照上面这种写法，假设创建10000个对象实例，就会创建10000个 sayName 方法。这种写法肯定是不合适的。我们为何不让所有的对象共享同一个方法呢？</p><p>还有一种方式是，将sayName方法在全局作用域中定义：（不建议。原因看注释）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, gender</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>    <span class="hljs-comment">//向对象中添加一个方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = fun;<br>&#125;<br><br><span class="hljs-comment">//将sayName方法在全局作用域中定义</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 将函数定义在全局作用域，污染了全局作用域的命名空间</span><br><span class="hljs-comment"> *  而且定义在全局作用域中也很不安全</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello大家好，我是:&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>比较好的方式是，在原型中添加sayName方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello大家好，我是:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>这也就引入了我们本文要讲的「原型」。</p><h3 id="原型prototype的概念"><a href="#原型prototype的概念" class="headerlink" title="原型prototype的概念"></a>原型prototype的概念</h3><p><strong>认识1</strong>：</p><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性 prototype。这个属性对应着一个对象，这个对象就是我们所谓的原型对象。</p><p>如果函数作为普通函数调用prototype没有任何作用，当函数以构造函数的形式调用时，它所创建的实例对象中都会有一个隐含的属性，指向该构造函数的原型，我们可以通过__proto__来访问该属性。</p><p>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-keyword">var</span> per1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-keyword">var</span> per2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// 打印结果：[object object]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per1.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// 打印结果：true</span><br></code></pre></td></tr></table></figure><p>上方代码的最后一行：打印结果表明，<code>实例.__proto__</code> 和 <code>构造函数.prototype</code>都指的是原型对象。</p><p><strong>认识2</strong>：</p><p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中。</p><p>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，这样就不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了。</p><p><strong>认识3</strong>：</p><p>使用 <code>in</code> 检查对象中是否含有某个属性时，如果对象中没有但是<strong>原型中</strong>有，也会返回true。</p><p>可以使用对象的<code>hasOwnProperty()</code>来检查<strong>对象自身中</strong>是否含有该属性。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>原型对象也是对象，所以它也有原型，当我们使用或访问一个对象的属性或方法时：</p><ul><li>它会先在对象自身中寻找，如果有则直接使用；</li><li>如果没有则会去原型对象中寻找，如果找到则直接使用；</li><li>如果没有则去原型的原型中寻找，直到找到Object对象的原型。</li><li>Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回 null</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一次接触「原型」和「原型链」的时候，会比较难理解。多接触几次，再回过头来看，就慢慢熟悉了。</p><h2 id="对象的-toString-方法"><a href="#对象的-toString-方法" class="headerlink" title="对象的 toString() 方法"></a>对象的 toString() 方法</h2><p>我们先来看下面这段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, gender</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>&#125;<br><br><span class="hljs-keyword">var</span> per1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;vae&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;per1 = &quot;</span> + per1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;per1 = &quot;</span> + per1.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">per1</span> <span class="hljs-operator">=</span> [object Object]<br><span class="hljs-attribute">per1</span> <span class="hljs-operator">=</span> [object Object]<br></code></pre></td></tr></table></figure><p>上面的代码中，我们尝试打印实例 per1 的内部信息，但是发现，无论是打印 <code>per1</code> 还是打印 <code>per1.toString()</code>，结果都是<code>object</code>，这是为啥呢？分析如下：</p><ul><li>当我们直接在页面中打印一个对象时，其实是输出了对象的toString()方法的返回值。</li><li>如果我们希望在打印对象时，不输出[object Object]，可以手动为对象添加一个toString()方法。意思是，重写 toString() 方法。</li></ul><p>重写 toString() 方法，具体做法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, gender</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>&#125;<br><br><span class="hljs-comment">//方式一：重写 Person 原型的toString方法。针对 Person 的所有实例生效</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br>  <span class="hljs-string">&quot;Person[name=&quot;</span> +<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> +<br>  <span class="hljs-string">&quot;,age=&quot;</span> +<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> +<br>  <span class="hljs-string">&quot;,gender=&quot;</span> +<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> +<br>  <span class="hljs-string">&quot;]&quot;</span><br>);<br>&#125;;<br><br><span class="hljs-comment">// 方式二：仅重写实例 per1 的 toString方法。但是这种写法，只对 per1 生效， 对 per2 无效</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">per1.toString = function() &#123;</span><br><span class="hljs-comment">return (</span><br><span class="hljs-comment">  &quot;Person[name=&quot; +</span><br><span class="hljs-comment">  this.name +</span><br><span class="hljs-comment">  &quot;,age=&quot; +</span><br><span class="hljs-comment">  this.age +</span><br><span class="hljs-comment">  &quot;,gender=&quot; +</span><br><span class="hljs-comment">  this.gender +</span><br><span class="hljs-comment">  &quot;]&quot;</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">var</span> per1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;smyh&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><br><span class="hljs-keyword">var</span> per2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;vae&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;per1 = &quot;</span> + per1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;per2 = &quot;</span> + per2.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">per1 = <span class="hljs-title class_">Person</span>[name=smyh,age=<span class="hljs-number">26</span>,gender=男]<br>per2 = <span class="hljs-title class_">Person</span>[name=vae,age=<span class="hljs-number">30</span>,gender=男]<br></code></pre></td></tr></table></figure><p>代码分析：</p><p>上面的代码中，仔细看注释。我们重写了 Person 原型的 toString()，这样的话，可以保证对 Person 的所有实例生效。</p><p>从这个例子，我们可以看出 <code>prototype</code> 的作用。</p><h2 id="JS的垃圾回收（GC）机制"><a href="#JS的垃圾回收（GC）机制" class="headerlink" title="JS的垃圾回收（GC）机制"></a>JS的垃圾回收（GC）机制</h2><p>程序运行过程中会产生垃圾，这些垃圾积攒过多以后，会导致程序运行的速度过慢。所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾。</p><p>当一个对象没有任何的变量或属性对它进行引用时，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。</p><p>上面这句话，也可以这样理解：如果堆内存中的对象，没有任何变量指向它时，这个堆内存里的对象就会成为垃圾。</p><p>JS拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁。我们不需要也不能进行垃圾回收的操作。我们仅仅需要做的是：如果你不再使用该对象，那么，将改对象的引用设置为 null 即可。</p><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>内置对象就是指这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用的或是最基本而必要的功能。</p><p><strong>JavaScript的内置对象</strong>：</p><table><thead><tr><th align="left">内置对象</th><th align="left">对象说明</th></tr></thead><tbody><tr><td align="left">Arguments</td><td align="left">函数参数集合</td></tr><tr><td align="left">Array</td><td align="left">数组</td></tr><tr><td align="left">Boolean</td><td align="left">布尔对象</td></tr><tr><td align="left">Date</td><td align="left">日期时间</td></tr><tr><td align="left">Error</td><td align="left">异常对象</td></tr><tr><td align="left">Function</td><td align="left">函数构造器</td></tr><tr><td align="left">Math</td><td align="left">数学对象</td></tr><tr><td align="left">Number</td><td align="left">数值对象</td></tr><tr><td align="left">Object</td><td align="left">基础对象</td></tr><tr><td align="left">RegExp</td><td align="left">正则表达式对象</td></tr><tr><td align="left">String</td><td align="left">字符串对象</td></tr></tbody></table><h3 id="内置对象-Date"><a href="#内置对象-Date" class="headerlink" title="内置对象:Date"></a>内置对象:Date</h3><p>Date()日期对象 是一个构造函数,必须使用new 来创建我们的日期<br>Date 如果没有参数,返回当前系统的当前时间</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>);<br><br><span class="hljs-comment">// 数字型</span><br><span class="hljs-keyword">var</span> date1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2019</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(date1); <span class="hljs-comment">// 返回的不是10月 是11月</span><br><br><span class="hljs-comment">// 字符串型</span><br><span class="hljs-keyword">var</span> date2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2019-10-1 8:8:8&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(date2);<br></code></pre></td></tr></table></figure><p>Date对象 有如下方法，可以获取日期和时间：</p><ul><li><code>getDate()</code>                 <strong>获取日 1-31</strong></li><li><code>getDay()</code>                 <strong>获取星期 0-6</strong>（0代表周日，1代表周一）</li><li><code>getMonth()  </code>           <strong>获取月 0-11</strong>（0代表一月）</li><li><code>getFullYear() </code>        获取年份</li><li><code>getHours()  </code>      获取小时 0-23</li><li><code>getMinutes() </code>         获取分钟 0-59</li><li><code>getSeconds()</code>         获取秒  0-59</li><li><code>getMilliseconds()</code>    获取毫秒 （1s = 1000ms）</li></ul><h3 id="获取时间戳"><a href="#获取时间戳" class="headerlink" title="获取时间戳"></a>获取时间戳</h3><p><strong>时间戳</strong>：指的是从格林威治标准时间的<code>1970年1月1日，0时0分0秒</code>到当前日期所花费的<strong>毫秒数</strong>（1秒 = 1000毫秒）。</p><p>获取毫秒数(时间戳) 距离1970年1月1日过了多少毫秒:</p><p>1.通过 valueOf() getTime()</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.valueOf());<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.getTime());<br></code></pre></td></tr></table></figure><p>2.常用写法</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> date1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">//  +new Date(); 返回的就是总的毫秒数</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(date1);<br></code></pre></td></tr></table></figure><p>3.H5新增写法</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>());<br></code></pre></td></tr></table></figure><p>封装函数 返回当前时分秒 格式 08:08:08</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTimer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">var</span> h = time.getHours();<br>    h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + h : h;<br>    <span class="hljs-keyword">var</span> m = <span class="hljs-built_in">date</span>.getMinutes();<br>    m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + m : m;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">date</span>.getSeconds();<br>    s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + s : s;<br>    <span class="hljs-keyword">return</span> h + <span class="hljs-string">&#x27;:&#x27;</span> + m + <span class="hljs-string">&#x27;:&#x27;</span> + s;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getTimer());<br></code></pre></td></tr></table></figure><p>当前年月日星期</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">year</span> = <span class="hljs-built_in">date</span>.getFullYear();<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">month</span> = <span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> dates = <span class="hljs-built_in">date</span>.getDate();<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;星期日&#x27;</span>, <span class="hljs-string">&#x27;星期一&#x27;</span>, <span class="hljs-string">&#x27;星期二&#x27;</span>, <span class="hljs-string">&#x27;星期三&#x27;</span>, <span class="hljs-string">&#x27;星期四&#x27;</span>, <span class="hljs-string">&#x27;星期五&#x27;</span>, <span class="hljs-string">&#x27;星期六&#x27;</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">day</span> = <span class="hljs-built_in">date</span>.getDay(); <span class="hljs-comment">// 星期日是0</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;今天是:&#x27;</span> + <span class="hljs-built_in">year</span> + <span class="hljs-string">&#x27;年&#x27;</span> + <span class="hljs-built_in">month</span> + <span class="hljs-string">&#x27;月&#x27;</span> + dates + <span class="hljs-string">&#x27;日&#x27;</span> + arr[<span class="hljs-built_in">day</span>]);<br></code></pre></td></tr></table></figure><h3 id="内置对象-Math"><a href="#内置对象-Math" class="headerlink" title="内置对象:Math"></a>内置对象:Math</h3><p>Math 和其他的对象不同，它不是一个构造函数，不需要创建对象。</p><p>Math属于一个工具类，里面封装了数学运算相关的属性和方法。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Math.abs()</td><td align="left"><strong>返回绝对值</strong></td><td align="left"></td></tr><tr><td align="left">Math.floor()</td><td align="left"><strong>向下取整</strong>（向小取）</td><td align="left"></td></tr><tr><td align="left">Math.ceil()</td><td align="left"><strong>向上取整</strong>（向大取）</td><td align="left"></td></tr><tr><td align="left">Math.round()</td><td align="left">四舍五入取整（正数四舍五入，负数五舍六入）</td><td align="left"></td></tr><tr><td align="left">Math.random()</td><td align="left">生成0-1之间的随机数</td><td align="left">不包含0和1</td></tr><tr><td align="left">Math.max(x, y, z)</td><td align="left">返回多个数中的最大值</td><td align="left"></td></tr><tr><td align="left">Math.min(x, y, z)</td><td align="left">返回多个数中的最小值</td><td align="left"></td></tr><tr><td align="left">Math.pow(x,y)</td><td align="left">返回 x 的 y 次幂</td><td align="left"></td></tr><tr><td align="left">Math.sqrt()</td><td align="left">对一个数进行开方运算</td><td align="left"></td></tr></tbody></table><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//绝对值</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">abs</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 1</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">abs</span>(<span class="hljs-number">-1</span>)); <span class="hljs-comment">// 1</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">abs</span>(<span class="hljs-string">&#x27;-1&#x27;</span>)); <span class="hljs-comment">// 1 隐式转换,字符型转换为数字型</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">abs</span>(<span class="hljs-string">&#x27;猜&#x27;</span>)); <span class="hljs-comment">// NaN</span><br><br>     <span class="hljs-comment">//取整 </span><br>     <span class="hljs-comment">//Math.floor() 向下取整</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">floor</span>(<span class="hljs-number">1.1</span>)); <span class="hljs-comment">// 1</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">floor</span>(<span class="hljs-number">1.9</span>)); <span class="hljs-comment">// 1</span><br><br>     <span class="hljs-comment">//Math.ceil() 向上取整</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.1</span>)); <span class="hljs-comment">// 2</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.9</span>)); <span class="hljs-comment">// 2</span><br><br>     <span class="hljs-comment">//Math.round() 四舍五入</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">1.1</span>)); <span class="hljs-comment">// 1</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">1.5</span>)); <span class="hljs-comment">// 2</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">1.9</span>)); <span class="hljs-comment">// 2</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">-1.1</span>)); <span class="hljs-comment">// -1</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">-1.5</span>)); <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><p>生成 0-x 之间的随机数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Math.<span class="hljs-built_in">round</span>(Math.<span class="hljs-built_in">random</span>()*x)<br></code></pre></td></tr></table></figure><p>取 0&lt;= &lt;1的随机小数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">random</span>());<br></code></pre></td></tr></table></figure><p><strong>(重点)取两个数之间的随机整数,包括这两个数</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">min, max</span>) &#123;<br>    <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span> + <span class="hljs-number">1</span>)) + <span class="hljs-built_in">min</span>; <span class="hljs-comment">// 重点</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getRandom(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure><p>随机点名</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;马六&#x27;</span>, <span class="hljs-string">&#x27;孙七&#x27;</span>, <span class="hljs-string">&#x27;周八&#x27;</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[getRandom(<span class="hljs-number">0</span>, arr.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>)]); <span class="hljs-comment">//索引号</span><br></code></pre></td></tr></table></figure><h3 id="包装"><a href="#包装" class="headerlink" title="包装"></a>包装</h3><p>我们都知道，js中的数据类型包括以下几种。</p><ul><li>基本数据类型：String、Number、Boolean、Null、Undefined</li><li>引用数据类型：Object</li></ul><p>JS为我们提供了<strong>三个包装类</strong>：</p><ul><li>String()：将基本数据类型字符串，转换为String对象。</li><li>Number()：将基本数据类型的数字，转换为Number对象。</li><li>Boolean()：将基本数据类型的布尔值，转换为Boolean对象。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;andy&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.<span class="hljs-built_in">length</span>);<br><span class="hljs-comment">// 对象才有属性和方法 复杂数据类型才有属性和方法</span><br><span class="hljs-comment">// 简单数据类型之所以有length属性是因为 基本包装类型</span><br><span class="hljs-comment">// 基本包装类型: 就是把简单数据类型包装成复杂数据类型</span><br><span class="hljs-comment">// 包装步骤:</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&#x27;andy&#x27;</span>);<br><span class="hljs-comment">// 把临时变量的值给str</span><br>str = temp;<br><span class="hljs-comment">// 销毁这个临时变量</span><br>temp = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>通过上面这这三个包装类，我们可以<strong>将基本数据类型的数据转换为对象</strong>。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> num = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">bool</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">true</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num); <span class="hljs-comment">// 打印结果：object</span><br></code></pre></td></tr></table></figure><p><strong>需要注意的是</strong>：我们在实际应用中不会使用基本数据类型的对象。如果使用基本数据类型的对象，在做一些比较时可能会带来一些<strong>不可预期</strong>的结果。</p><p>比如说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> boo1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">var</span> boo2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(boo1 === boo2); <span class="hljs-comment">// 打印结果竟然是：false</span><br></code></pre></td></tr></table></figure><p>再比如说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> boo3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-keyword">if</span> (boo3) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;qianguyihao&#x27;</span>); <span class="hljs-comment">// 这行代码竟然执行了</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基本数据类型不能添加属性和方法"><a href="#基本数据类型不能添加属性和方法" class="headerlink" title="基本数据类型不能添加属性和方法"></a>基本数据类型不能添加属性和方法</h3><p>方法和属性只能添加给对象，不能添加给基本数据类型。</p><p><strong>注意</strong>：当我们对一些基本数据类型的值去调用属性和方法时，浏览器会<strong>临时使用包装类将其转换为对象</strong>，然后在调用对象的属性和方法；调用完以后，在将其转换为基本数据类型。</p><p>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-number">123</span>;<br><br>str = str.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// 将 number 类型转换为 string 类型</span><br>str.<span class="hljs-property">hello</span> = <span class="hljs-string">&quot;你好&quot;</span>; <span class="hljs-comment">// 添加属性</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str); <span class="hljs-comment">// 打印结果：string</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">hello</span>); <span class="hljs-comment">// 打印结果：undefined</span><br></code></pre></td></tr></table></figure><p>再比如，String 对象的很多内置方法，也可以直接给字符串用。此时，也是临时将字符串转换为 String 对象，然后再调用内置方法。</p><h2 id="内置对象-string"><a href="#内置对象-string" class="headerlink" title="内置对象:string"></a>内置对象:string</h2><h3 id="charAt-index-根据位置返回字符"><a href="#charAt-index-根据位置返回字符" class="headerlink" title="charAt(index) 根据位置返回字符"></a>charAt(index) 根据位置返回字符</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;android&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.charAt(<span class="hljs-number">3</span>)); <span class="hljs-comment">// r</span><br><span class="hljs-comment">// 遍历所有的字符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">length</span>; i++) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.charAt(i));<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="charCodeAt-index"><a href="#charCodeAt-index" class="headerlink" title="charCodeAt(index)"></a>charCodeAt(index)</h3><p>返回索引号对应的ASCII值 目的:判断用户按了哪个键</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.charCodeAt(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 97</span><br></code></pre></td></tr></table></figure><h3 id="str-index-H5新增"><a href="#str-index-H5新增" class="headerlink" title="str[index] H5新增"></a>str[index] H5新增</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str[<span class="hljs-number">0</span>]); <span class="hljs-comment">// a</span><br></code></pre></td></tr></table></figure><h3 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf()/lastIndexOf()"></a>indexOf()/lastIndexOf()</h3><p><code>indexOf()/lastIndexOf()</code>：获取指定字符的索引。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">索引值 = str.<span class="hljs-title function_">indexOf</span>(想要查询的字符);<br></code></pre></td></tr></table></figure><p>解释：<code>indexOf()</code> 是从前向后索引字符串的位置。同理，<code>lastIndexOf()</code>是从后向前寻找。</p><p><strong>作用</strong>：可以检索一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回其<strong>第一次出现</strong>的索引；如果没有找到指定的内容，则返回 -1。</p><p>因此可以得出一个技巧：<strong>如果获取的索引值为0，说明字符串是以查询的参数为开头的</strong>。</p><p>这个方法还可以指定第二个参数，用来 指定开始查找的位置。</p><p><strong>代码举例2</strong>：（两个参数时，需要特别注意）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;qianguyihao&#x27;</span>;<br>result = str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 从第三个位置开始查找 &#x27;a&#x27;这个字符 【重要】</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 打印结果：9</span><br></code></pre></td></tr></table></figure><p>上方代码中，<code>indexOf()</code>方法中携带了两个参数</p><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><code>slice()</code>：从字符串中截取指定的内容。不会修改原字符串，而是将及截取到的内容返回。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">字符串 = str.<span class="hljs-title function_">slice</span>(开始索引, 结束索引); <span class="hljs-comment">//两个参数都是索引值。包左不包右。</span><br></code></pre></td></tr></table></figure><p>解释：上面的参数，包左不包右。参数举例如下：</p><ul><li>(2, 5) 截取时，包左不包右。</li><li>(2) 表示<strong>从指定的索引位置开始，截取到最后</strong>。</li><li>(-3) 表示从倒数第几个开始，截取到最后。</li><li>(1, -1) 表示从第一个截取到倒数第一个。</li><li>(5, 2) 表示前面的大，后面的小，返回值为空。</li></ul><h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p><code>substring()</code>：从字符串中截取指定的内容。和<code>slice()</code>类似。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">字符串 = str.<span class="hljs-title function_">substring</span>(开始索引, 结束索引); <span class="hljs-comment">//两个参数都是索引值。包左不包右。</span><br></code></pre></td></tr></table></figure><p><code>substring()</code>和<code>slice()</code>是类似的。但不同之处在于：</p><ul><li><code>substring()</code>不能接受负值作为参数。如果传递了一个<strong>负值</strong>，则默认使用0。</li><li><code>substring()</code>还会自动调整参数的位置，如果第二个参数小于第一个，则自动交换。比如说， <code>substring(1, 0)</code>截取的是第一个字符。</li></ul><h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><p><code>substr()</code>：从字符串中截取指定的内容。不会修改原字符串，而是将及截取到的内容返回。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">字符串 = str.<span class="hljs-title function_">substr</span>(开始索引, 截取的长度);<br></code></pre></td></tr></table></figure><p>参数举例：</p><ul><li>(2,4)：从索引值为2的字符开始，截取4个字符。</li><li>(1)：从指定位置开始，截取到最后。</li><li>(-3)：从倒数第几个开始，剪到最后.</li><li>不包括前大后小的情况。</li></ul><p>备注：ECMAscript 没有对 <code>substr()</code> 方法进行标准化，因此不建议使用它。</p><h3 id="split-【重要】"><a href="#split-【重要】" class="headerlink" title="split() 【重要】"></a>split() 【重要】</h3><p><code>split()</code>：将一个字符串拆分成一个数组。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">数组 = str.<span class="hljs-title function_">split</span>();<br></code></pre></td></tr></table></figure><p>备注：<code>split()</code>这个方法在实际开发中用得非常多。一般来说，从接口拿到的json数据中，经常会收到类似于<code>&quot;q, i, a, n&quot;</code>这样的字符串，前端需要将这个字符串拆分成<code>[&#39;q&#39;, &#39;i&#39;, &#39;a&#39;, &#39;n&#39;]</code>数组，这个时候<code>split()</code>方法就排上用场了。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&#x27;red,blue,green&#x27;</span>;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str2.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)); <span class="hljs-comment">// &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;</span><br><br>      <span class="hljs-keyword">var</span> str3 = <span class="hljs-string">&#x27;red&amp;blue&amp;green&#x27;</span>;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str3.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)); <span class="hljs-comment">// &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//split()方法：字符串变数组</span><br>   <span class="hljs-keyword">var</span> str3 = <span class="hljs-string">&quot;red|blue|green&quot;</span>;<br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str3);<br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str3.<span class="hljs-built_in">split</span>());   <span class="hljs-comment">// 无参数，表示：把字符串作为一个元素添加到数组中。</span><br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str3.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;&quot;</span>));  <span class="hljs-comment">//参数为空字符串，则表示：分隔字符串中每一个字符，分别添加到数组中</span><br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str3.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;|&quot;</span>)); <span class="hljs-comment">//参数为指定字符，表示：此字符将不会出现在数组的任意一个元素中</span><br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str3.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;许&quot;</span>)); <span class="hljs-comment">//同理</span><br></code></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p><code>trim()</code>：去除字符串前后的空白。</p><p>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//去除前后的空格，trim();</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&quot;   a   b   c   &quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1.<span class="hljs-title function_">trim</span>());<br></code></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p><code>replace()</code>：将字符串中的指定内容，替换为新的内容并返回。不会修改原字符串。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">新的字符串 = str.<span class="hljs-title function_">replace</span>(被替换的内容，新的内容);<br></code></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//replace()方法：替换</span><br><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&quot;Today is fine day,today is fine day !!!&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;today&quot;</span>,<span class="hljs-string">&quot;tomorrow&quot;</span>));  <span class="hljs-comment">//只能替换第一个today</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/today/gi</span>,<span class="hljs-string">&quot;tomorrow&quot;</span>)); <span class="hljs-comment">//这里用到了正则，才能替换所有的today</span><br><br></code></pre></td></tr></table></figure><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&#x27;red,blue,green&#x27;</span>;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str2.toUpperCase()); <span class="hljs-comment">// 转换大写 RED,BLUE,GREEN</span><br><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str2.toLowerCase()); <span class="hljs-comment">// 转换小写 red,blue,green</span><br></code></pre></td></tr></table></figure><h2 id="字符串不可变"><a href="#字符串不可变" class="headerlink" title="字符串不可变"></a>字符串不可变</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>      <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>      <span class="hljs-comment">// 当重新给str赋值的时候,常量&#x27;abc&#x27;不会被修改,依然在内存中</span><br>      <span class="hljs-comment">// 重新给字符串赋值,会重新在内存中开辟空间,这个特点就是字符串的不可变</span><br>      <span class="hljs-comment">// 由于字符串的不可变,在大量拼接字符串的时候会有效率问题(占内存,卡)</span><br>      <span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++) &#123;<br>          <span class="hljs-built_in">str</span> += i;<br>      &#125;<br>      console.log(<span class="hljs-built_in">str</span>); <span class="hljs-comment">// 这个结果需要大量时间来显示,因为需要不断开辟新的空间</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js基础篇二</title>
    <link href="/blog/2019/10/05/js%E7%AF%87%E4%BA%8C/"/>
    <url>/blog/2019/10/05/js%E7%AF%87%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>本篇为js基础笔记,记录下来主要用于复习,巩固。包括以下内容：数组添加删除元素、数组遍、函数、方法、作用域、预解析、作用域链</p><span id="more"></span><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>1.利用new 创建数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">//创建了一个空的数组</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 2表示长度为2,有2个空的数组元素</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 等价于[2,3] 表示有2个数组元素,2跟3</span><br></code></pre></td></tr></table></figure><p>2.利用数字面量创建数组</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var arr <span class="hljs-operator">=</span> []<span class="hljs-comment">; //创建了一个空的数组</span><br></code></pre></td></tr></table></figure><p>3.[]里的称为数组元素,可以是任意数据类型</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;asd我&#x27;</span>, <span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure><h3 id="向数组中添加元素"><a href="#向数组中添加元素" class="headerlink" title="向数组中添加元素"></a>向数组中添加元素</h3><p>1.新增数组元素,修改length长度</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;qwe&#x27;</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">length</span>);<br>arr.<span class="hljs-built_in">length</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">//把数组长度修改为5,后面2个是 undefined 元素</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br></code></pre></td></tr></table></figure><p>2.新增数组元素,修改索引号,添加数组元素</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade">   <span class="hljs-keyword">var</span> arr1 = [];<br>   arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br>arr1[<span class="hljs-number">1</span>] = <span class="hljs-number">33</span>;<br>arr1[<span class="hljs-number">2</span>] = <span class="hljs-number">22</span>;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1);<br><br>   arr1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;一&#x27;</span>; <span class="hljs-comment">//已有的数组,会被替换,10 会替换为 一</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1);<br><br>   arr1 = <span class="hljs-string">&#x27;阿斯顿&#x27;</span>; <span class="hljs-comment">//不能直接给数组赋值,否则数组会全部替换掉</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1);<br></code></pre></td></tr></table></figure><h3 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">数组<span class="hljs-selector-attr">[索引]</span><br></code></pre></td></tr></table></figure><p>数组的索引代表的是数组中的元素在数组中的位置，从0开始。</p><p>如果读取不存在的索引（比如元素没那么多），系统不会报错，而是返回undefined。</p><h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>数组的长度也就是元素的个数,  比索引号多1。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">数组的长度 <span class="hljs-operator">=</span> 数组名.length；<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [qwe, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>];<br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// 打印结果：3</span><br></code></pre></td></tr></table></figure><p>对于连续的数组，使用length可以获取到数组的长度（元素的个数）；对于非连续的数组，使用length会获取到数组的最大的索引+1。因此，尽量不要创建非连续的数组。</p><h3 id="修改数组的长度"><a href="#修改数组的长度" class="headerlink" title="修改数组的长度"></a>修改数组的长度</h3><ul><li>如果修改的length大于原长度，则多出部分会空出来，置为 null。</li><li>如果修改的length小于原长度，则多出的元素会被删除，数组将从后面删除元素。</li><li>（特例：伪数组arguments的长度可以修改，但是不能修改里面的元素。）</li></ul><h2 id="数组添加删除元素"><a href="#数组添加删除元素" class="headerlink" title="数组添加删除元素"></a>数组添加删除元素</h2><p><strong>连接多个数组</strong>  concat()连接多个数组,返回一个新数组,不影响原数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>   <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>];<br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.concat(arr, arr1));<br></code></pre></td></tr></table></figure><p><strong>添加数组</strong></p><p>1.push() 在数组 末尾 添加一个或多个元素    会影响原数组</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">数组的新长度 <span class="hljs-operator">=</span> 数组.push(元素)<span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(arr.push(<span class="hljs-number">0</span>, &#x27;张三&#x27;)); // 返回:<span class="hljs-number">7</span>  push完毕后返回的结果是新数组的长度<br><span class="hljs-attribute">console</span>.log(arr); // <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, &#x27;张三&#x27;<br></code></pre></td></tr></table></figure><p>2.unshift 在数组 开头 添加一个或多个元素 会影响原数组</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">console.log(arr.unshift(<span class="hljs-string">&#x27;红&#x27;</span>, <span class="hljs-string">&#x27;黄&#x27;</span>)); <span class="hljs-regexp">//</span> 返回:<span class="hljs-number">9</span>  unshift完毕后返回的结果是新数组的长度<br>console.log(arr); <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;红&#x27;</span>, <span class="hljs-string">&#x27;黄&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;张三&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>删除数组</strong></p><p>3.pop() 删除数组最后一个元素 一次只能删除一个元素 会影响原数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">pop</span>()); <span class="hljs-comment">// 返回:张三  pop后 返回的结果是删除的那个元素</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// &#x27;红&#x27;, &#x27;黄&#x27;, 1, 2, 3, 4, 5, 0</span><br></code></pre></td></tr></table></figure><p>4.shift() 删除数组第一个元素 一次只能删除一个元素 会影响原数组</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(arr.shift()); // 返回:红  shift后 返回的结果是删除的那个元素<br><span class="hljs-attribute">console</span>.log(arr); // &#x27;黄&#x27;, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>5.数组截取 slice(begin,end) 返回被截取项目组成的新数组 ,不影响原数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">slice</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">//返回: 3, 4</span><br><span class="hljs-comment">// 索引号 [3,5),包括第3个 不包括第5个</span><br></code></pre></td></tr></table></figure><p>6.数组删除splice(第几个开始删除,要删除的个数),返回被删除项目组成的新数组,影响原数组</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(arr.splice(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)); // 返回: &#x27;黄&#x27;, <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>7.将数组转换为字符串join()，返回结果为转换后的字符串 不会改变原数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 用逗号分开</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.toString());<br>      <span class="hljs-comment">// 自定义分隔符</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.join(<span class="hljs-string">&#x27;-&#x27;</span>));<br></code></pre></td></tr></table></figure><p>8.反转数组reverse()，返回结果为反转后的数组  会改变原数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&#x27;红&#x27;</span>, <span class="hljs-string">&#x27;绿&#x27;</span>, <span class="hljs-string">&#x27;蓝&#x27;</span>];<br>     arr1.<span class="hljs-built_in">reverse</span>(); <span class="hljs-comment">// 翻转</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1);<br></code></pre></td></tr></table></figure><p><strong>9.sort()对数组的元素进行从小到大来排序（会改变原来的数组）。(重点)</strong></p><p>如果在使用 sort() 方法时不带参，则默认按照<strong>Unicode编码</strong>，从小到大进行排序。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">23</span>, <span class="hljs-number">45</span>];<br>arr1.<span class="hljs-built_in">sort</span>(); <br><span class="hljs-comment">// 不带参数时只能排个位数,多位数按照数字排 如:1,3,5,12,23,45排成1,12,23,3,45,5</span><br><br></code></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">23</span>, <span class="hljs-number">45</span>];<br>arr1.<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123; <span class="hljs-comment">// 冒泡排序固定写法</span><br><span class="hljs-comment">// return a - b; //升序</span><br><span class="hljs-keyword">return</span> b - a; <span class="hljs-comment">//降序</span><br>&#125;);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1); <span class="hljs-comment">// 打印结果:45, 23, 12, 5, 3, 1</span><br></code></pre></td></tr></table></figure><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><h3 id="for循环-遍历"><a href="#for循环-遍历" class="headerlink" title="for循环 遍历"></a>for循环 遍历</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;红&quot;</span>,<span class="hljs-string">&quot;绿&quot;</span>,<span class="hljs-string">&quot;蓝&quot;</span>];<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">length</span>;i++)&#123;<br>          <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[i]);  <span class="hljs-comment">// arr[i]代表的是数组中的每一个元素i</span><br>      &#125;<br><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br></code></pre></td></tr></table></figure><h3 id="forEach-遍历"><a href="#forEach-遍历" class="headerlink" title="forEach() 遍历"></a>forEach() 遍历</h3><blockquote><p><code>forEach()</code> 这种遍历方法只支持IE8以上的浏览器。IE8及以下的浏览器均不支持该方法。所以如果需要兼容IE8，则不要使用forEach，改为使用for循环来遍历即可。</p></blockquote><p>forEach()方法需要一个函数作为参数。这种函数，是由我们创建但是不由我们调用的，我们称为回调函数。</p><p>数组中有几个元素，该回调函数就会执行几次。执行完毕后，浏览器会将遍历到的元素。</p><p>回调函数中传递三个参数：</p><ul><li>第一个参数，就是当前正在遍历的元素</li><li>第二个参数，就是当前正在遍历的元素的索引</li><li>第三个参数，就是正在遍历的数组</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;一&quot;</span>, <span class="hljs-string">&quot;二&quot;</span>, <span class="hljs-string">&quot;三&quot;</span>];<br><br>   arr.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, obj</span>) &#123;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;item:&quot;</span> + item);<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;index:&quot;</span> + index);<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;obj:&quot;</span> + obj);<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;----------&quot;</span>);<br>   &#125;);<br></code></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">item:一<br>index:0<br><span class="hljs-section">obj:一,二,三</span><br><span class="hljs-section">----------</span><br><br>item:二<br>index:1<br><span class="hljs-section">obj:一,二,三</span><br><span class="hljs-section">----------</span><br><br>item:三<br>index:2<br><span class="hljs-section">obj:一,二,三</span><br><span class="hljs-section">----------</span><br></code></pre></td></tr></table></figure><p>注意: forEach() 的返回值是 undefined。也就是说，它没有返回值。</p><h3 id="filter-筛选数组"><a href="#filter-筛选数组" class="headerlink" title="filter()筛选数组"></a>filter()筛选数组</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index</span>)&#123;&#125;)<br></code></pre></td></tr></table></figure><p>找出数组 arr1 中大于4的元素，返回一个新的数组。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><br>   <span class="hljs-keyword">var</span> arr2 = arr1.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) &#123;<br>       <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">4</span>; <span class="hljs-comment">//将arr1中大于4的元素返回</span><br>   &#125;)<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr2); <span class="hljs-comment">// 6,5,6</span><br></code></pre></td></tr></table></figure><h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h3><p>对数组中每一项运行回调函数，返回该函数的结果，组成的新数组（返回的是<strong>加工之后</strong>的新数组）。</p><p>有一个已知的数组arr1，我要求让arr1中的每个素加10</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><br>   <span class="hljs-keyword">var</span> arr2 = arr1.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) &#123;<br>       <span class="hljs-keyword">return</span> item + <span class="hljs-number">10</span>;  <span class="hljs-comment">//让arr1中的每个元素加10</span><br><br>   &#125;)<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr2);<span class="hljs-comment">// 11,13,16,12,15,16,</span><br></code></pre></td></tr></table></figure><h3 id="every-方法"><a href="#every-方法" class="headerlink" title="every()方法"></a>every()方法</h3><p>对数组中每一项运行回调函数，如果都返回true，every就返回true；如果有一项返回false，则停止遍历，此方法返回false。</p><p>注意：every()方法的返回值是boolean值，参数是回调函数。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&quot;红色&quot;</span>, <span class="hljs-string">&quot;绿色&quot;</span>, <span class="hljs-string">&quot;蓝色&quot;</span>, <span class="hljs-string">&quot;淡粉色&quot;</span>];<br>   <span class="hljs-keyword">var</span> bool1 = arr1.every(<span class="hljs-keyword">function</span> (<span class="hljs-params">element, index, array</span>) &#123;<br>       <span class="hljs-keyword">if</span> (element.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">2</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;);<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(bool1);  <span class="hljs-comment">//输出结果：false。只要有一个元素的长度是超过两个字符的，就返回false</span><br><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&quot;红色&quot;</span>, <span class="hljs-string">&quot;绿色&quot;</span>, <span class="hljs-string">&quot;蓝色&quot;</span>, <span class="hljs-string">&quot;粉色&quot;</span>];<br>   <span class="hljs-keyword">var</span> bool2 = arr2.every(<span class="hljs-keyword">function</span> (<span class="hljs-params">element, index, array</span>) &#123;<br>       <span class="hljs-keyword">if</span> (element.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">2</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;);<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(bool2);  <span class="hljs-comment">//输出结果：true。因为每个元素的长度都是两个字符。</span><br><br></code></pre></td></tr></table></figure><h3 id="some-方法"><a href="#some-方法" class="headerlink" title="some()方法"></a>some()方法</h3><p>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。<br>如果没有满足条件的元素，则返回false。此方法返回true。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">array</span>.some(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(currentValue,<span class="hljs-keyword">index</span>,arr)</span>,<span class="hljs-title">thisValue</span>)</span><br></code></pre></td></tr></table></figure><p>检测在数组中是否有大于10的元素</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">isBiggerThan10</span>(element, index, array) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">element</span> &gt; <span class="hljs-number">10</span>;<br>&#125;<br><br>[<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>].<span class="hljs-keyword">some</span>(isBiggerThan10);  // <span class="hljs-literal">false</span><br>[<span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>].<span class="hljs-keyword">some</span>(isBiggerThan10); // <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="获取数组索引"><a href="#获取数组索引" class="headerlink" title="获取数组索引"></a>获取数组索引</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">索引值 <span class="hljs-operator">=</span> 数组.indexOf(value)<span class="hljs-comment">;</span><br><br>   索引值 <span class="hljs-operator">=</span> 数组.lastIndexOf(value)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>1.indexOf(数组元素): 从前面开始找<br>2.lastIndexOf(数组元素):从后面开始找<br>indexOf(‘要查找的字符’, [起始位置(索引号)]) []是可选可不选,<br>有相同的数组,只返回第一个遇到的数组索引号<br>如果找不到就返回 -1</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;红&#x27;</span>, <span class="hljs-string">&#x27;场&#x27;</span>, <span class="hljs-string">&#x27;黄&#x27;</span>, <span class="hljs-string">&#x27;绿&#x27;</span>, <span class="hljs-string">&#x27;青&#x27;</span>, <span class="hljs-string">&#x27;蓝&#x27;</span>, <span class="hljs-string">&#x27;紫&#x27;</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;青&#x27;</span>)); <span class="hljs-comment">// 4</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.lastIndexOf(<span class="hljs-string">&#x27;绿&#x27;</span>)); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h3 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h3><p>1.instanceof 运算符 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = []; <span class="hljs-comment">// 是数组格式</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;; <span class="hljs-comment">// 不是数组格式</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr instanceof <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj instanceof <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>2.Array.isArray(参数) H5新增方法 ie9以上版本支持</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.isArray(arr)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.isArray(obj)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">var<span class="hljs-built_in"> array </span>= [1,2,3,4,5,6];<br><br>array.splice(0);      //方式1：删除数组中所有项目<br>array.length = 0;     //方式2：length属性可以赋值，在其它语言中length是只读<span class="hljs-built_in"></span><br><span class="hljs-built_in">array </span>= [];           //方式3：推荐<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数：就是将一些功能或语句进行<strong>封装</strong>，在需要的时候，通过<strong>调用</strong>的形式，执行这些语句。</p><ul><li><strong>函数也是一个对象</strong></li><li>使用<code>typeof</code>检查一个函数对象时，会返回function</li></ul><p><strong>函数的作用</strong>：</p><ul><li>将大量重复的语句写在函数里，以后需要这些语句的时候，可以直接调用函数，避免重复劳动。</li><li>简化编程，让编程模块化。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>声明和调用<br><span class="hljs-keyword">function</span> 函数名([形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2</span>...形参N]) &#123; <span class="hljs-regexp">//</span> 中括号表示可选<br><span class="hljs-regexp">//</span>函数体<br>&#125;<br>函数名([实参<span class="hljs-number">1</span>,实参<span class="hljs-number">2</span>...实参N]) <span class="hljs-regexp">//</span>调用函数<br></code></pre></td></tr></table></figure><ul><li>function：声明函数的关键字必须小写</li><li>函数名一般是动词,命名规定和变量的命名规定一样。只能是字母、数字、下划线、美元符号，不能以数字开头。</li><li>函数不调用，自己不执行</li></ul><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> 函数名  = <span class="hljs-keyword">function</span><span class="hljs-params">([形参1,形参2<span class="hljs-rest_arg">...形参N</span>])</span>&#123;<br>语句....<br>&#125;<br></code></pre></td></tr></table></figure><p>“函数表达式”，其实就是将匿名函数赋值给一个变量。</p><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> 函数名([形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2</span>...形参N]) &#123; <br><span class="hljs-regexp">//</span>函数体<br>&#125;<br>函数名([实参<span class="hljs-number">1</span>,实参<span class="hljs-number">2</span>...实参N]) <span class="hljs-regexp">//</span>调用函数<br></code></pre></td></tr></table></figure><p><strong>形参：</strong></p><ul><li>可以在函数的<code>()</code>中来指定一个或多个形参。</li><li>多个形参之间使用<code>,</code>隔开，声明形参就相当于在函数内部声明了对应的变量，但是并不赋值。</li></ul><p><strong>实参</strong>：</p><ul><li>在调用函数时，可以在 <code>()</code>中指定实参。</li><li>实参将会赋值给函数中对应的形参。</li></ul><p>际参数和形式参数的个数，要相同。</p><p><strong>实参的类型：</strong></p><p>函数的实参可以是任意的数据类型。</p><p>调用函数时解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查。</p><p><strong>实参的数量：</strong></p><p>调用函数时，解析器也不会检查实参的数量：</p><ul><li>多余实参不会被赋值</li><li>如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined。</li></ul><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(a, b) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">a</span> + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>return的作用是结束方法。</p><p>注意：</p><ul><li>return后的值将会作为函数的执行结果返回，可以定义一个变量，来接收该结果。</li><li>在函数中return后的语句都不会执行（函数在执行完 return 语句之后停止并立即退出）</li><li>如果return语句后不跟任何值，就相当于返回一个undefined</li><li>如果函数中不写return，则也会返回undefined</li><li>返回值可以是任意的数据类型，可以是对象，也可以是函数。</li></ul><h3 id="函数名、函数体和函数加载问题（重要）"><a href="#函数名、函数体和函数加载问题（重要）" class="headerlink" title="函数名、函数体和函数加载问题（重要）"></a>函数名、函数体和函数加载问题（重要）</h3><p><strong>函数名 == 整个函数</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn) == <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;alert(<span class="hljs-number">1</span>)&#125;);<br><br> <span class="hljs-comment">//定义fn方法</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>       alert(<span class="hljs-number">1</span>)<br>   &#125;;<br></code></pre></td></tr></table></figure><p><strong>函数的加载问题</strong>：JS加载的时候，只加载函数名，不加载函数体。所以如果想使用内部的成员变量，需要调用函数。</p><h4 id="fn-和-fn-的区别【重要】"><a href="#fn-和-fn-的区别【重要】" class="headerlink" title="fn()  和 fn 的区别【重要】"></a>fn()  和 fn 的区别【重要】</h4><ul><li><code>fn()</code>：调用函数。相当于获取了函数的返回值。</li><li><code>fn</code>：函数对象。相当于直接获取了函数对象。</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>函数也可以称为对象的属性。<strong>如果一个函数作为一个对象的属性保存，那么我们称这个函数是这个对象的方法</strong>。</p><p>调用这个函数就说调用对象的方法（method）。相比于方法，它只是名称上的区别，并没有其他的区别。</p><p>函数举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 调用函数</span><br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>方法举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 调用方法</span><br>obj.<span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>我们可以这样说，如果直接是<code>fn()</code>，那就说明是函数调用。如果是发现<code>XX.fn()</code>的这种形式，那就说明是<strong>方法</strong>调用。</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>作用域指一个变量的作用范围。在js中，一共有两种作用域：</p><ul><li>全局作用域</li><li>函数作用域</li></ul><p>1.JavaScript作用域 就是代码名字在某个范围内起作用和效果,目的就是提高程序的可靠性,更重要的是减少命名冲突</p><p>2.js的作用域(es6)之前: 全局作用域 局部作用域</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>直接编写在script标签中的JS代码，都在全局作用域。</p><ul><li>全局作用域在页面打开时创建，在页面关闭时销毁。</li><li>在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用。</li></ul><p>在全局作用域中：</p><ul><li>创建的<strong>变量</strong>都会作为window对象的属性保存。</li><li>创建的<strong>函数</strong>都会作为window对象的方法保存。</li></ul><p>全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问的到。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">10</span>;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">num</span>);<br></code></pre></td></tr></table></figure><h3 id="局部作用域-函数作用域"><a href="#局部作用域-函数作用域" class="headerlink" title="局部作用域(函数作用域)"></a>局部作用域(函数作用域)</h3><p>在函数内部就是局部作用域,这个代码的名字只在函数内部起作用和效果</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//局部作用域</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br>&#125;<br>fu<br></code></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>根据作用域的不同我们变量分为全局变量和局部变量</p><ol><li>全局变量: 在全局作用域下的变量 在全局下都可以使用</li></ol><p>注意 如果在函数内部 没有声明直接赋值的变量也属于全局变量</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>; <span class="hljs-comment">// num就是全局变量</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><ol start="2"><li>局部变量: 在局部作用域下的变量 函数内部的变量就是 局部变量</li></ol><p>注意： 函数的形参也可以看作是局部变量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(aru)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">20</span>; <span class="hljs-comment">// num1是局部变量 只能在函数内部使用</span><br><br>    num2 = <span class="hljs-number">30</span>; <span class="hljs-comment">// 没有声明直接赋值的变量也是全局变量</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// console.log(aru);    会报错,aru是局部变量,函数外不能用</span><br><span class="hljs-comment">// console.log(num1);   会报错,num1是局部变量,函数外不能用</span><br>console.log(num2);<br></code></pre></td></tr></table></figure><ol start="3"><li>执行效率</li></ol><ul><li>全局变量  浏览器关闭的时候才会销毁， 比较占内存资源</li><li>局部变量  当我们程序执行完毕后就会销毁 比较节约内存资源</li></ul><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>js 引擎运行js分为2步: <strong>预解析 代码执行</strong></p><ul><li><p>预解析: js引擎会把js 里面所有的 <code>var</code> 还有 <code>function</code> 提升到当前作用域最前面</p></li><li><p>代码执行: 按照代码书写顺序由上往下执行</p></li></ul><p>预解析分为: <strong>变量预解析(变量提升)  函数预解析(函数提升)</strong></p><ul><li><p>变量提升: 把所有的变量声明提升到当前作用域最前面 不提升赋值操作</p></li><li><p>函数提升: 把所有的函数声明提升到当前作用域最前面 不调用函数</p></li></ul><p>例子:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>相当于 </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var num<span class="hljs-comment">;</span><br>console.log(num)<span class="hljs-comment">;</span><br><span class="hljs-attribute">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> = <span class="hljs-title">function</span><span class="hljs-params">()</span></span> &#123;<br>        console.log(<span class="hljs-number">22</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">fun</span>;</span><br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> = <span class="hljs-title">function</span><span class="hljs-params">()</span></span> &#123;<br>console.log(<span class="hljs-number">22</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>内部函数访问外部函数的变量, 采取的是链式查找的方式来决定取哪个值, 就近原则</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>function fn() &#123; <span class="hljs-comment">// 外部函数</span><br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>    function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// 内部函数</span><br>        console.log(num); <span class="hljs-comment">//20 就近原则</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js基础篇一</title>
    <link href="/blog/2019/10/03/js%E7%AF%87%E4%B8%80/"/>
    <url>/blog/2019/10/03/js%E7%AF%87%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>本篇为js基础笔记,记录下来主要用于复习,巩固。包括以下内容：JavaScript书写位置、注释、输出输入语句、变量和赋值、标识符、变量的数据类型、变量的数据转换、其他进制的数字、运算符、流程控制语句和循环语句。</p><span id="more"></span><h2 id="JavaScript书写位置"><a href="#JavaScript书写位置" class="headerlink" title="JavaScript书写位置"></a>JavaScript书写位置</h2><p><strong>行内式</strong></p><p>写在<code>&lt;body&gt;</code>标签里</p><pre><code class="hljs">&lt;!-- 行内式js --&gt;&lt;input type=&quot;button&quot; value=&quot;点我&quot; onclick=&quot;alert(&#39;你好&#39;)&quot;&gt;</code></pre><p><strong>内嵌式</strong></p><p>写在<code>&lt;body&gt;</code>标签里</p><pre><code class="hljs">&lt;!-- 内嵌式 --&gt;&lt;script&gt;    alert(&#39;你好&#39;);&lt;/script&gt;</code></pre><p><strong>外链式</strong></p><p>引入外部JavaScript文件,写在<code>&lt;body&gt;</code>标签里放到body标签里，可以和内嵌的js代码并列</p><pre><code class="hljs">&lt;!-- 外部式 --&gt;&lt;script src=&quot;js/my.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释：</p><pre><code class="hljs">// 我是注释</code></pre><p>多行注释：</p><pre><code class="hljs">/*多行注释1多行注释2*/</code></pre><h2 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h2><pre><code class="hljs">// 输入框prompt(&#39;输入框&#39;);//弹出框alert(&#39;弹出警示框&#39;);//控制台输出console.log(&#39;调试程序,测试用的&#39;);</code></pre><p><strong>alert和prompt的区别：</strong></p><pre><code class="hljs">alert(&quot;从前有座山&quot;);                //直接使用，不需要变量var a = prompt(&quot;请输入一个数字&quot;);   // 必须用一个变量，来接收用户输入的值</code></pre><h2 id="变量和赋值"><a href="#变量和赋值" class="headerlink" title="变量和赋值"></a>变量和赋值</h2><p>“字面量”即<strong>常量</strong>，是固定值，不可改变。看见什么，它就是什么。</p><p>简单的字面量有2种：数字、字符串(字符串要加引号)。</p><p><strong>变量</strong>：变量可以用来保存字面量，而且变量的值可以任意改变。</p><p>在js中使用<code>var</code>关键字来声明一个变量:</p><pre><code class="hljs">var a = 100;</code></pre><p>等号表示<strong>赋值</strong>，将等号右边的值，赋给左边的变量。</p><pre><code class="hljs">a = b;</code></pre><p>把b的值赋给a，b不变。</p><p>将等号右边的值，赋给左边的变量；等号右边的变量，值不变。</p><p>变量要先定义，才能使用。</p><pre><code class="hljs">var a = 100;    //定义，并且赋值100</code></pre><h3 id="变量语法拓展"><a href="#变量语法拓展" class="headerlink" title="变量语法拓展"></a>变量语法拓展</h3><p>更新变量：变量重新赋值后，之前的值会被覆盖:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> myname = <span class="hljs-string">&#x27;22&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myname); <span class="hljs-comment">// 22</span><br>myname = <span class="hljs-string">&#x27;33&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myname); <span class="hljs-comment">// 33</span><br></code></pre></td></tr></table></figure><p>声明多个变量,用逗号隔开,最后1个还是用分号:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var age</span> = 18,<br>    address = <span class="hljs-string">&#x27;bbb&#x27;</span>,<br>    gz = 2233;<br></code></pre></td></tr></table></figure><p>特殊情况:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//只声明不赋值，结果是undefined未定义</span><br><span class="hljs-keyword">var</span> sex;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sex); <span class="hljs-comment">// undefined</span><br><span class="hljs-comment">//不声明不赋值直接使用会报错</span><br><span class="hljs-comment">//console.log(asa);</span><br><span class="hljs-comment">//不声明直接赋值使用,是全局变量,能够显示，但不提倡</span><br>qq = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(qq);<br></code></pre></td></tr></table></figure><h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><p>变量名有命名规范：只能由英语字母、数字、下划线、美元符号$构成，且不能以数字开头，并且不能是JavaScript保留字。<br>保留字(reserved word)，指在高级语言中已经定义过的字，使用者不能再将这些字作为变量名或过程名使用。</p><p>大写字母是可以使用的，并且大小写敏感。也就是说A和a是两个变量。</p><p><strong>总结:</strong></p><p>  1.建议用驼峰命名规则：第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母</p><p>  2.变量命名必须以字母或是下标符号”_”或者”$”为开头。</p><p>  3.变量名长度不能超过255个字符。</p><p>  4.变量名中不允许使用空格，首个字不能为数字。</p><p>  5.不用使用脚本语言中保留的<strong>关键字</strong>及<strong>保留字</strong>作为变量名。</p><p>  6.变量名区分大小写(javascript是区分大小写的语言)。</p><p>  7.汉语可以作为变量名。但是不建议使用，因为 low。 </p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p><strong>标识符</strong>：在JS中所有的可以由我们<strong>自主命名</strong>的都可以称之为标识符。</p><p>例如：变量名、函数名、属性名都是属于标识符。</p><p><strong>标识符的命名规则</strong>和变量的命令规则是一样的。看上面一段就可以了。</p><p>重点要注意的是：标识符不能使用脚本语言中保留的<strong>关键字</strong>及<strong>保留字</strong>。</p><h2 id="变量数据类型"><a href="#变量数据类型" class="headerlink" title="变量数据类型"></a>变量数据类型</h2><p>变量里面能够存储数字、字符串等。变量会自动的根据存储内容的类型不同，来决定自己的类型。</p><ul><li><strong>基本数据类型（值类型）</strong>：也叫 简单数据类型 <code>String</code> 字符串、<code>Number</code> 数值、<code>Boolean</code> 布尔值、<code>Null</code> 空值、<code>Undefined</code> 未定义。</li><li><strong>引用数据类型（引用类型）</strong>： 也叫 复杂数据类型 <code>Object</code> 对象。</li></ul><p>注意：内置对象<code>function、Array、Date、RegExp、Error</code>等都是属于<code>Object</code>类型。也就是说，除了那五种基本数据类型之外，其他的，都称之为<code> Object</code>类型。</p><p><strong>数据类型之间最大的区别</strong>：</p><ul><li>基本数据类型：参数赋值的时候，传数值。</li><li>引用数据类型：参数赋值的时候，传地址（修改的同一片内存空间）。</li></ul><p>简单数据类型: 是存放在栈里面,里面直接开辟一个空间存放的是值<br>复杂数据类型: 首先在栈里面存放地址(0x11accb这样的十六进制) 然后这个地址指向堆里面的数据</p><h3 id="字符串：String"><a href="#字符串：String" class="headerlink" title="字符串：String"></a>字符串：String</h3><p>（1）在JS中，字符串需要使用引号引起来。使用双引号或单引号都可以，但是不要混着用。比如下面这样写是不可以的：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = `hello<span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>（2）引号不能嵌套：双引号里不能再放双引号，单引号里不能再放单引号。但是单引号里可以嵌套双引号。</p><p>（3）<strong>转义字符</strong>：在字符串中我们可以使用<code>\</code>作为转义字符，当表示一些特殊符号时可以使用<code>\</code> 进行转义。</p><ul><li><code>\&quot;</code> 表示 <code>&quot;</code></li><li><code>\&#39;</code> 表示 <code>&#39;</code></li><li><code>\n</code> 表示换行</li><li><code>\r</code> 表示回车</li><li><code>\t</code> 表示制表符</li><li><code>\b</code> 表示空格</li><li><code>\\</code> 表示<code>\</code></li></ul><h4 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h4><p><code>typeof()</code>表示“<strong>获取变量的类型</strong>”，返回的是小写，语法为：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">typeof</span> 变量<br></code></pre></td></tr></table></figure><p><strong>返回结果</strong>：</p><ul><li><code>typeof 数值</code>的返回结果：number</li><li><code>typeof 字符串</code>的返回结果：string</li><li><code>typeof 布尔型</code>的返回结果：boolean</li><li><code>typeof undefined</code>的返回结果：undefined</li><li><code>typeof null</code>的返回结果：object</li></ul><p>在JavaScript中，只要是数，就是 number 数值型的。无论整浮、浮点数（即小数）、无论大小、无论正负，都是 number 类型的。</p><p><strong>注意:</strong><br>prompt取的值是字符型的</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> age = prompt(<span class="hljs-string">&#x27;输入年龄&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> age); <span class="hljs-comment">//string</span><br></code></pre></td></tr></table></figure><h3 id="数值型：Number"><a href="#数值型：Number" class="headerlink" title="数值型：Number"></a>数值型：Number</h3><p>在JS中所有的数值都是Number类型，包括整数和浮点数（小数）。</p><p><strong>数值范围：</strong></p><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。</p><ul><li>最大值：<code>Number.MAX_VALUE</code>，这个值为： 1.7976931348623157e+308</li><li>最小值：<code>Number.MIN_VALUE</code>，这个值为： 5e-324</li></ul><p>如果使用Number表示的变量超过了最大值，则会返回Infinity。</p><ul><li>无穷大（正无穷）：Infinity</li><li>无穷小（负无穷）：-Infinity</li></ul><p>注意：<code>typeof Infinity</code>的返回结果是number。</p><p><strong>NaN和isNaN()函数：</strong></p><p>（1）NaN：是一个特殊的数字，表示Not a Number，非数值。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;abc&quot;</span> / <span class="hljs-number">18</span>);  <span class="hljs-comment">//结果是NaN</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;abc&quot;</span> * <span class="hljs-string">&quot;abcd&quot;</span>); <span class="hljs-comment">//按理说，字符串相乘是没有结果的，但如果你非要让JS去算，它就一定会给你一个结果。结果是NaN</span><br></code></pre></td></tr></table></figure><p>注意：<code>typeof NaN</code>的返回结果是number。</p><p>Undefined和任何数值计算的结果为NaN。NaN 与任何值都不相等，包括 NaN 本身。</p><p>（2）isNaN() :任何不能被转换为数值的值，都会让这个函数返回 true。</p><p>  isNaN可以判断是否非数字，并返回一个值，是,返回false 不是,返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">NaN</span>);<span class="hljs-comment">// true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">123</span>); <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><p><strong>浮点数的运算</strong>：</p><p>在JS中，整数的运算<strong>基本</strong>可以保证精确；但是<strong>小数的运算，可能会得到一个不精确的结果</strong>。所以，千万不要使用JS进行对精确度要求比较高的运算。</p><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <span class="hljs-comment">//打印结果：0.30000000000000004</span><br></code></pre></td></tr></table></figure><p>上方代码中，打印结果并不是0.3，而是0.30000000000000004。</p><p>我们知道，所有的运算都要转换成二进制去计算，然而，二进制是无法精确表示1/10的。因此存在小数的计算不精确的问题。</p><h3 id="布尔值：Boolean"><a href="#布尔值：Boolean" class="headerlink" title="布尔值：Boolean"></a>布尔值：Boolean</h3><p>true 和 fase。主要用来做逻辑判断。</p><p>布尔值直接使用就可以了，千万不要加上引号。</p><h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><h4 id="null：空值"><a href="#null：空值" class="headerlink" title="null：空值"></a><code>null</code>：空值</h4><p>专门用来表示一个为空的<strong>对象</strong>（例如：<code>var a = null</code>）。注意，专门用来表示<strong>空对象</strong>。</p><ul><li><p>Null类型的值只有一个，就是null。比如：<code>var a = null</code>。</p></li><li><p>使用 typeof 检查一个null值时，会返回object。</p></li></ul><h4 id="undefined：未定义"><a href="#undefined：未定义" class="headerlink" title="undefined：未定义"></a><code>undefined</code>：未定义</h4><p><strong>声明</strong>了一个变量，但是没有<strong>赋值</strong>（例如：<code>var a;</code>），此时它的值就是undefined。</p><ul><li>Undefined类型的值只有一个，就是undefind</li><li>使用 type of 检查一个undefined时，会返回undefined。</li></ul><p>null和undefined有最大的相似性。看看null == undefined的结果(true)也就更加能说明这点。</p><p>但是null === undefined的结果(false)。它们虽然相似，但还是有区别的，其中一个区别是：和数字运算时，10 + null结果为：10；10 + undefined结果为：NaN。</p><ul><li>任何数据类型和undefined运算都是NaN;</li><li>任何值和null运算，null可看做0运算。</li></ul><h3 id="连字符和加号的区别"><a href="#连字符和加号的区别" class="headerlink" title="连字符和加号的区别"></a>连字符和加号的区别</h3><p>键盘上的<code>+</code>可能是连字符，也可能是数字的加号。如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;啊&quot;</span> + <span class="hljs-string">&quot;3&quot;</span>);<span class="hljs-comment">//连字符，</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;a+啊+3&quot;</span>);<span class="hljs-comment">//原样输出</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>);<span class="hljs-comment">//输出6</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>啊<span class="hljs-number">3</span><br><span class="hljs-attribute">a</span>+啊+<span class="hljs-number">3</span><br><span class="hljs-attribute">6</span><br></code></pre></td></tr></table></figure><p><strong>总结</strong>：如果加号两边<strong>都是</strong>数值，此时是加。否则，就是连字符（用来连接字符串）。</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>我们知道，<code>&quot;2&quot;+1</code>得到的结果其实是字符串，但是<code>&quot;2&quot;-1</code>得到的结果却是数值1，这是因为计算机自动帮我们进行了“<strong>隐式转换</strong>”。</p><p>也就是说，<code>-</code>、<code>*</code>、<code>/</code>、`%``这几个符号会自动进行隐式转换。</p><p>虽然程序可以对<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>这几个符号自动进行“隐式转换”；但是最好自己完成转换，方便程序的可读性。</p><h2 id="变量数据类型转换"><a href="#变量数据类型转换" class="headerlink" title="变量数据类型转换"></a>变量数据类型转换</h2><h3 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h3><ol><li><p>parseInt(变量)字符型转换为数字型,只能是整数</p><pre><code class="hljs"> var age = prompt(&#39;输入年龄&#39;) console.log(parseInt(age)); //值要以数字开头才能识别,否则输出NaN &#39;asd123&#39;输出是NaN console.log(parseInt(&#39;3.14&#39;)); // 3 只能取整数 console.log(parseInt(&#39;120px&#39;)); // 120 会去掉单位取整</code></pre></li><li><p>parseFloat可以取小数 值必须以数字开头</p><pre><code class="hljs"> console.log(parseFloat(&#39;3.14&#39;)); //3.14 console.log(parseFloat(&#39;120px&#39;)); //120</code></pre></li><li><p>Number(变量)</p><pre><code class="hljs"> var str = &#39;123&#39;; console.log(Number(str)); console.log(Number(&#39;12&#39;));</code></pre></li></ol><p><strong>情况一：字符串 –&gt; 数字</strong></p><ul><li>1.如果字符串中是纯数字，则直接将其转换为数字。</li><li>2.如果字符串中有非数字的内容，则转换为NaN。（此处可以看到Number()函数的局限性）</li><li>3.如果字符串是一个空串或者是一个全是空格的字符串，则转换为0。</li></ul><p><strong>情况二：布尔 –&gt; 数字</strong></p><ul><li>true 转成 1</li><li>false 转成 0</li></ul><p><strong>情况三：null –&gt; 数字</strong></p><ul><li>结果为：0</li></ul><p><strong>情况四：undefined –&gt; 数字</strong></p><ul><li>结果为：NaN</li></ul><ol start="4"><li><p>算数运算 - * / 隐式转换</p><pre><code class="hljs"> console.log(&#39;12&#39; - 0); // 12 console.log(&#39;123&#39; - &#39;120&#39;); // 3 console.log(&#39;123&#39; * 1); // 123</code></pre></li></ol><h3 id="转换为字符串型"><a href="#转换为字符串型" class="headerlink" title="转换为字符串型"></a>转换为字符串型</h3><p>1.数字型转换为字符串型 变量.toString</p><pre><code class="hljs">    var num = 10,        str = num.toString();    console.log(num); //数字型    console.log(str); //字符串型    console.log(typeof str); // string</code></pre><p>【重要】该方法<strong>不会影响到原变量</strong>，它会将转换的结果返回。当然我们还可以直接写成<code>num = num.toString()</code>，这样的话，就是直接修改原变量。</p><p>注意：null和undefined这两个值没有toString()方法，所以它们不能用方法二。如果调用，会报错。</p><p>另外，Number类型的变量，在调用toString()时，可以在方法中传递一个整数作为参数。此时它将会把数字转换为指定的进制，如果不指定则默认转换为10进制。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">255</span>;<br><br><span class="hljs-comment">//对于Number调用toString()时可以在方法中传递一个整数作为参数</span><br><span class="hljs-comment">//此时它将会把数字转换为指定的进制,如果不指定则默认转换为10进制</span><br>a = a.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);        <span class="hljs-comment">// 11111111</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a); <span class="hljs-comment">// string</span><br></code></pre></td></tr></table></figure><p>2.数字型强制转换为字符串</p><pre><code class="hljs">    console.log(String(num));</code></pre><p>3.(隐式转换) 拼接字符串实现转换效果</p><pre><code class="hljs">    console.log(num + &#39;&#39;);</code></pre><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><p>将其他的数据类型转换为Boolean，可以使用Boolean()函数。</p><ul><li>情况一：数字 –&gt; 布尔。除了0和NaN，其余的都是true。</li><li>情况二：字符串 —&gt; 布尔。除了空串，其余的都是true。</li><li>情况三：null和undefined都会转换为false。</li><li>情况四：对象也会转换为true。</li></ul><p>Boolean() 空值,否定值都会转换为false</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">//false</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;12&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">12</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;十二&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="其他进制的数字"><a href="#其他进制的数字" class="headerlink" title="其他进制的数字"></a>其他进制的数字</h2><ul><li>16进制的数字，以<code>0x</code>开头</li><li>8进制的数字，以<code>0</code>开头</li><li>2进制的数字，<code>0b</code>开头（不是所有的浏览器都支持：chrome和火狐支持，IE不支持）</li></ul><p>比如<code>070</code>这个字符串，如果我调用parseInt()转成数字时，有些浏览器会当成8进制解析，有些会当成10进制解析。</p><p>所以，比较建议的做法是：可以在parseInt()中传递第二个参数，来指定数字的进制。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a = <span class="hljs-string">&quot;070&quot;</span>;<br><br>a = <span class="hljs-built_in">parseInt</span>(a,<span class="hljs-number">10</span>); <span class="hljs-comment">//转换成十进制</span><br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>加<code>+</code>,减<code>-</code>,乘<code>*</code>,除<code>/</code>,取余<code>%</code></p><pre><code class="hljs">    console.log(4 % 2); // 0    console.log(5 % 3); // 2    console.log(3 % 5); // 3</code></pre><p><strong>算数运算符的运算规则</strong></p><p>（1）先算乘除、后算加减。</p><p>（2）小括号：能够影响计算顺序，且可以嵌套。没有中括号、没有大括号，只有小括号。</p><p>（3）百分号：取余。只关心余数。</p><p>（4）当对非Number类型的值进行运算（包括<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>）时，会将这些值转换为Number然后再运算。（注：<code>字符串 + Number</code>、<code>字符串 + 字符串</code>是特例，）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">result1</span> = <span class="hljs-literal">true</span> + <span class="hljs-number">1</span><span class="hljs-comment">;  // 2 = 1+ 1</span><br><br><span class="hljs-attr">result2</span> = <span class="hljs-literal">true</span> + <span class="hljs-literal">false</span><span class="hljs-comment">; // 1 = 1+ 0</span><br><br><span class="hljs-attr">result3</span> = <span class="hljs-number">1</span> + null<span class="hljs-comment">; // 1 = 1+ 0</span><br><br><span class="hljs-attr">result4</span> = <span class="hljs-number">100</span> - <span class="hljs-string">&#x27;1&#x27;</span> // <span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><p>（5）任何值和NaN做运算的结果都是NaN。</p><p>（6）任何的值和字符串做加法运算，都会先转换为字符串，然后再做拼串操作。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <span class="hljs-attribute">result1</span> = <span class="hljs-number">1</span> + <span class="hljs-number">2</span> + &#x27;<span class="hljs-number">3</span>&#x27;  // <span class="hljs-number">33</span><br><br><span class="hljs-attribute">result2</span> = &#x27;<span class="hljs-number">1</span>&#x27; + <span class="hljs-number">2</span> + <span class="hljs-number">3</span>; // <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>利用这一特性可以将一个任意的数据类型转换为String<br><code>c = c + &quot;&quot;</code> 等价于 <code>c = String(c)</code>。</p><p>（7）任何值做<code>-</code>、<code>*</code>、<code>/</code>运算时都会自动转换为Number。</p><p>利用这一特点，可以将一个值<code>-0</code>、<code>*1</code>、<code>/1</code>来将其转换为Number。</p><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>一元运算符，只需要一个操作数。</p><p>常见的一元运算符如下。</p><p><strong>正号 <code>+</code></strong></p><p>（1）正号不会对数字产生任何影响。比如说，<code>2</code>和<code>+2</code>是一样的。</p><p><strong>typeof</strong></p><p>typeof就是典型的一元运算符，因为后面只跟一个操作数。</p><p>（2）我们可以对一个其他的数据类型使用<code>+</code>，来将其转换为number【小技巧】。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-literal">true</span>;<br>a = +a;   <span class="hljs-comment">// 注意这行代码的一元运算符操作</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a：&#x27;</span> + a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a);<br><br><span class="hljs-keyword">var</span> b = <span class="hljs-string">&#x27;18&#x27;</span>;<br>b = +b;   <span class="hljs-comment">// 注意这行代码的一元运算符操作</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b：&#x27;</span> + b);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> b);<br></code></pre></td></tr></table></figure><h3 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h3><p>自减跟自增原理相同</p><p>自增分成两种：<code>a++</code>和<code>++a</code>。</p><p>（1）对于一个变量自增以后，原变量的值会<strong>立即</strong>自增1。也就是说，无论是 <code>a++</code> 还是<code>++a</code>，都会立即使原变量的值自增1。</p><p>（2）<strong>我们要注意的是</strong>：<code>a</code>是变量，而<code>a++</code>和<code>++a</code>是<strong>表达式</strong>。</p><p>那这两种自增，有啥区别呢？区别是：<code>a++</code> 和 <code>++a</code>的值不同：（也就是说，表达式的值不同）</p><ul><li><code>a++</code>的值等于原变量的值（a自增前的值）</li><li><code>++a</code>的值等于新值 （a自增后的值）</li></ul><p>例子:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> n1=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> n2=<span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">var</span> n = n1++; <span class="hljs-comment">//n1 = 11  n1++ = 10</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;n=&#x27;</span>+n);  <span class="hljs-comment">// 10</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;n1=&#x27;</span>+n1); <span class="hljs-comment">//11</span><br><br>n = ++n1 <span class="hljs-comment">//n1 = 12  ++n1 =12</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;n=&#x27;</span>+n); <span class="hljs-comment">//12</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;n1=&#x27;</span>+n1); <span class="hljs-comment">//12</span><br><br>n = n2--;<span class="hljs-comment">// n2=19 n2--=20</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;n=&#x27;</span>+n); <span class="hljs-comment">//20</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;n2=&#x27;</span>+n2); <span class="hljs-comment">//19</span><br><br>n = --n2; <span class="hljs-comment">//n2=18 --n2 = 18</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;n=&#x27;</span>+n); <span class="hljs-comment">//18</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;n2=&#x27;</span>+n2); <span class="hljs-comment">//18</span><br></code></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符有三个：</p><ul><li><code>&amp;&amp;</code>      与（且）：两个都为真，结果才为真。</li><li><code>||</code>    或：只要有一个是真，结果就是真。</li><li><code>!</code>    非：对一个布尔值进行取反。</li></ul><p><strong>注意事项</strong></p><p>（1）能参与逻辑运算的，都是布尔值。</p><p>（2）JS中的<code>&amp;&amp;</code>属于<strong>短路</strong>的与，如果第一个值为false，则不会看第二个值。</p><p>（3）JS中的<code>||</code>属于<strong>短路</strong>的或，如果第一个值为true，则不会看第二个值。</p><p>（4）如果对<strong>非布尔值</strong>进行逻辑运算，则会<strong>先将其转换为布尔值</strong>，然后再操作。</p><p>对非布尔值进行<code>!</code>操作之后，返回结果为布尔值:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>   a = !a;<br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);  <span class="hljs-comment">// false</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> a); <span class="hljs-comment">// boolean</span><br></code></pre></td></tr></table></figure><h4 id="非布尔值的与或运算-短路运算"><a href="#非布尔值的与或运算-短路运算" class="headerlink" title="非布尔值的与或运算(短路运算)"></a>非布尔值的与或运算(短路运算)</h4><p>非布尔值进行<strong>与或运算</strong>时，会先将其转换为布尔值，然后再运算，但返回结果是<strong>原值</strong>。比如说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-number">5</span> &amp;&amp; <span class="hljs-number">6</span>; <span class="hljs-comment">// 运算过程：true &amp;&amp; true;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result：&#x27;</span> + result); <span class="hljs-comment">// 打印结果：6（也就是说最后面的那个值。）</span><br></code></pre></td></tr></table></figure><p><strong>与(&amp;&amp;)运算</strong>的返回结果：（以两个非布尔值的运算为例）</p><ul><li>如果第一个值为true，则必然返回第二个值（所以说，如果所有的值都为true，则返回的是最后一个值）</li><li>如果第一个值为false，则直接返回第一个值</li></ul><p><strong>或(||)运算</strong>的返回结果：（以两个非布尔值的运算为例）</p><ul><li>如果第一个值为true，则直接返回第一个值</li><li>如果第一个值为false，则返回第二个值</li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>可以将符号右侧的值赋值给符号左侧的变量。</p><p>举例：</p><ul><li><code>+=</code>。a += 5 等价于 a = a + 5</li><li><code>-=</code>。a -= 5 等价于 a = a - 5</li><li><code>*=</code>。a *= 5 等价于 a = a * 5</li><li><code>/=</code>。a /= 5 等价于 a = a / 5</li><li><code>%=</code>。a %= 5 等价于 a = a % 5</li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>通过关系运算符可以比较两个值之间的大小关系，如果关系成立它会返回true，如果关系不成立则返回false。</p><p><strong>关系运算符，得到的结果都是布尔值：要么是true，要么是false</strong>。</p><blockquote><p>   大于号<br>    &lt;    小于号<br>=     大于或等于<br>    &lt;=  小于或等于<br>    ==     等于<br>    === 全等于<br>    !=    不等于<br>    !== 不全等于</p></blockquote><p>（1）对于非数值进行比较时，会将其转换为数字然后再比较。</p><p>（2）特殊情况：如果符号两侧的值都是字符串时，<strong>不会</strong>将其转换为数字进行比较。比较两个字符串时，比较的是字符串的<strong>Unicode编码</strong>。</p><p>比较字符编码时，是一位一位进行比较。如果两位一样，则比较下一位，所以借用它可以来对英文进行排序。</p><p>PS：所以说，当你尝试去比较<code>&quot;123&quot;</code>和<code>&quot;56&quot;</code>这两个字符串时，你会发现，字符串”56”竟然比字符串”123”要大。也就是说，下面这样代码的打印结果，其实是true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 比较两个字符串时，比较的是字符串的字符编码，所以可能会得到不可预期的结果</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;56&quot;</span> &gt; <span class="hljs-string">&quot;123&quot;</span>);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>因此</strong>：当我们在比较两个字符串型的数字时，<strong>一定一定要先转型</strong>，比如 <code>parseInt()</code>。</p><p>（3）任何值和NaN做任何比较都是false。</p><p><code>==</code>符会将不同类型的东西，<strong>转为相同类型</strong>进行比较</p><p><code>===</code><strong>全等不会做类型转换</strong>必须是值跟数据类型都相同才全等</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>三元运算符也叫条件运算符。</p><pre><code class="hljs">// 一元表达式: ++num // 二元表达式: 3 + 5// 三元表达式: ? :// 语法结构: 条件表达式 ? 表达式1 : 表达式2// 条件表达式结果为真,返回表达式1的值,为假返回表达式2的值</code></pre><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>运算符的优先级如下：（越往上，优先级越高）</p><ul><li><p><code>.</code>、<code>[]</code>、<code>new</code></p></li><li><p>()</p></li><li><p>++、–</p></li><li><p><code>!</code>、<code>~</code>、<code>+</code>（单目）、<code>-</code>（单目）、<code>typeof</code>、<code>void</code>、<code>delete</code></p></li><li><p><code>%</code>、<code>*</code>、<code>/</code></p></li><li><p><code>+</code>（双目）、<code>-</code>（双目）</p></li><li><p><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></p></li><li><p><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code></p></li><li><p><code>==</code>、<code>!==</code>、<code>===</code></p></li><li><p><code>&amp;</code></p></li><li><p><code>^</code></p></li><li><p><code>|</code></p></li><li><p><code>&amp;&amp;</code></p></li><li><p><code>||</code></p></li><li><p><code>?:</code></p></li><li><p><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>、<code>|=</code></p></li><li><p><code>,</code></p></li></ul><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>按照代码的先后顺序，依次执行。</p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p><strong>if语句只执行其中一个</strong></p><p>1、条件判断语句</p><p>条件成立才执行。如果条件不成立，那就什么都不做</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br><span class="hljs-regexp">//</span> 执行语句 条件为真就执行<br>&#125;<br></code></pre></td></tr></table></figure><p>2、条件分支语句</p><p>如果 条件表达式为真,那么执行语句1  else否则  执行语句2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br><span class="hljs-regexp">//</span> 执行语句<span class="hljs-number">1</span><br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-regexp">//</span> 执行语句<span class="hljs-number">2</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、多分支的if语句</p><p>多分支语句 多选 1 的过程<br>满足条件表达式1,就执行语句1 执行后退出整个if 分支语句<br>不满足条件表达式1,就判断条件表达式2,满足就执行语句2,以此类推<br>如果都不成立,则执行else里最后的语句        </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-regexp">//</span>语句<span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>) &#123;<br>          <span class="hljs-regexp">//</span>语句<span class="hljs-number">2</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>) &#123;<br>          <span class="hljs-regexp">//</span>语句<span class="hljs-number">3</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-regexp">//</span>最后的语句;<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>（1）首先，计算出表达式的值，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。</p><p>（2）然后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分。</p><p>（3）表达式的值和case的值必须全等 ,值和数据类型一致才可以</p><p>（4）没有break不会退出switch 而是继续执行下一个case（case穿透）</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span> (表达式) &#123;<br>          <span class="hljs-keyword">case</span> value1:<br>              执行语句<span class="hljs-number">1</span>;<br>              <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">case</span> value2:<br>              执行语句<span class="hljs-number">2</span>;<br>              <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">case</span> value3:<br>              执行语句<span class="hljs-number">3</span>;<br>              <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">default</span>:<br>              执行最后的语句;<br>      &#125;<br></code></pre></td></tr></table></figure><p>switch适合固定的值,效率更高一次判断 直接执行<br>if else适合判断范围的,效率低一些,需要判断多次</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(<span class="hljs-number">1</span>初始化表达式; <span class="hljs-number">2</span>条件表达式; <span class="hljs-number">4</span>更新表达式)</span></span>&#123;<br><span class="hljs-number">3</span>语句...<br>&#125;<br></code></pre></td></tr></table></figure><p>1执行初始化表达式，初始化变量（初始化表达式只会执行一次）</p><p>2执行条件表达式，判断是否执行循环：</p><ul><li>如果为true，则执行循环3</li><li>如果为false，终止循环</li></ul><p>4执行更新表达式，更新表达式执行完毕继续重复2</p><p><strong>双重for循环</strong></p><p>可以把里面的循环看作是外面循环的语句<br>外层循环1 次,里面循环全部</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;外面循环第&#x27;</span> + i + <span class="hljs-string">&#x27;次&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;里面循环第&#x27;</span> + j + <span class="hljs-string">&#x27;次&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>当表达式为true时,执行循环体,否则退出循环</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">while</span> (条件表达式) &#123;<br>    <span class="hljs-regexp">//</span>循环体<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h4><p>先执行一次循环体,  再去判断表达式,  do while至少会执行1次</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">do</span> &#123;<br>循环体    <span class="hljs-regexp">//</span> 条件表达式为true时重复执行<br>&#125; <span class="hljs-keyword">while</span> (条件表达式);<br></code></pre></td></tr></table></figure><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><ul><li>break可以用来退出switch语句或<strong>整个</strong>循环语句（循环语句包括for、while。不包括if。if里不能用 break 和 continue，否则会报错）。</li><li>break会立即终止离它<strong>最近</strong>的那个循环语句。</li><li>可以为循环语句创建一个label，来标识当前的循环（格式：label:循环语句）。使用break语句时，可以在break后跟着一个label，这样break将会结束指定的循环，而不是最近的。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">   outer:<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;外层循环 i 的值：&quot;</span> + i)<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>           <span class="hljs-keyword">break</span> outer; <span class="hljs-comment">// 直接跳出outer所在的外层循环（outer是自定义的label）</span><br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;内层循环 j 的值:&quot;</span> + j);<br>       &#125;<br>   &#125;<br><br><span class="hljs-comment">// 打印结果:外层循环 i 的值：0</span><br></code></pre></td></tr></table></figure><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><ul><li>continue可以用来跳过<strong>当次</strong>循环。</li><li>同样，continue默认只会离他<strong>最近</strong>的循环起作用。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css篇-四</title>
    <link href="/blog/2019/10/02/css%E7%AF%87-%E5%9B%9B/"/>
    <url>/blog/2019/10/02/css%E7%AF%87-%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<p>本篇博客主要记录css部分，记录下来主要用于复习,巩固。涉及到精灵图、字体图标（iconfont）、flex布局（弹性盒）、媒体查询、过度、2D、3D效果以及css动画。</p><span id="more"></span><h2 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h2><p>当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><p>简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图，如下图所示就是一个精灵图。</p><p><img src="https://raw.githubusercontent.com/birpg/image/master/sprite_fs%401x.png"></p><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的<code>background-image</code>、<code>background-repeat</code>和<code>background-position</code>属性进行背景定位，其中最关键的是使用<code>background-position</code>属性精确地定位。</p><h2 id="字体图标（iconfont"><a href="#字体图标（iconfont" class="headerlink" title="字体图标（iconfont)"></a>字体图标（iconfont)</h2><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p><h3 id="字体图标优点"><a href="#字体图标优点" class="headerlink" title="字体图标优点"></a>字体图标优点</h3><blockquote><p>可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..<br>但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等…<br>本身体积更小，但携带的信息并没有削减。<br>几乎支持所有的浏览器<br>移动端设备必备良药</p></blockquote><h3 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h3><h4 id="上传生成字体包"><a href="#上传生成字体包" class="headerlink" title="上传生成字体包"></a>上传生成字体包</h4><p>UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。可以在以下网站下载需要的字体图标。<br>推荐网站：</p><ul><li><strong>上传推荐</strong> <a href="http://icomoon.io/">http://icomoon.io</a></li><li><strong>icomoon字库</strong> <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></li><li><strong>阿里icon font字库</strong> <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></li><li><strong>fontello</strong> <a href="http://fontello.com/">http://fontello.com/</a></li><li><strong>Font-Awesome</strong> <a href="http://fortawesome.github.io/Font-Awesome/">http://fortawesome.github.io/Font-Awesome/</a></li><li><strong>Glyphicon Halflings</strong> <a href="http://glyphicons.com/">http://glyphicons.com/</a></li><li><strong>Icons8</strong> <a href="https://icons8.com/">https://icons8.com/</a></li></ul><h4 id="把字体引入到HTML"><a href="#把字体引入到HTML" class="headerlink" title="把字体引入到HTML"></a>把字体引入到HTML</h4><p>把下载的字体图标解压，将fonts文件夹放进项目根目录。在引入字体图标的项目下面生成的fontclass代码：</p><pre><code class="hljs">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/CSS&quot; href=&quot;./iconfont.CSS&quot;&gt;</code></pre><p>挑选相应图标并获取类名，应用于页面：</p><pre><code class="hljs">&lt;i class=&quot;iconfont icon-xxx&quot;&gt;&lt;/i&gt;</code></pre><h2 id="flex布局（弹性盒）"><a href="#flex布局（弹性盒）" class="headerlink" title="flex布局（弹性盒）"></a>flex布局（弹性盒）</h2><p>指定一个盒子为伸缩布局：<code>display: flex;</code></p><p>flex布局有着很强的适应性，在响应式开发中能发挥极大作用。</p><p>在flex中有两个概念：</p><ul><li>主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向，从左向右。</li><li>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向，从上往下。</li></ul><p>主轴和侧轴并不是固定不变的，通过flex-direction可以互换。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>1.<code>flex-direction</code>属性：设置主轴方向。</p><ul><li><code>flex-direction: row;</code> 设置<strong>主轴方向</strong>，默认是水平方向。属性值可以是：<ul><li><code>row</code> 水平方向（默认值）</li><li><code>reverse-row</code> 反转</li><li><code>column</code> 垂直方向</li><li><code>reverse-column</code> 反转列</li></ul></li></ul><p>2.<code>justify-content</code>属性：设置子元素在主轴上的对齐方式。</p><ul><li><code>justify-content: flex-start;</code> 设置子元素在<strong>主轴上的对齐方式</strong>。属性值可以是：<ul><li><code>flex-start</code> 从主轴的起点对齐（默认值）</li><li><code>flex-end</code> 从主轴的终点对齐</li><li><code>center</code> 居中对齐</li><li><code>space-around</code> 在父盒子里平分</li><li><code>space-between</code> 两端对齐 平分</li></ul></li></ul><p>3.<code>align-items</code>设置子元素在侧轴上的对齐方式。</p><ul><li><code>align-items:flex-start;</code> 设置子元素在<strong>侧轴上的对齐方式</strong>。属性值可以是：<ul><li><code>flex-start</code> 从侧轴开始的方向对齐</li><li><code>flex-end</code> 从侧轴结束的方向对齐</li><li><code>baseline</code> 基线 默认同flex-start</li><li><code>center</code> 中间对齐</li><li><code>stretch</code> 拉伸</li></ul></li></ul><p>4.<code>flex-wrap</code>设置子元素是否换行。</p><ul><li><code>flex-wrap: wrap;</code> 子元素排不下会自动向下换行</li></ul><p>5.<code>align-content</code>设置弹性盒堆叠</p><ul><li><code>align-content: flex-start;</code>子元素从弹性盒的起始位置堆叠<ul><li><code>flex-start</code>子元素从弹性盒的起始位置堆叠</li><li><code>flex-end</code>子元素从弹性盒的结束位置堆叠</li><li><code>center</code>子元素从弹性盒的中间位置堆叠</li><li><code>space-between</code>子元素在弹性盒平均分布</li><li><code>space-around</code>子元素在弹性盒平均分布，两端保留元素间距的一半空</li><li><code>space-between</code>默认属性，和设置高度后的效果一致</li></ul></li></ul><h3 id="分配比例"><a href="#分配比例" class="headerlink" title="分配比例"></a>分配比例</h3><p>flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配</p><pre><code class="hljs">&lt;style type=&quot;text/css&quot;&gt;.box &#123;        width: 260px;        border: 1px #000 solid;        display: flex;        /* 父元素设为弹性盒 */    &#125;    .box1 &#123;        width: 80px;        background: #f00;        flex-grow: 1;    /* 父元素多出的空间，两个子元素按照1：1分配 */    &#125;    .box2 &#123;        width: 120px;        background: #0f0;        flex-grow: 1;    /* 父元素多出的空间，两个子元素按照1：1分配 */    &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;    &lt;div class=&quot;box1&quot;&gt;        第一段文字    &lt;/div&gt;    &lt;div class=&quot;box2&quot;&gt;        第二段文字    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;li:nth-child(1) &#123;background: #f00;&#125;li:nth-child(2) &#123;background: #0f0;&#125;li:nth-child(3) &#123;    background: #00f;    flex-basis: 600px;        /* 按照1：1：6：1：1来重新分配父元素的600px宽度 */&#125;li:nth-child(4) &#123;background: #ff0;&#125;li:nth-child(5) &#123;background: #0ff;&#125;</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>order控制子项目的排列顺序，正序方式排序，从小到大</p><pre><code class="hljs">&lt;style type=&quot;text/css&quot;&gt;    * &#123;        margin: 0;        padding: 0;    &#125;    ul li &#123;list-style: none;&#125;    ul &#123;        width: 800px;        background: #eee;        display: flex;        height: 100px;    &#125;    li &#123;        width: 100px;        background: #ff0;        margin-right: 20px;        font-size: 36px;    &#125;    li:nth-child(3),li:nth-child(5) &#123;order: 1;&#125;    li:nth-child(1) &#123;order: 2;&#125;    li:nth-child(4) &#123;order: -1;&#125;     /*默认0 数值小的排前面*/&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;2&lt;/li&gt;    &lt;li&gt;3&lt;/li&gt;    &lt;li&gt;4&lt;/li&gt;    &lt;li&gt;5&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;</code></pre><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><pre><code class="hljs">/* 网页宽度不同颜色不同 *//*all用于所有设备，print用于打印机和打印预览，scree用于电脑，平板，智能手机等。and多个连接到一起，not排除某个，only指定某个*/@media screen and (max-width:800px) &#123;    body &#123;background: #00f;&#125;&#125;@media screen and (min-width:800px) &#123;    /*从小到大写，更好*/    body &#123;background: #0f0;&#125;&#125;@media screen and (min-width:1200px) &#123;    /*小于等于1200px*/    body &#123;background: #f00;&#125;&#125;</code></pre><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p>在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。</p><pre><code class="hljs">transition: 要过渡的属性  花费时间  运动曲线  延迟时间;</code></pre><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>transition</td><td>简写属性，用于在一个属性中设置四个过渡属性。</td></tr><tr><td>transition-property</td><td>规定应用过渡的 CSS 属性的名称。 (所有属性用all)</td></tr><tr><td>transition-duration</td><td>定义过渡效果花费的时间。默认是 0。</td></tr><tr><td>transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”。</td></tr><tr><td>transition-delay</td><td>规定过渡效果何时开始。默认是 0。</td></tr></tbody></table><p>运动曲线：</p><ul><li><code>linear</code> 匀速</li><li><code>ease</code> 逐渐慢下来</li><li><code>ease-in</code> 加速</li><li><code>ease-out</code> 减速 </li><li><code>ease-in-out</code>  先加速后减速</li></ul><h2 id="2D效果"><a href="#2D效果" class="headerlink" title="2D效果"></a>2D效果</h2><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><pre><code class="hljs">transform: translate(水平位移, 垂直位移);transform: translate(-50%, -50%);</code></pre><p>参数解释：</p><ul><li>参数为百分比，相对于自身移动。</li><li>正值：向右和向下。 负值：向左和向上。如果只写一个值，则表示水平移动。</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">transform</span>: <span class="hljs-built_in">translate</span>(10px,20px)<span class="hljs-comment">/* 水平垂直移动 */</span><br><span class="hljs-built_in">transform</span>: translateX()<span class="hljs-comment">/*水平移动*/</span><br><span class="hljs-built_in">transform</span>: translateY()  <span class="hljs-comment">/*垂直移动*/</span><br><span class="hljs-built_in">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">50</span><span class="hljs-symbol">%</span>) <span class="hljs-comment">/*是以自己宽度的50%，而不是父类*/</span><br></code></pre></td></tr></table></figure><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><pre><code class="hljs">transform: scale(x, y);transform: scale(2, 0.5);</code></pre><p>参数解释： x：表示水平方向的缩放倍数。y：表示垂直方向的缩放倍数。如果只写一个值就是等比例缩放。</p><p>取值：大于1表示放大，小于1表示缩小。不能为百分比。</p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><pre><code class="hljs">transform: rotate(角度);transform: rotate(45deg);</code></pre><p>参数解释：正值 顺时针；负值：逆时针。</p><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><p>通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。</p><p>可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。</p><pre><code class="hljs">transform: skew(30deg,20deg);/* transform: skewX()  transform: skewY() */</code></pre><h3 id="更改原点"><a href="#更改原点" class="headerlink" title="更改原点"></a>更改原点</h3><p>transform-origin可以调整元素转换的原点, 默认以元素中心为原点</p><pre><code class="hljs">transform-origin: left top;        /* 自定义左上角为原点</code></pre><h2 id="3D效果"><a href="#3D效果" class="headerlink" title="3D效果"></a>3D效果</h2><h3 id="旋转-1"><a href="#旋转-1" class="headerlink" title="旋转"></a>旋转</h3><p>相对于2d多了个z轴，z轴垂直于浏览器的平面</p><pre><code class="hljs">transform: rotateX(360deg);    //绕 X 轴旋转360度transform: rotateY(360deg);    //绕 Y 轴旋转360度transform: rotateZ(360deg);    //绕 Z 轴旋转360度</code></pre><h3 id="移动-1"><a href="#移动-1" class="headerlink" title="移动"></a>移动</h3><pre><code class="hljs">transform: translateX(100px);    //沿着 X 轴移动transform: translateY(360px);    //沿着 Y 轴移动transform: translateZ(360px);    //沿着 Z 轴移动</code></pre><h3 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视(perspective)"></a>透视(perspective)</h3><p>透视格式有两种写法：</p><ul><li>作为一个属性，设置给父元素，作用于所有3D转换的子元素</li><li>作为 transform 属性的一个值，做用于元素自身。</li></ul><h3 id="3D呈现"><a href="#3D呈现" class="headerlink" title="3D呈现"></a>3D呈现</h3><p>3D元素构建是指某个图形是由多个元素构成的，可以给这些元素的<strong>父元素</strong>设置<code>transform-style: preserve-3d</code>来使其变成一个真正的3D图形。属性值可以如下：</p><pre><code class="hljs">transform-style: preserve-3d;     //让 子盒子 位于三维空间里transform-style: flat;            //让子盒子位于此元素所在的平面内（子盒子被扁平化）</code></pre><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>动画是CSS3中具有颠覆性的特征，可通过设置<strong>多个节点</strong> 来精确控制一个或一组动画，常用来实现<strong>复杂</strong>的动画效果。</p><h3 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h3><p>（1）通过@keyframes定义动画；</p><p>（2）将这段动画通过百分比，分割成多个节点；然后各节点中分别定义各属性；</p><p>（3）在指定元素里，通过 <code>animation</code> 属性调用动画。</p><pre><code class="hljs">@keyframes 动画名称 &#123;    from&#123; 开始位置 &#125;  0%    to&#123;  结束  &#125;  100%&#125;&lt;!-- 调用 --&gt;animation:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;</code></pre><p>animation属性:</p><p><code>animation</code>: 定义的动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行。(infinite 表示无限次)</p><p>(1）动画名称：</p><p><code>animation-name: move;</code></p><p>（2）执行一次动画的持续时间：</p><p><code>animation-duration: 4s;</code></p><p>备注：上面两个属性，是必选项，且顺序固定。</p><p>（3）动画的执行次数：</p><p><code>animation-iteration-count: 1;</code> </p><p><code>iteration</code>的含义表示迭代，属性值<code>infinite</code>表示无数次。</p><p>（3）动画的方向：</p><p><code>animation-direction: alternate;</code></p><p>属性值：normal 正常，alternate 反向。</p><p>（4）动画延迟执行：</p><p><code>animation-delay: 1s;</code></p><p>（5）设置动画结束时，盒子的状态：</p><p><code>animation-fill-mode: forwards;</code></p><p>属性值： forwards：保持动画结束后的状态（默认），  backwards：动画结束后回到最初的状态。</p><p>（6）运动曲线：</p><p><code>animation-timing-function: ease-in;</code></p><p>属性值可以是：linear   ease-in-out  steps()等。</p><p><strong>注意</strong>，如果把属性值写成**<code> steps()</code><strong>，则表示动画</strong>不是连续执行**，而是间断地分成几步执行。<code>steps()</code>可以作出很多不连续地动画效果，比如时钟。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css篇(三)</title>
    <link href="/blog/2019/10/02/css%E7%AF%87-%E4%B8%89/"/>
    <url>/blog/2019/10/02/css%E7%AF%87-%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<p>本篇博客主要记录css部分，记录下来主要用于复习,巩固。涉及到盒子模型、浮动、定位、z-index属性、元素的显示与隐藏、css高级技巧、溢出的文字隐藏。</p><span id="more"></span><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。<br>常见的盒子有<code>div</code>,<code>span</code>,<code>a</code>。图片、表单元素一律看作是文本，它们并不是盒子。这个很好理解，比如说，一张图片里并不能放东西，它自己就是自己的内容。<br>我们把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。</p><p><img src="https://raw.githubusercontent.com/birpg/image/master/bzhz.jpg"><br><img src="https://raw.githubusercontent.com/birpg/image/master/iehz.jpg"></p><h3 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h3><p>padding属性用于设置内边距。  是指 边框与内容之间的距离。</p><ul><li><p>padding-top:上内边距</p></li><li><p>padding-right:右内边距</p></li><li><p>padding-bottom:下内边距</p></li><li><p>padding-left:左内边距</p></li></ul><p>各个属性的值：<br>4个值：上 右 下 左；<br>3个值：上 左右 下；<br>2个值：上下 左右；<br>1个值：上下左右通用；<br>这个规则通用于盒子模型。</p><h3 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h3><p>三个属性合写顺序：</p><pre><code class="hljs">border : 宽度 样式 颜色 </code></pre><p><code>border-width</code>也就是边框的粗细，常用像素值<code>px</code>，不写不显示边框。</p><p><code>border-style：</code>边框线型。</p><ul><li><p><code>none</code>：没有边框即忽略所有边框的宽度（默认值）</p></li><li><p><code>solid</code>：边框为单实线(最为常用的)</p></li><li><p><code>dashed</code>：边框为虚线  </p></li><li><p><code>dotted</code>：边框为点线</p></li><li><p><code>double</code>：边框为双实线</p></li></ul><p><code>border-color：</code>边框颜色:</p><p>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</p><p>border属性可以拆分为多个，上下左右(<code>top,bottom,left,right</code>)多种组合：</p><pre><code class="hljs">border-方位-属性:</code></pre><p>比如：</p><pre><code class="hljs">border-top-style:solid;</code></pre><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>可以将矩形边框四角设为弧形。<br>值取宽度和高度 一半 矩形 则会变成一个圆形，这一半可以取像素值，也可以为百分比（50%）。</p><pre><code class="hljs">border-radius：左上角  右上角  右下角  左下角;</code></pre><p>从左上角开始，顺时针。</p><h3 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h3><p>margin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p><ul><li><p>margin-top:上外边距</p></li><li><p>margin-right:右外边距</p></li><li><p>margin-bottom:下外边距</p></li><li><p>margin-left:上外边距</p></li></ul><p>margin可以让一个盒子实现水平居中，需要满足一下两个条件：</p><ol><li>必须是块级元素。     </li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><pre><code class="hljs">.header &#123; width:960px; margin:0 auto;&#125;</code></pre><p>文字盒子居中图片和背景区别</p><ol><li>文字水平居中是  text-align: center</li><li>盒子水平居中  左右margin 改为 auto </li></ol><h3 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h3><p>由于一些元素会默认带内外边距，不方便控制，所以我们会用以下代码清除默认的内外边距：<br>    * {<br>    padding:0;<br>    margin:0;<br>    }<br>注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p><p>我们尽量不要给行内元素指定上下的内外边距就好了。</p><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p>box-sizing: content-box：盒子大小为width+padding+border padding和border会撑开盒子  content-box为默认值</p><p>box-sizing: border-box：padding和border的宽度会算在盒子的宽度里,不会撑开盒子</p><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><pre><code class="hljs">box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</code></pre><ul><li><code>h-shadow:</code> 必选，水平阴影，允许负值。</li><li><code>v-shadow:</code> 必选，垂直阴影，允许负值。</li><li><code>blur:</code> 可选，模糊距离</li><li><code>spread:</code> 可选，阴影尺寸</li><li><code>color:</code> 可选，阴影颜色</li><li><code>inset:</code> 可选，将外部阴影（outset）改为内部阴影</li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>文档流又叫标准流、普通流。就是网页内标签元素正常从上到下、从左到右排列的意思。</p><h4 id="文档流特性："><a href="#文档流特性：" class="headerlink" title="文档流特性："></a>文档流特性：</h4><p>（1）空白折叠现象：</p><p>无论多少个空格、换行、tab，都会折叠为一个空格。</p><p>比如，如果我们想让img标签之间没有空隙，必须紧密连接。</p><p>（2）高矮不齐，底边对齐：<br>无论元素高矮，一律以底边对齐</p><p>（3）自动换行，一行写不满，换行写。</p><h3 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h3><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p><p>在CSS中，通过float属性来定义浮动，其基本语法格式如下：</p><pre><code class="hljs">选择器 &#123;float:属性值;&#125;</code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr><tr><td>none</td><td>元素不浮动（默认值）</td></tr></tbody></table><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。<br>浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>清除浮动，是<strong>清除浮动后造成的影响</strong></p><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。也就是高度塌陷。</p><h4 id="clear-both"><a href="#clear-both" class="headerlink" title="clear:both;"></a>clear:both;</h4><pre><code class="hljs">选择器 &#123;clear:属性值;&#125;</code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><h4 id="overflow-hidden"><a href="#overflow-hidden" class="headerlink" title="overflow:hidden"></a>overflow:hidden</h4><p>可以通过触发BFC的方式，可以实现清除浮动效果。</p><pre><code class="hljs">可以给父级添加： overflow：hidden|auto|scroll  都可以实现。</code></pre><p>优点：  代码简洁</p><p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h4 id="after伪元素"><a href="#after伪元素" class="headerlink" title="after伪元素"></a>after伪元素</h4><pre><code class="hljs">.clearfix:after &#123;    content: &quot;.&quot;;    /*内容为&quot;.&quot; 尽量不要为空 否则旧版本浏览器有空隙*/    display: block;             /*转换为块级元素 */    height: 0;                 /*高度为0 */    visibility: hidden;        /* 隐藏盒子 */    clear: both;            /* 清除浮动 */.clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</code></pre><p>优点： 符合闭合浮动思想  结构语义化正确</p><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><h4 id="before和after"><a href="#before和after" class="headerlink" title="before和after"></a>before和after</h4><pre><code class="hljs">.clearfix:before,.clearfix:after &#123; content:&quot;&quot;;display:table;  /* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */&#125;.clearfix:after &#123;clear:both;&#125;.clearfix &#123;*zoom:1;&#125;</code></pre><p>优点：  代码更简洁</p><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h3><p>边偏移：</p><table><thead><tr><th>边偏移属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><p>定位模式：</p><p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p><pre><code class="hljs">选择器 &#123;position:属性值;&#125;</code></pre><p>position属性的常用值</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>自动定位（默认定位方式）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><p>标准流特性，网页中所有元素都默认的是静态定位。</p><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p><strong>相对定位</strong>：让元素相对于自己原来的位置，进行位置调整（可用于盒子的位置微调）。</p><pre><code class="hljs">position: relative;    /*相对定位*/   left: 50px; /*向右移动50px*/top: 50px; /*向下移动50px*/</code></pre><p>相对定位不脱标，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</p><p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p><strong>绝对定位</strong>：定义横纵坐标。原点在父容器的左上角（top）或左下角（bottom）。横坐标用left表示，纵坐标用top或者bottom表示。</p><pre><code class="hljs">position: absolute;  /*绝对定位*/    left: 10px;          /*横坐标*/    top/bottom: 20px;  /*纵坐标*/</code></pre><p>绝对定位脱标，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p><p>绝对定位的盒子脱离了标准文档流。所以，所有的标准文档流的性质，绝对定位之后都不遵守了。<br>绝对定位之后，标签就不区分所谓的行内元素、块级元素了，不需要<code>display:block</code>就可以设置宽、高了。</p><h4 id="绝对定位的参考点"><a href="#绝对定位的参考点" class="headerlink" title="绝对定位的参考点"></a>绝对定位的参考点</h4><p>如果用<strong>top描述</strong>，那么参考点就是<strong>页面的左上角</strong>，而不是浏览器的左上角。</p><p>如果用<strong>bottom描述</strong>，那么参考点就是<strong>浏览器首屏窗口尺寸</strong>，对应的页面的左下角。</p><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>一个绝对定位的元素，如果父辈元素中也出现了已定位（无论是绝对定位、相对定位，还是固定定位）的元素，那么将以父辈这个元素，为参考点。</p><p>注意：</p><ul><li>要听最近的已经定位的祖先元素的，不一定是父亲，可能是爷爷</li><li>不一定是相对定位，任何定位，都可以作为儿子的参考点</li><li>绝对定位的儿子，无视参考的那个盒子的padding</li></ul><p>子绝父绝、<strong>子绝父相</strong>、子绝父固，都是可以给儿子定位的。但是在工程上，如果子绝、父绝，没有一个盒子在标准流里面了，所以页面就不稳固，没有任何实战用途。</p><p>“<strong>子绝父相</strong>”有意义：这样可以保证父亲没有脱标，儿子脱标在父亲的范围里面移动。于是，工程上经常这样做：</p><blockquote><p>父亲浮动，设置相对定位（零偏移），然后让儿子绝对定位一定的距离。</p></blockquote><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p><strong>固定定位</strong>：就是相对浏览器窗口进行定位。无论页面如何滚动，这个盒子显示的位置不变，ie6不兼容。</p><p><strong>用途1</strong>：网页右下角的“返回到顶部”<br>锚点：</p><pre><code class="hljs">position: fixed;right: 0;bottom: 0;&lt;h1 id=&quot;p1&quot;&gt;位置一&lt;/h1&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;h1 id=&quot;p2&quot;&gt;位置二&lt;/h1&gt;&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;a href=&quot;#p1&quot;&gt;跳转到位置一&lt;/a&gt;&lt;a href=&quot;#p2&quot;&gt;跳转到位置二&lt;/a&gt;</code></pre><p><strong>用途2：</strong>顶部导航条</p><h3 id="定位总结"><a href="#定位总结" class="headerlink" title="定位总结"></a>定位总结</h3><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th>是否可以使用边偏移</th><th>移动位置基准</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标，正常模式</td><td>不可以</td><td>正常模式</td></tr><tr><td>相对定位relative</td><td>不脱标，占有位置</td><td>可以</td><td>相对自身位置移动</td></tr><tr><td>绝对定位absolute</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于定位父级移动位置</td></tr><tr><td>固定定位fixed</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于浏览器移动位置</td></tr></tbody></table><h3 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h3><p>跟 浮动一样， 元素添加了 <strong>绝对定位</strong>和<strong>固定定位</strong>之后， 元素模式也会发生转换， <strong>都转换为 行内块模式</strong>， 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后，可以不用转换模式，直接给高度和宽度就可以了。</p><h2 id="z-index属性"><a href="#z-index属性" class="headerlink" title="z-index属性"></a>z-index属性</h2><p><strong>z-index</strong>属性：表示谁压着谁。数值大的压盖住数值小的。</p><p>有如下特性：</p><p> （1）属性值大的位于上层，属性值小的位于下层。</p><p> （2）z-index值没有单位，就是一个正整数。默认的z-index值是0。</p><p> （3）如果大家都没有z-index值，或者z-index值一样，那么在HTML代码里写在后面，谁就在上面能压住别人。定位了的元素，永远能够压住没有定位的元素。</p><p> （4）只有定位了的元素，才能有z-index值。也就是说，不管相对定位、绝对定位、固定定位，都可以使用z-index值。<strong>而浮动的元素不能用</strong>。</p><p> （5）从父现象：意思是，如果父亲1比父亲2大，那么，即使儿子1比儿子2小，儿子1也能在最上层。</p><h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><h3 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h3><p><code>display</code> 设置或检索对象是否及如何显示。</p><p><code>display : none</code> 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p><p>特点： 隐藏之后，不再保留位置。</p><h3 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h3><p>设置或检索是否显示对象。</p><p><code>visible</code> : 　对象可视</p><p><code>hidden</code> : 　对象隐藏</p><p>特点： 隐藏之后，继续保留原有位置。</p><h3 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h3><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><p><code>visible</code> : 　不剪切内容也不添加滚动条。</p><p><code>auto</code> : 　 超出自动显示滚动条，不超出不显示滚动条</p><p><code>hidden</code> : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p><p><code>scroll</code> : 　不管超出内容否，总是显示滚动条</p><h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 </p><pre><code class="hljs">cursor :  default  小白 | pointer  小手  | move  移动  |  text  文本</code></pre><p>尽量不要用<code>hand</code>  因为 火狐不支持     <code>pointer</code> ie6以上都支持的尽量用</p><h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h3><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><pre><code class="hljs">outline : outline-color ||outline-style || outline-width </code></pre><p>但是我们都不关心可以设置多少，我们平时都是去掉的。</p><p>最直接的写法是 ： <code> outline: 0;</code></p><pre><code class="hljs"> &lt;input  type=&quot;text&quot;  style=&quot;outline: 0;&quot;/&gt;</code></pre><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p><code>resize：none</code>    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p><pre><code class="hljs">&lt;textarea  style=&quot;resize: none;&quot;&gt;&lt;/textarea&gt;</code></pre><h3 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h3><pre><code class="hljs">vertical-align : baseline |sub |top |middle |bottom... </code></pre><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认。元素放置在父元素的基线上。</td></tr><tr><td>sub</td><td>垂直对齐文本的下标。</td></tr><tr><td>super</td><td>垂直对齐文本的上标</td></tr><tr><td>top</td><td>把元素的顶端与行中最高元素的顶端对齐</td></tr><tr><td>text-top</td><td>把元素的顶端与父元素字体的顶端对齐</td></tr><tr><td>middle</td><td>把此元素放置在父元素的中部。</td></tr><tr><td>bottom</td><td>把元素的底端与行中最低的元素的顶端对齐。</td></tr><tr><td>text-bottom</td><td>把元素的底端与父元素字体的底端对齐。</td></tr><tr><td>length</td><td></td></tr><tr><td>%</td><td>使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 vertical-align 属性的值。</td></tr></tbody></table><p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， 通常用来控制图片和表单等。</p><h3 id="图片和文字对齐"><a href="#图片和文字对齐" class="headerlink" title="图片和文字对齐"></a>图片和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性你要记住： 如果一个元素没有基线，比如图片或者表单等行内块元素，则他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p><p>解决的方法：</p><p>给<code>img vertical-align:middle | top</code>等等。  让图片不要和基线对齐。</p><p>给<code>img</code> 添加 <code>display：block;</code> 转换为块级元素就不会存在问题了。</p><h2 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h2><h3 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h3><p>normal   使用浏览器默认的换行规则。</p><p>break-all   允许在单词内换行。</p><p>keep-all    只能在半角空格或连字符处换行。</p><h3 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h3><p>text-overflow : clip | ellipsis</p><p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p><p>clip : 　不显示省略标记（…），而是简单的裁切 </p><p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p><h3 id="溢出文本显示为省略号"><a href="#溢出文本显示为省略号" class="headerlink" title="溢出文本显示为省略号"></a>溢出文本显示为省略号</h3><pre><code class="hljs">width: 200px; /* 设定容器宽度 */border: 1px #000 solid; white-space: nowrap; /* 强制文本在一行内显示 */overflow: hidden; /* 溢出内容为隐藏 */text-overflow: ellipsis; /* 溢出文本显示为省略号*/</code></pre>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css篇(二)</title>
    <link href="/blog/2019/10/01/css%E7%AF%87-%E4%BA%8C/"/>
    <url>/blog/2019/10/01/css%E7%AF%87-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>本篇博客主要记录css部分，记录下来主要用于复习,巩固。涉及到伪类选择器，伪元素选择器以及CSS特性</p><span id="more"></span><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><p>用于给链接（a标签）添加特殊效果，写的时候尽量按照 lvha 的顺序写</p><ul><li><code>:link</code>      /* 未访问的链接 */</li><li><code>:visited </code> /* 已访问的链接 */</li><li><code>:hover</code>     /* 鼠标移动到链接上 */</li><li><code>:active</code>    /* 选定的链接 */</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-comment">/* 链接未访问 */</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#f00</span>;<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-comment">/* 链接已访问 不常用*/</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0</span>;<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300px</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-comment">/* 鼠标移到链接上时 */</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#00f</span>;<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-comment">/* 点击连接时  不常用*/</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#0f0</span>;<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">a</span> href=&quot;#&quot;&gt;秒杀&lt;/<span class="hljs-selector-tag">a</span>&gt;<br>&lt;<span class="hljs-selector-tag">a</span> href=&quot;#&quot;&gt;抢购&lt;/<span class="hljs-selector-tag">a</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><ul><li><code>:only-child</code> :只有一个元素时使用。</li><li><code>:first-child</code> :选取属于其父元素的首个子元素的指定选择器</li><li><code>:last-child</code> :选取属于其父元素的最后一个子元素的指定选择器</li><li><code>:nth-child(n)</code> ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li><li><code>:nth-last-child(n)</code> ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<strong>n 可以是数字、关键词或公式。</strong><br>比如：<code>:nth-child(even)</code>正数偶数个，<code>:nth-child(odd)</code> 正数奇数个。<strong>计算奇数偶数时只针对同类型的子元素进行计算</strong></li></ul><h3 id="目标伪类选择器"><a href="#目标伪类选择器" class="headerlink" title="目标伪类选择器"></a>目标伪类选择器</h3><p> :target目标伪类选择器 :选择器可用于选取当前活动的目标元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 激活锚点区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-pseudo">:target</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#ff0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#text1&quot;</span>&gt;</span>示例文字1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#text2&quot;</span>&gt;</span>示例文字2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>示例文字1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>此处放内容。。。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>示例文字2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>此处放内容。。。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p><code>::first-letter</code> ：改变第一个字。<br><code>::first-line</code> ：改变第一行。<br><code>::first-line</code> ：选中文字时可以变化的样式。<br><code>::before</code> ：在盒子内部的前面插入内容。<strong>必须设置content属性</strong><br><code>::after</code> ：在盒子内部后面插入内容。<strong>必须设置content属性</strong><br>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 在盒子内部的前面插入或者是后面插入内容</span></span><br><span class="hljs-comment"><span class="language-css"> * 伪元素本质上是插入了元素（标签、盒子） 只不过是行内元素 如a span*/</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;头部&quot;</span>;<span class="hljs-comment">/* 必须设置content属性，可以为空 */</span></span><br><span class="language-css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#f00</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;尾部&quot;</span>;<span class="hljs-comment">/* 必须设置content属性，可以为空 */</span></span><br><span class="language-css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#0f0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h2><h3 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h3><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ol><h3 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h3><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><ul><li>关于文字样式的属性，都具有继承性。这些属性包括：color、 text-开头的、line-开头的、font-开头的。</li><li>关于盒子、定位、布局的属性，都不能继承。</li></ul><h3 id="CSS权重"><a href="#CSS权重" class="headerlink" title="CSS权重"></a>CSS权重</h3><p>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</p><table><thead><tr><th>继承或者* 的贡献值</th><th>0,0,0,0</th></tr></thead><tbody><tr><td>每个元素（标签）贡献值为</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类贡献值为</td><td>0,0,1,0</td></tr><tr><td>每个ID贡献值为</td><td>0,1,0,0</td></tr><tr><td>每个行内样式贡献值</td><td>1,0,0,0</td></tr><tr><td>每个!important贡献值</td><td>∞ 无穷大</td></tr></tbody></table><p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><ol start="2"><li><p>继承的 权重是 0，即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</p></li><li><p>行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。</p></li></ol><p>总结优先级：</p><ol><li>使用了 !important声明的规则。</li><li>内嵌在 HTML 元素的 style属性里面的声明。</li><li>使用了 ID 选择器的规则。</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li><li>使用了元素选择器的规则。</li><li>只包含一个通用选择器的规则。</li><li>同一类选择器则遵循就近原则。</li></ol><p>总结：权重是优先级的算法，层叠是优先级的表现</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css篇(一)</title>
    <link href="/blog/2019/09/24/css%E7%AF%87-%E4%B8%80/"/>
    <url>/blog/2019/09/24/css%E7%AF%87-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>本篇博客主要记录css部分，记录下来主要用于复习,巩固。涉及到css字体样式属性、文本属性、背景属性、css样式表、标签显示模式、基本选择器。</p><span id="more"></span><h2 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h2><p>CSS(Cascading Style Sheets)</p><p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><p>选择器 {<br>&emsp;&emsp;&emsp;&emsp;属性: 值;<br>&emsp;&emsp;&emsp;&emsp;属性: 值;<br>&emsp;&emsp;&emsp;}<br>比如：</p><pre><code class="hljs">p &#123;color:red;    &lt;!-- 颜色:红色; --&gt;font-size:15px;    &lt;!-- 字体大小:15像素 --&gt;&#125;    </code></pre><h2 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h2><h3 id="font-size：字号大小"><a href="#font-size：字号大小" class="headerlink" title="font-size：字号大小"></a>font-size：字号大小</h3><p>&emsp;&emsp;该属性用于设置字号，常用单位： px，em。其他单位如下：</p><style>table th,td {    width: 600px;    text-align: center;}</style><table><thead><tr><th align="center">绝对单位</th><th align="center">含义</th><th align="center">相对单位</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">in</td><td align="center">英寸</td><td align="center">px</td><td align="center">像素</td></tr><tr><td align="center">cm</td><td align="center">厘米</td><td align="center">em</td><td align="center">相对长度单位</td></tr><tr><td align="center">mm</td><td align="center">毫米</td><td align="center">%</td><td align="center">相对于周围文字百分比</td></tr><tr><td align="center">pt</td><td align="center">点/英镑</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">pc</td><td align="center">皮卡</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>换算：1in = 2.54cm = 25.4 mm = 72pt  = 6pc</strong> </p><h3 id="font-family：字体"><a href="#font-family：字体" class="headerlink" title="font-family：字体"></a>font-family：字体</h3><pre><code class="hljs">p &#123;font-family:Arial,&quot;微软雅黑&quot;,&quot;Times New Roman&quot;;&#125;</code></pre><p>注意：</p><ul><li>尽量使用默认字体，但为了防止用户电脑里没有对应的字体，需要几个备选字体。</li><li>英文字体必须要在前面，否则中文字体会覆盖英文字体。</li><li>字体之间必须用英文状态的逗号隔开。</li><li>中文字体要加引号，英文字体可以不加。</li><li>如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: “Times New Roman”</li></ul><h3 id="font-style：字体风格"><a href="#font-style：字体风格" class="headerlink" title="font-style：字体风格"></a>font-style：字体风格</h3><p>属性：<br><code>normal</code>：默认值，不倾斜。<br><code>italic</code>：倾斜字体。<br><code>obilque</code>：倾斜字体。</p><h3 id="font-weight：字体粗细"><a href="#font-weight：字体粗细" class="headerlink" title="font-weight：字体粗细"></a>font-weight：字体粗细</h3><p>属性：<br><code>normal</code>    默认值。定义标准的字符。<br><code>bold</code>    定义粗体字符。<br><code>bolder</code>    定义更粗的字符。<br><code>lighter</code>    定义更细的字符。<br>数字 400 等价于 normal，而 700 等价于 bold。  但是我们更喜欢用数字来表示。</p><h3 id="font：综合写法"><a href="#font：综合写法" class="headerlink" title="font：综合写法"></a>font：综合写法</h3><pre><code class="hljs">选择器 &#123;font-style font-weight font-size/line-height font-family&#125;p &#123;italic bold 14px/24px &quot;微软雅黑&quot;&#125;</code></pre><ul><li><p>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</p></li><li><p>注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</p></li></ul><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><h3 id="color：文本颜色"><a href="#color：文本颜色" class="headerlink" title="color：文本颜色"></a>color：文本颜色</h3><p>1.预定义的颜色值，如red，green，blue等。</p><p>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式，且#FF0FF可以缩写为#F0F。</p><p>3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</p><p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p><p>在css3中新增了颜色半透明格式：<code>rgba(r, g, b, a )</code>.3是0.3，0可以不写.</p><h3 id="text-shadow：文字阴影"><a href="#text-shadow：文字阴影" class="headerlink" title="text-shadow：文字阴影"></a>text-shadow：文字阴影</h3><p>text-shadow:水平位置 垂直位置 模糊距离 阴影颜色;<br>可以简写只写值：<code>text-shadow:2px 3px 4px rgba(0,0,0,.5);</code>前两项必写，后两项可选写。<br><code>h-shadow</code>水平阴影位置，允许负值。<br><code>v-shadow</code>垂直阴影位置，允许负值。<br><code>blur</code>阴影模糊距离。<br><code>color</code>阴影颜色。</p><h3 id="line-height：行间距（行高）"><a href="#line-height：行间距（行高）" class="headerlink" title="line-height：行间距（行高）"></a>line-height：行间距（行高）</h3><p>ine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</p><h3 id="text-align：水平对齐方式"><a href="#text-align：水平对齐方式" class="headerlink" title="text-align：水平对齐方式"></a>text-align：水平对齐方式</h3><p><code>left</code>：左对齐（默认值）<br><code>right</code>：右对齐<br><code>center</code>：居中对齐</p><h3 id="text-indent：首行缩进"><a href="#text-indent：首行缩进" class="headerlink" title="text-indent：首行缩进"></a>text-indent：首行缩进</h3><p>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p><p>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</p><h3 id="letter-spacing：字间距"><a href="#letter-spacing：字间距" class="headerlink" title="letter-spacing：字间距"></a>letter-spacing：字间距</h3><p>letter-spacing属性用于定义字间距，所谓字间距就是【字符】与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><h3 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing:单词间距"></a>word-spacing:单词间距</h3><p>这个属性对中文字符无效，主要用于定义英文【单词】之间的间距，其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><ul><li><p><code>background-color:#ff99ff;</code>  设置元素的背景颜色。</p></li><li><p><code>background-image:url(images/2.gif);</code> 将图像设置为背景。</p></li><li><p><code>background-repeat: no-repeat;</code>  设置背景图片是否重复及如何重复，默认平铺满。（重要）</p><ul><li><code>no-repeat</code>不要平铺；</li><li><code>repeat-x</code>横向平铺；</li><li><code>repeat-y</code>纵向平铺。</li></ul></li><li><p><code>background-position:center top;</code> 【向右偏移量 向下偏移量 】设置背景图片在当前容器中的位置。可以用像素描述，数值可以是负值，也可以用单词描述。</p></li><li><p><code>background-attachment:scroll;</code> 设置背景图片是否跟着滚动条一起移动。<br>属性值可以是：<code>scroll</code>（与fixed属性相反，默认属性）、<code>fixed</code>（背景就会被固定住，不会被滚动条滚走）。</p></li><li><p><code>background-attachment : scroll | fixed </code> scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定 </p></li></ul><p>设置或检索背景图像是随对象内容滚动还是固定的。</p><p>背景简写：<strong>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置；</strong></p><h3 id="背景缩放"><a href="#背景缩放" class="headerlink" title="背景缩放"></a>背景缩放</h3><p><code>background-size: 300px 100px;</code><br>通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p><p>其参数设置如下：</p><p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p><p>b) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多</p><p>c) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。</p><h3 id="多背景"><a href="#多背景" class="headerlink" title="多背景"></a>多背景</h3><p>以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。</p><ul><li><p>一个元素可以设置多重背景图像。 </p></li><li><p>每组属性间使用逗号分隔。 </p></li><li><p>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</p></li><li><p>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</p></li></ul><h3 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h3><pre><code class="hljs">background: linear-gradient(渐变的起始位置,起始颜色,结束颜色 );    </code></pre><p>举例：</p><pre><code class="hljs">div &#123;        width: 300px;        height: 50px;        margin: 200px auto;        background: linear-gradient(left, #f00, #ff0);    /* 渐变的起始位置,起始颜色,结束颜色 */        background: -webkit-linear-gradient(left, #f00, #ff0);    /* 渐变有很大的兼容性问题,需要加浏览器前缀 */        background: -moz-linear-gradient(left, #f00, #ff0);    &#125;    section &#123;        width: 300px;        height: 50px;        margin: 100px auto;        /* 多段颜色渐变 */        background: -webkit-linear-gradient(left, #f00 0%, #ff0 20%, #fff 40%, #0f0 60%, #0ff 80%, #f0f 100%);    &#125;</code></pre><h2 id="CSS样式表"><a href="#CSS样式表" class="headerlink" title="CSS样式表"></a>CSS样式表</h2><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>又叫内嵌样式表，style标签一般位于head标签中title标签之后。</p><pre><code class="hljs">&lt;head&gt;&lt;style type=&quot;text/CSS&quot;&gt;    选择器 &#123;    属性1:属性值1;     属性2:属性值2;     属性3:属性值3;    &#125;&lt;/style&gt;&lt;/head&gt;</code></pre><h3 id="内联样式表"><a href="#内联样式表" class="headerlink" title="内联样式表"></a>内联样式表</h3><p>又叫行内样式表，在某个特定的标签里采用style属性，范围只针对此标签。</p><pre><code class="hljs">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; 内容 &lt;/标签名&gt;</code></pre><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><p>又叫链入式，是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中。<br>在.CSS为扩展名的外部样式表文件中，直接写样式不用再加<code>&lt;style&gt;</code>标签。</p><pre><code class="hljs">&lt;head&gt;  &lt;link href=&quot;CSS文件的路径&quot; type=&quot;text/CSS&quot; rel=&quot;stylesheet&quot; /&gt;&lt;/head&gt;</code></pre><h3 id="样式优先级"><a href="#样式优先级" class="headerlink" title="样式优先级"></a>样式优先级</h3><p>内联样式表优先级最高，内部样式表与外部样式表的优先级与排列的顺序有关，排列最靠后的优先级别高。</p><h2 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h2><h3 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h3><p>block每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素。</p><p>块级元素的特点：</p><p>（1）总是从新行开始</p><p>（2）高度，行高、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器的100%</p><p>（4）可以容纳内联元素和其他块元素。</p><h3 id="行类元素-inline-level"><a href="#行类元素-inline-level" class="headerlink" title="行类元素(inline-level)"></a>行类元素(inline-level)</h3><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式</p><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标签最典型的行内元素。</p><p>行内元素的特点：</p><p>（1）和相邻行内元素在一行上。</p><p>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）行内元素只能容纳文本或则其他行内元素。（a特殊）</p><p>注意：</p><ol><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li><li>链接里面不能再放链接。</li></ol><h3 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h3><p>块级元素的特点：<br>（1）总是从新行开始<br>（2）高度，行高、外边距以及内边距都可以控制。<br>（3）宽度默认是容器的100%<br>（4）可以容纳内联元素和其他块元素。</p><p>行内元素的特点：<br>（1）和相邻行内元素在一行上。<br>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。<br>（3）默认宽度就是它本身内容的宽度。<br>（4）行内元素只能容纳文本或则其他行内元素。</p><h3 id="行内块元素-inline-block"><a href="#行内块元素-inline-block" class="headerlink" title="行内块元素(inline-block)"></a>行内块元素(inline-block)</h3><p>在行内元素中有几个特殊的标签:<code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</p><p>行内块元素的特点：<br>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。<br>（2）默认宽度就是它本身内容的宽度。<br>（3）高度，行高、外边距以及内边距都可以控制。</p><h3 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h3><p>块转行内：<code>display:inline;</code></p><p>行内转块：<code>display:block;</code></p><p>块、行内元素转换为行内块： <code>display: inline-block;</code></p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h3><p>可以按照标签分类统一指定CSS样式，但是无法指定某个样式，不能设计差异化样式。<br>    标签名{<br>    属性1:属性值1;<br>    属性2:属性值2;<br>    属性3:属性值3;<br>    }</p><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><p>针对某一个特定的标签来使用，<strong>只能使用一次</strong>。css中的ID选择器以”#”来定义。<br><strong>HTML页面，不能出现相同的id，哪怕他们不是一个类型</strong><br>在标签中通过<code>id=”id名“ </code>来使用。<br><strong>尽可能的用class，除非极特殊的情况可以用id，因为js要用id属性得到标签，所以css尽量不要用id</strong>。</p><pre><code class="hljs">#id名 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</code></pre><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名。<br>在标签中通过<code>class = ”类名“</code>来使用。</p><pre><code class="hljs">.类名 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</code></pre><p>和id非常相似，任何的标签都可以携带id属性和class属性。class属性的特点：</p><ul><li>特性1：类选择器可以被多种标签使用。</li><li>特性2：同一个标签可以使用多个类选择器。用<strong>空格</strong>隔开。</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">fin</span> <span class="hljs-symbol">font20</span> <span class="hljs-symbol">cas</span>&quot;&gt;文本&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>注意：<br>（1）不要去试图用一个类名，把某个标签的所有样式写完。这个标签要多携带几个类，共同完成这个标签的样式。</p><p>（2）每一个类要尽可能小，有“公共”的概念，能够让更多的标签使用。</p><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>通配符选择器用”*“号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。</p><pre><code class="hljs">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</code></pre><p>比如：</p><pre><code class="hljs">* &#123;margin: 0;                    /* 定义外边距*/padding: 0;                   /* 定义内边距*/&#125;</code></pre><h3 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h3><pre><code class="hljs">&lt;style type=&quot;text/css&quot;&gt;/* 群组选择器/并集选择器 */h1,div, &#123;    width: 500px;     height: 45px;&#125;/* 包含选择器/后代选择器 */.bao span &#123;    background: #f0f;&#125;/* 交集选择器 */h3.special &#123;    /* 没有空格，有空格的是后代选择器 */    color:red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;选择器&lt;/h1&gt;    &lt;div&gt;选择器&lt;/div&gt;    &lt;div class=&quot;bao&quot;&gt;        选择器选择器&lt;span&gt;包含选择器&lt;/span&gt;选择器选择器    &lt;/div&gt;    &lt;h3 class=&quot;special zhongyao&quot;&gt;标题1&lt;/h3&gt;    &lt;h3 class=&quot;special&quot;&gt;我也是标题&lt;/h3&gt;&lt;/body&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html篇</title>
    <link href="/blog/2019/09/21/html%E7%AF%87/"/>
    <url>/blog/2019/09/21/html%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>本篇博客主要是为了将所学的html内容的整理并记录下来，涉及到web标准，主流浏览器及内核，html标签等内容，部分内容没有记录。</p><span id="more"></span><h2 id="web标准"><a href="#web标准" class="headerlink" title="web标准"></a>web标准</h2><p>web标准介绍：</p><ul><li>w3c：万维网联盟组织，用来制定web标准的机构（组织）</li><li>web标准：制作网页要遵循的规范。</li><li>web标准规范的分类：结构标准、表现标准、行为标准。</li><li>结构：html。表现：css。行为：JavaScript。</li></ul><p>web标准总结：</p><ul><li>结构标准：相当于人的身体。html就是用来制作网页的。</li><li>表现标准： 相当于人的衣服。css就是对网页进行美化的。</li><li>行为标准： 相当于人的动作。JS就是让网页动起来，具有生命力的。</li></ul><h2 id="主流浏览器及其内核"><a href="#主流浏览器及其内核" class="headerlink" title="主流浏览器及其内核"></a>主流浏览器及其内核</h2><p>&emsp;&emsp;浏览器内核也可以叫渲染引擎，负责对网页语法进行解释并显示网页，不同的浏览器内核对网页语法的解释也有所不同，所以网页显示的效果也可能不太一样，<strong>因此浏览器的兼容问题主要是内核不同造成的</strong>。</p><style>table th,td {    width: 600px;    text-align: center;}</style><table><thead><tr><th align="center">浏览器</th><th align="center">内核</th></tr></thead><tbody><tr><td align="center">IE</td><td align="center">trident</td></tr><tr><td align="center">欧鹏</td><td align="center">blink</td></tr><tr><td align="center">火狐</td><td align="center">gecko</td></tr><tr><td align="center">chrome</td><td align="center">webkit</td></tr><tr><td align="center">Safari</td><td align="center">webkit</td></tr></tbody></table><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="html概述"><a href="#html概述" class="headerlink" title="html概述"></a>html概述</h3><p>&emsp;&emsp;<strong>html</strong>是<strong>超文本标记语言</strong>，是一种描述性的标记语言，负责描述文档<strong>语义</strong>的，不是编程语言，没有编译过程，是由浏览器直接解析并执行的。</p><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><p>由三部分组成：</p><ul><li>声明部分：告诉浏览器这个页面使用的是哪个标准，比如<!DOCTYPE html>是html5标准。</li><li>head部分：告诉页面的一些额外信息，里面的内容不会显示在页面上。</li><li>body部分：主体部分，显示页面的代码要写在这个部分里。</li></ul><p>这三个部分可以快速生成，新建html格式文件后，输入英文输入法的 ！后，按tab就可以快速生成，以下是meta标签介绍。</p><pre><code class="hljs">&lt;!-- 字符集 --&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;!--网页的标题，有助于SEO优化--&gt;&lt;title&gt;XX星空 - 大型单机游戏媒体 提供特色单机游戏资讯、下载&lt;/title&gt;&lt;!--Keywords是页面关键词，是搜索引擎关注点之一，可以提高搜索命中率--&gt;&lt;meta name=&quot;keywords&quot; content=&quot;单机游戏,单机游戏门户,PC游戏下载,攻略秘籍,新闻资讯,图片,PSP&quot; /&gt;&lt;!--内容摘要, 就是简要说明网站的主要做什么的,百度搜索可以直接看见，用于SEO(搜索引擎优化)--&gt;&lt;meta name=&quot;description&quot; content=&quot;XX星空是国内单机游戏门户网站,提供特色的游戏资讯,大量游戏攻略,经验,评测文章,以及热门游戏资料专题&quot; /&gt;</code></pre><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre><code class="hljs">&lt;!-- 这个是注释 --&gt;</code></pre><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><pre><code class="hljs">&lt;h1&gt;这个是一级标题&lt;/h1&gt;&lt;h2&gt;这个是二级标题&lt;/h2&gt;&lt;h3&gt;这个是三级标题&lt;/h3&gt;&lt;h4&gt;这个是四级标题&lt;/h4&gt;&lt;h5&gt;这个是五级标题&lt;/h5&gt;&lt;h6&gt;这个是六级标题&lt;/h6&gt;</code></pre><h4 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h4><p>div：容器，可以放任何元素，独占一行<br>span：容器，只能放文字、图片、表单元素，不能放<code>h</code>,<code>p</code>,<code>ul</code>,<code>dl</code>,<code>ol</code>,<code>div</code>，以并行显示。</p><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>p标签是文本标签，只能放文字、图片、表单元素。</p><pre><code class="hljs">&lt;p&gt;这个是段落&lt;/p&gt;</code></pre><h4 id="倾斜加粗下划线"><a href="#倾斜加粗下划线" class="headerlink" title="倾斜加粗下划线"></a>倾斜加粗下划线</h4><pre><code class="hljs">&lt;i&gt;这个是倾斜&lt;/i&gt;&lt;em&gt;这个也是倾斜&lt;/em&gt;&lt;b&gt;这个是加粗&lt;/b&gt;&lt;strong&gt;这个也是加粗&lt;/strong&gt;&lt;u&gt;这个是下划线&lt;/u&gt;&lt;del&gt;删除线&lt;/del&gt;</code></pre><h4 id="换行水平线"><a href="#换行水平线" class="headerlink" title="换行水平线"></a>换行水平线</h4><p>这两个几乎不用</p><pre><code class="hljs">&lt;br /&gt;        &lt;!--换行--&gt;&lt;hr&gt;        &lt;!--水平线--&gt;</code></pre><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><ul><li><code>&amp;nbsp;</code>：空格</li><li><code>&amp;lt;</code>：小于号</li><li><code>&amp;gt;</code>：大于号</li><li><code>&amp;amp;</code>：符号<code>&amp;</code></li><li><code>&amp;quot;</code>：双引号</li><li><code>&amp;apos;</code>：单引号</li><li><code>&amp;copy;</code>：版权<code>©</code></li><li><code>&amp;trade;</code>：商标<code>™</code></li></ul><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><pre><code class="hljs">&lt;a href=&quot;index.html&quot;&gt;点击进入另外一个页面文件&lt;/a&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</code></pre><p><em>属性：</em></p><ul><li><code>href</code>：目标URL</li><li><code>title</code>：悬停文本。</li><li><code>name</code>：主要用于设置一个锚点的名称。</li><li><code>target</code>：告诉浏览器用什么方式来打开目标页面。<code>target</code>属性有以下几个值：<ul><li><code>_self</code>：在同一个网页中显示（默认值）</li><li><code>_blank</code>：在新的窗口中打开。</li><li><code>_parent</code>：在父窗口中显示</li><li><code>_top</code>：在顶级窗口中显示</li></ul></li></ul><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>img是单标签，<code>../</code>代表上一级目录<br><em>相对路径：</em></p><pre><code class="hljs">&lt;!-- 当前目录中的图片 --&gt;&lt;img src=&quot;1.jpg&quot;&gt;&lt;!-- 上一级目录中的图片 --&gt;&lt;img src=&quot;..\2.jpg&quot;&gt;    </code></pre><p><em>绝对路径：</em></p><pre><code class="hljs">&lt;img src=&quot;E:\images\001\ppt\1.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/birpg/image/master/html.jpg&quot;&gt;</code></pre><p><em>img标签的其他属性</em></p><ul><li><code>width</code>：宽度</li><li><code>height</code>：高度</li><li><code>align</code>：指图片的水平对齐方式，属性值可以是：left、center、right</li><li><code>title</code>：提示性文本,也就是鼠标悬停时出现的文本</li><li><code>border</code>：给图片加边框，单位是像素</li><li><code>hspace</code>：指图片左右的边距</li><li><code>vspace</code>：指图片上下的边距</li><li><code>alt</code>：当图片显示不出来的时候，代替图片显示的内容</li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p><em>无序列表：</em></p><pre><code class="hljs">&lt;ul&gt;    &lt;li&gt;列表项1&lt;/li&gt;    &lt;li&gt;列表项2&lt;/li&gt;    &lt;li&gt;列表项3&lt;/li&gt;&lt;/ul&gt;</code></pre><ul>    <li>列表项1</li>    <li>列表项2</li>    <li>列表项3</li></ul><p>属性：<br><code>disc</code>实心圆点（默认）<br><code>square</code>实心方点<br><code>circle</code>空心圆</p><p><em>有序列表：</em></p><pre><code class="hljs">&lt;ol&gt;    &lt;li&gt;列表项1&lt;/li&gt;    &lt;li&gt;列表项2&lt;/li&gt;    &lt;li&gt;列表项3&lt;/li&gt;&lt;/ol&gt;</code></pre><ol>    <li>列表项1</li>    <li>列表项2</li>    <li>列表项3</li></ol><p>属性：<br><code>1</code>(默认)，<code>a</code>(A)，<code>i</code>(I)</p><p><em>定义列表：</em></p><pre><code class="hljs">&lt;dl&gt;&lt;dt&gt;列表标题&lt;/dt&gt;&lt;dd&gt;列表内容1&lt;/dd&gt;&lt;dd&gt;列表内容2&lt;/dd&gt;&lt;/dl&gt;</code></pre><dl>    <dt>列表标题</dt>    <dd>列表内容1</dd>    <dd>列表内容2</dd></dl><hr><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><pre><code class="hljs">&lt;table&gt;    &lt;tr&gt;        &lt;th&gt;表头&lt;/th&gt;        &lt;th&gt;表头&lt;/th&gt;        &lt;th&gt;表头&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;11111&lt;/td&gt;        &lt;td&gt;22222&lt;/td&gt;        &lt;td&gt;33333&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><table>    <tr>        <th>表头</th>        <th>表头</th>        <th>表头</th>    </tr>    <tr>        <td>11111</td>        <td>22222</td>        <td>33333</td>    </tr></table><p><em><code>&lt;th&gt;</code>:</em> 加粗单元格<br><em><code>&lt;table&gt;</code>的属性：</em></p><ul><li><code>border</code>：边框。像素为单位。</li><li><code>style=&quot;border-collapse:collapse;&quot;</code>：单元格的线和表格的边框线合并（表格的两边框合并为一条）</li><li><code>width</code>：宽度。像素为单位。</li><li><code>height</code>：高度。像素为单位。</li><li><code>bordercolor</code>：表格的边框颜色。</li><li><code>align</code>：表格的水平对齐方式。属性值可以填：left right center。<br>注意：这里不是设置表格里内容的对齐方式，如果想设置内容的对齐方式，要对单元格标签<code>&lt;td&gt;</code>进行设置）</li><li><code>cellpadding</code>：单元格内容到边的距离，像素为单位。默认情况下，文字是紧挨着左边那条线的，即默认情况下的值为0。<br>注意不是单元格内容到四条边的距离哈，而是到一条边的距离，默认是与左边那条线的距离。如果设置属性<code>dir=&quot;rtl&quot;</code>，那就指的是内容到右边那条线的距离。</li><li><code>cellspacing</code>：单元格和单元格之间的距离（外边距），像素为单位。默认情况下的值为0</li><li><code>bgcolor=&quot;#99cc66&quot;</code>：表格的背景颜色。</li><li><code>background=&quot;路径src/...&quot;</code>：背景图片。<br>背景图片的优先级大于背景颜色。</li></ul><p><em><code>&lt;tr&gt;</code>行属性：</em></p><ul><li><code>bgcolor</code>：设置这一行的单元格的背景色。</li><li><code>height</code>：一行的高度</li><li><code>align=&quot;center&quot;</code>：一行的内容水平居中显示，取值：left、center、right</li><li><code>valign=&quot;center&quot;</code>：一行的内容垂直居中，取值：top、middle、bottom</li></ul><p><em><code>&lt;td&gt;</code>单元格属性：</em></p><ul><li><code>align</code>：内容的横向对齐方式。属性值可以填：left right center。</li><li><code>valign</code>：内容的纵向对齐方式。属性值可以填：top middle bottom</li><li><code>width</code>：绝对值或者相对值(%)</li><li><code>height</code>：单元格的高度</li><li><code>bgcolor</code>：设置这个单元格的背景色。</li><li><code>background</code>：设置这个单元格的背景图片。</li></ul><p><em>单元格合并：</em><br><code>colspan</code> 横向合并，<code>colspan=&quot;2&quot;</code>表示当前单元格在水平方向上要占据两个单元格的位置。<br><code>rowspan</code>纵向合并，<code>rowspan=&quot;2&quot;</code>表示当前单元格在垂直方向上要占据两个单元格的位置。<br>合并单元格需要删掉被合并的单元格</p><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><span class="hljs-comment">&lt;!-- 表单字段级标题必须是fieldset内第一个元素 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入您的姓名&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><span class="hljs-comment">&lt;!-- 表单字段级标题必须是fieldset内第一个元素 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 单选按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> /&gt;</span><br>     <span class="hljs-comment">&lt;!-- label将元素绑定到控件上，可以点击按钮选中也可以点击文字选中 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 复选按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    爱好：运动<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;like&quot;</span> /&gt;</span><br>    读书<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;like&quot;</span> /&gt;</span><br>    画画<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;like&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;下一页&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 下拉菜单 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    出生年月：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2019<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2018<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2017<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2016<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2015<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>年<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>月<br>    <br>    <span class="hljs-comment">&lt;!--多行文本框--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    个人简介:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50px&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br></code></pre></td></tr></table></figure><form>    <fieldset>    <legend>用户登录</legend>    <p>姓名：<input type="text" placeholder="请输入您的姓名" /></p>    <p>密码：<input type="password" /></p>    <p>    <input type="submit" value="登录" />    <input type="reset" value="重置" />    </p>    </fieldset>    <fieldset>    <legend>用户注册</legend>    <p>性别：<label for="male">男</label><input type="radio" name="sex" id="male" />    <label for="female">女</label><input type="radio" name="sex" id="female" /></p>    <p>    爱好：运动<input type="checkbox" name="like" />    读书<input type="checkbox" name="like" />    画画<input type="checkbox" name="like" />    </p>    <p><input type="button" value="下一页" /></p>    <p>    出生年月：    <select>        <option>2019</option>        <option>2018</option>        <option>2017</option>        <option>2016</option>        <option>2015</option>    </select>年    <select>        <option>1</option>        <option>2</option>        <option>3</option>        <option>4</option>        <option>5</option>    </select>月        <p>        个人简介:        <textarea cols="30px" rows="5px"></textarea>    </p>    </p>    </fieldset>    </form><hr>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/blog/2019/09/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/blog/2019/09/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="我写博客的目的"><a href="#我写博客的目的" class="headerlink" title="我写博客的目的"></a>我写博客的目的</h1><p>  这个月开始自学前端，建个博客用来记录和总结自己的所学，同时起到督促自己的作用。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
